lvim.builtin.which_key.mappings = {
  ["L"] = { "<cmd>Legendary<cr>", "Legendary" },
  ["C"] = { "<cmd>lua require('telescope').extensions.neoclip.default()<cr>", "Neoclip" },
  ["A"] = { "<cmd>Alpha<cr>", "Alpha" },
  ["e"] = { "<cmd>Neotree float reveal_force_cwd<cr>", "Explorer" },
  ["w"] = { "<cmd>w!<CR>", "Save" },
  ["q"] = { "<cmd>q!<CR>", "Quit" },
  ["h"] = { "<cmd>nohlsearch<CR>", "No Highlight" },
  ["P"] = { "<cmd>lua require('telescope').load_extension('projects').projects()<cr>", "Projects" },
  ["R"] = { "<cmd>source $MYVIMRC<cr>", "Reload" },
  ['cc'] = { "<cmd>lua require('user.colorscheme').randomColorScheme()<CR>", "Random Colo" },
  ["?"] = { "<cmd>Cheatsheet<cr>", "Cheatsheet" },

  f = {
    name = "Find",
    a = { '<cmd>lua require(\'telescope.builtin\').commands()<cr>', 'Commands' },
    b = { '<cmd>lua require(\'telescope.builtin\').buffers()<cr>', 'Buffers' },
    c = { "<cmd>lua require('telescope.builtin').colorscheme({enable_preview=true})<cr>", "Colorscheme" },
    e = { '<cmd>NvimTreeToggle<cr>', 'Explorer' },
    f = { '<cmd>lua require(\'telescope.builtin\').find_files()<cr>', 'Files' },
    g = {
      '<cmd>lua require(\'telescope.builtin\').live_grep()<cr>',
      'Live Grep',
    },
    h = { "<cmd>lua require('telescope.builtin').help_tags()<cr>", "Find Help" },
    k = { "<cmd>lua require('telescope.builtin').keymaps()<cr>", "Keymaps" },
    m = { '<cmd>lua require(\'telescope.builtin\').marks()<cr>', 'Marks' },
    n = { '<cmd>Telescope notify<CR>', "Notifications" },
    o = {
      '<cmd>lua require(\'telescope.builtin\').oldfiles()<cr>',
      'Old Files',
    },
    w = {
      '<cmd>lua require(\'telescope.builtin\').current_buffer_fuzzy_find()<cr>',
      'Current Buffer',
    },
    C = { "<cmd> lua require('telescope').extensions.neoclip.default()<cr>", "Clipboard" },
    B = { "<cmd> lua require('telescope.builtin').git_branches()<cr>", "Git Branches" },
    M = { "<cmd>lua require('telescope.builtin').man_pages()<cr>", "Man Pages" },
    R = { "<cmd>lua require('telescope.builtin').registers()<cr>", "Registers" },
  },
  p = {
    name = "Packer",
    c = { "<cmd>PackerCompile<cr>", "Compile" },
    i = { "<cmd>PackerInstall<cr>", "Install" },
    s = { "<cmd>PackerSync<cr>", "Sync" },
    S = { "<cmd>PackerStatus<cr>", "Status" },
    u = { "<cmd>PackerUpdate<cr>", "Update" },
  },
  g = {
    name = 'Goto',
    d = { '<Cmd>lua vim.lsp.buf.definition()<CR>', 'Definition' },
    -- d = { "<cmd>lua require('goto-preview').goto_preview_definition()<CR>", "Definition" },
    D = { '<Cmd>lua vim.lsp.buf.declaration()<CR>', 'Declaration' },
    h = { '<cmd>lua vim.lsp.buf.signature_help()<CR>', 'Signature Help' },
    I = { '<cmd>Telescope lsp_implementations<CR>', 'Goto Implementation' },
    b = { '<cmd>lua vim.lsp.buf.type_definition()<CR>', 'Goto Type Definition' },
    l = { '<cmd>lua vim.diagnostic.open_float()<CR>', 'Hover Diagnostic' },
    n = { '<cmd>vim.diagnostic.goto_next()<CR>', 'Next Diagnostic' },
    p = { '<cmd>vim.diagnostic.goto_prev()<CR>', 'Prev Diagnostic' },
    -- b = { "<cmd>lua require('goto-preview').goto_preview_type_definition()<CR>", "Goto Type Definition" },
  },
  G = {
    name = "Git",
    g = { "<cmd>lua _LAZYGIT_TOGGLE()<CR>", "Lazygit" },
    j = { "<cmd>lua require('gitsigns').next_hunk()<cr>", "Next Hunk" },
    k = { "<cmd>lua require('gitsigns').prev_hunk()<cr>", "Prev Hunk" },
    l = { "<cmd>lua require('gitsigns').blame_line()<cr>", "Blame" },
    p = { "<cmd>lua require('gitsigns').preview_hunk()<cr>", "Preview Hunk" },
    r = { "<cmd>lua require('gitsigns').reset_hunk()<cr>", "Reset Hunk" },
    R = { "<cmd>lua require('gitsigns').reset_buffer()<cr>", "Reset Buffer" },
    s = { "<cmd>lua require('gitsigns').stage_hunk()<cr>", "Stage Hunk" },
    u = { "<cmd>lua require('gitsigns').undo_stage_hunk()<cr>", "Undo Stage Hunk" },
    o = { "<cmd>lua require('telescope.builtin').git_status()<cr>", "Open changed file" },
    b = { "<cmd>lua require('telescope.builtin').git_branches()<cr>", "Checkout branch" },
    c = { "<cmd>lua require('telescope.builtin').git_commits()<cr>", "Checkout commit" },
    d = {
      "<cmd>Gitsigns diffthis HEAD<cr>",
      "Diff",
    },
    n = { "<cmd>lua require('telescope').extensions.git_worktree.create_git_worktree()<CR>", "Create a  new worktree" },
    w = { "<cmd>lua require('telescope').extensions.git_worktree.git_worktrees()<CR>", "Enter or Delete a worktree" },
    D = {
      name = "Diffview",
      o = { "<cmd>DiffviewOpen<CR>", "Diffview Open" },
      c = { "<cmd>DiffviewClose<CR>", "Diffview Close" }
    }
  },

  s = {
    name = "Search",
    h = { '<C-w>h', "Move Left" },
    j = { '<C-w>j', "Move Down" },
    k = { '<C-w>k', "Move Up" },
    l = { '<C-w>l', "Move right" },
  },

  t = {
    name = "Terminal",
    n = { "<cmd>lua _NODE_TOGGLE()<cr>", "Node" },
    u = { "<cmd>lua _NCDU_TOGGLE()<cr>", "NCDU" },
    t = { "<cmd>lua _HTOP_TOGGLE()<cr>", "Htop" },
    p = { "<cmd>lua _PYTHON_TOGGLE()<cr>", "Python" },
    f = { "<cmd>ToggleTerm direction=float<cr>", "Float" },
    h = { "<cmd>ToggleTerm size=10 direction=horizontal<cr>", "Horizontal" },
    v = { "<cmd>ToggleTerm size=80 direction=vertical<cr>", "Vertical" },
  },


  l = {
    name = "LSP",
    D = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Goto Declaration" },
    H = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Signature Help" },
    R = { "<cmd>lua require('telescope.builtin').lsp_references()<cr>", "References" },

    a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
    d = { "<cmd>lua require('telescope.builtin').lsp_definitions()<cr>", "Goto Definition" },
    f = { "<cmd>lua vim.lsp.buf.format({async = true})<cr>", "Format" },
    h = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover" },
    i = { "<cmd>lua require('telescope.builtin').lsp_implementations()<cr>", "Implimentations" },
    j = { "<cmd>lua vim.diagnostic.goto_next()<cr>", "Next Diagnostic" },
    k = { "<cmd>lua vim.diagnostic.goto_prev()<cr>", "Prev Diagnostic" },
    l = { "<cmd>lua vim.lsp.codelens.run()<cr>", "CodeLens Action" },
    q = { "<cmd>lua require('telescope.builtin').quickfix()<cr>", "Quickfix" },
    r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename" },
    s = { "<cmd>lua require('telescope.builtin').lsp_document_symbols()<cr>", "Document Symbols" },
    t = { "<cmd>lua require('telescope.builtin').lsp_type_definitions()<cr>", "Type Definition" },
    w = { "<cmd>Telescope lsp_workspace_diagnostics<CR>", "Workspace Diagnostics" },
    o = { "<cmd>SymbolsOutline<cr>", "Outline" },
    O = { "<cmd>TodoTelescope<cr>", "Todo" },
    P = {
      name = "Peek",
      d = { "<cmd>lua require('user.lsp.peek').Peek('definition')<cr>", "Definition" },
      t = { "<cmd>lua require('user.lsp.peek').Peek('typeDefinition')<cr>", "Type Definition" },
      i = { "<cmd>lua require('user.lsp.peek').Peek('implementation')<cr>", "Implementation" },
    },
    T = {
      name = "Trouble",
      t = { "<cmd>TroubleToggle<cr>", "Toggle" },
      w = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics" },
      d = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics" },
      q = { "<cmd>TroubleToggle quickfix<cr>", "QuickFix" },
      l = { "<cmd>TroubleToggle loclist<cr>", "Loc List" },
      L = { "<cmd>TroubleToggle lsp_references<cr>", "Reference" },
    },
  },

  b = {
    name = "Buffers",
    j = { "<cmd>BufferLinePick<cr>", "Jump" },
    f = { require("telescope.builtin").buffers, "Find" },
    b = { "<cmd>BufferLineCyclePrev<cr>", "Previous" },
    n = { "<cmd>BufferLineCycleNext<cr>", "Next" },
    e = {
      "<cmd>BufferLinePickClose<cr>",
      "Pick which buffer to close",
    },
    h = { "<cmd>BufferLineCloseLeft<cr>", "Close all to the left" },
    l = {
      "<cmd>BufferLineCloseRight<cr>",
      "Close all to the right",
    },
    D = {
      "<cmd>BufferLineSortByDirectory<cr>",
      "Sort by directory",
    },
    L = {
      "<cmd>BufferLineSortByExtension<cr>",
      "Sort by language",
    },
  },

  m = {
    name = "Motion",
    h = { "<cmd>HopWord<cr>", "Hop" },
    t = { "<cmd>tabnew<cr>", "New Tab" },
    n = { "<cmd>tabn<cr>", "Next Tab" },
    p = { "<cmd>tabp<cr>", "Previous Tab" },
    c = { "<cmd>tabclose<cr>", "Close Tab" },
  },

  n = {
    name = "Neotest",
    a = { "<cmd>lua require('neotest').run.attach()<cr>", "Attach" },
    f = { "<cmd>lua require('neotest').run.run(vim.fn.expand('%'))<cr>", "Run File" },
    F = { "<cmd>lua require('neotest').run.run({vim.fn.expand('%'), strategy = 'dap'})<cr>", "Debug File" },
    l = { "<cmd>lua require('neotest').run.run_last()<cr>", "Run Last" },
    L = { "<cmd>lua require('neotest').run.run_last({ strategy = 'dap' })<cr>", "Debug Last" },
    n = { "<cmd>lua require('neotest').run.run()<cr>", "Run Nearest" },
    N = { "<cmd>lua require('neotest').run.run({strategy = 'dap'})<cr>", "Debug Nearest" },
    o = { "<cmd>lua require('neotest').output.open({ enter = true })<cr>", "Output" },
    S = { "<cmd>lua require('neotest').run.stop()<cr>", "Stop" },
    s = { "<cmd>lua require('neotest').summary.toggle()<cr>", "Summary" },
    v = { "<cmd>TestVisit<cr>", "Visit" },
    x = { "<cmd>TestSuite<cr>", "Suite" },
  },
  o = {
    name = "Overseer",
    C = { "<cmd>OverseerClose<cr>", "OverseerClose" },
    a = { "<cmd>OverseerTaskAction<cr>", "OverseerTaskAction" },
    b = { "<cmd>OverseerBuild<cr>", "OverseerBuild" },
    c = { "<cmd>OverseerRunCmd<cr>", "OverseerRunCmd" },
    d = { "<cmd>OverseerDeleteBundle<cr>", "OverseerDeleteBundle" },
    l = { "<cmd>OverseerLoadBundle<cr>", "OverseerLoadBundle" },
    o = { "<cmd>OverseerOpen!<cr>", "OverseerOpen" },
    q = { "<cmd>OverseerQuickAction<cr>", "OverseerQuickAction" },
    r = { "<cmd>OverseerRun<cr>", "OverseerRun" },
    s = { "<cmd>OverseerSaveBundle<cr>", "OverseerSaveBundle" },
    t = { "<cmd>OverseerToggle!<cr>", "OverseerToggle" },
  },
  S = {
    name = "Session",
    c = { "<cmd>lua require('persistence').load()<cr>", "Restore last session for current dir" },
    l = { "<cmd>lua require('persistence').load({ last = true })<cr>", "Restore last session" },
    Q = { "<cmd>lua require('persistence').stop()<cr>", "Quit without saving session" },
  },

  d = {
    name = "Debug",
    b = { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Breakpoint" },
    c = { "<cmd>lua require'dap'.continue()<cr>", "Continue" },
    i = { "<cmd>lua require'dap'.step_into()<cr>", "Into" },
    o = { "<cmd>lua require'dap'.step_over()<cr>", "Over" },
    O = { "<cmd>lua require'dap'.step_out()<cr>", "Out" },
    r = { "<cmd>lua require'dap'.repl.toggle()<cr>", "Repl" },
    l = { "<cmd>lua require'dap'.run_last()<cr>", "Last" },
    u = { "<cmd>lua require'dapui'.toggle()<cr>", "UI" },
    x = { "<cmd>lua require'dap'.terminate()<cr>", "Exit" },
  },
  v = {
    name = "Versions (PackageJSON)",
    s = { "<cmd>lua require'package-info'.show<CR>", "Toggle Package Versions" },
    u = { "<cmd>lua require'package-info'.update()<CR>", "Update This Package" },
    d = { "<cmd>lua require'package-info'.delete()<CR>", "Delete This Package" },
    i = { "<cmd>lua require'package-info'.install()<CR>", "Install new dependency" },
    v = { "<cmd>lua require'package-info'.change_version<CR>", "Install a different version" }

  },
  z = {
    name = "Zen",
    a = { "<cmd>TZAtaraxis<cr>", "Ataraxis" },
    m = { "<cmd>TZMinimalist<cr>", "Minimalist" },
    n = { "<cmd>TZNarrow<cr>", "Narrow" },
    f = { "<cmd>TZFocus<cr>", "Focus" },
  },
  h = {
    name = "Harpoon",
    m = { "<cmd> lua  require('harpoon.mark').add_file()<CR>", "Add  File" },
    l = { "<cmd> lua require('harpoon.ui').toggle_quick_menu()<CR>", "List" },
    ["1"] = { "<cmd> lua require('harpoon.ui').nav_file(1)<CR>", "Go To File 1" },
    ["2"] = { "<cmd>lua require('harpoon.ui').nav_file(2)<CR>", "Go To File 2" },
    n = { "<cmd>lua require('harpoon.ui').nav_next()<CR>", "Next file" },
    p = { "<cmd>lua require('harpoon.ui').nav_prev()<CR>", "Prev file" },
    t = { "<cmd>lua require('harpoon.ui').gotoTerminal(1)<CR>", "Go to Terminal" }



  }
}
