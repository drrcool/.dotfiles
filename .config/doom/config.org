#+Title: Emacs Config

** My Info:
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Richard Cool"
      user-mail-address "richardjcool@gmail.com")
#+end_src

#+RESULTS:
: richardjcool@gmail.com


** Move to trash to delete
#+begin_src emacs-lisp :tangle yes
(setq-default delete-by-moving-to-trash t
              trash-directory "~/.local/share/Trash/files/")
#+end_src

#+RESULTS:
: ~/.local/share/Trash/files/

** Font
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Anonymice Nerd Font Mono" :size 20)
      doom-big-font (font-spec :family "Anonymice Nerd Font Mono" :size 30)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 20)
      doom-unicode-font (font-spec :family "Spleen 32x64" :size 20)
      doom-serif-font (font-spec :family "DankMono Nerd Font" :size 20)

      )


(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+end_src

#+RESULTS:
| doom--customize-themes-h-40 | doom--customize-themes-h-44 |


** COMMENT Theme
#+begin_src emacs-lisp :tangle yes
(use-package! modus-themes
:init
  (setq modus-themes-hl-line '(intense)
  modus-themes-subtle-line-numbers nil
  modus-themes-region '(no-extend bg-only)
  modus-themes-variable-pitch-ui nil
  modus-themes-fringes 'intense
  modus-themes-diffs nil
  modus-themes-italic-constructs t
  modus-themes-bold-constructs  t
  modus-themes-prompts '( bold intense italic)
  modus-themes-intense-mouseovers t
  modus-themes-paren-match '(bold intense)
  modus-themes-syntax '( yellow-comments)
  modus-themes-links '(neutral-underline background)
  modus-themes-mode-line '(moody borderless accented 4 1)
    modus-themes-org-blocks 'gray-background
    modus-themes-markup '(intense background)
    modus-themes-mail-citations 'intensep
    modus-themes-lang-checkers '(background))

:config
(modus-themes-load-vivendi)
(map! :leader
    :prefix "t"
    :desc "Toggle Modus theme"  #'modus-themes-toggle)
)
#+end_src

** Copilot
#+begin_src emacs-lisp :tangle yes
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
         #+END_SRC

         #+RESULTS:


* Turn on rainbow mode
#+begin_src emacs-lisp :tangle yes
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

#+RESULTS:
: t

* line numbers
#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: relative

* tramp
#+begin_src emacs-lisp :tangle yes
(setq tramp-default-method "ssh")

#+end_src

#+RESULTS:
: ssh

* auto-tangle
#+begin_src emacs-lisp :tangle yes
(after! org-mode
 (use-package! org-auto-mode
   :defer t
   :hook (org-mode . org-auto-tangle-mode)
   :config
   (setq org-auto-tangle-default t))
)
#+end_src

#+RESULTS:


* COMMENT Ivy Posframe
#+begin_src emacs-lisp :tangle yes
(setq ivy-posframe-display-functions-alist
      '((swiper                         . ivy-posframe-display-at-point)
     (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(setq ivy-posframe-border-width 0)
(ivy-posframe-mode 1)
#+end_src

#+RESULTS:
: t

#+RESULTS:
: t

* Org
   #+begin_src emacs-lisp :tangle yes
(after! org
  ;; TODO: extract org-directory into noweb reference so it can be used in all the places
  (setq org-directory "~/org"
        org-agenda-files '(
                           "~/org/todo.org"
                           "~/org/agenda.org"
                           )
        +org-capture-todo-file "inbox.org")
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "HOLD(h)" "|" "DONE(d!)" "CANCELLED(c!)")))

  (setq org-todo-keyword-faces '(("TODO" . (:foreground "#7bc275" :weight normal))
                                 ("WAIT" . (:foreground "orange" :weight normal))
                                 ("HOLD" . (:inherit warning :weight normal))))


  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (js . t)
     (lua . t)
     (sql . t)
     ))
  (setq python-shell-completion-native-enable nil)
  (setq org-src-window-setup 'current-window)

   (defun org-babel-execute:typescript (body params)
    (let ((org-babel-js-cmd "npx ts-node < "))
      (org-babel-execute:js body params)))
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window)

  (setq org-capture-templates
        '(
          ("t" "todo" entry (file +org-capture-todo-file) "* TODO %?")
          ("n" "node" entry (file +org-capture-todo-file) "* Note: ")
          ("p" "process email" entry (file +org-capture-todo-file)
           "* TODO %? %:fromname: %a")
          )))

(map!
 :leader
 :prefix "m"
 :map 'org-src-mode-map
 (:desc "Accept SRC Edits"
 :nmv "J" #'org-edit-src-exit)
 (:desc "Abort SRC Edits"
 :nmv "X" #'org-edit-src-abort))
#+end_src

#+RESULTS:
: org-edit-src-abort

* Set HUGO base directory
#+begin_src emacs-lisp :tangle yes

(setq org-hugo-base-dir "~/org/markdown")

#+end_src

#+RESULTS:
: ~/org/markdown

** Turn on beacon
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! beacon
    :config
    (beacon-mode +1))
#+end_src

#+RESULTS:
: t

** Line Highlighting and Fringe
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs.d/init.el
  ;; Turn on line highlithting for current line
  (hl-line-mode 1)
  ;; Add some margins
  (set-fringe-mode 10)
#+END_SRC

#+RESULTS:
: ((buffer-predicate . doom-buffer-frame-predicate) (right-divider-width . 1) (bottom-divider-width . 1) (menu-bar-lines . 1) (vertical-scroll-bars) (tool-bar-lines . 0) (left-fringe . 10) (right-fringe . 10))

** Keys for Mac
#+begin_src emacs-lisp  :tangle ~/.emacs.d/init.el
  (setq mac-command-modifier       'meta
        mac-option-modifier        'meta
        mac-control-modifier       'control
        mac-right-option-modifier     'meta
        mac-right-control-modifier  'control)
#+end_src

#+RESULTS:
: control


** Manage how new windows are placed
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (winner-mode +1)
  (setq display-buffer-base-action
    '((display-buffer-reuse-window
       display-buffer-reuse-mode-window
       display-buffer-same-window
       display-buffer-in-previous-window)))
#+end_src

#+RESULTS:
| display-buffer-reuse-window | display-buffer-reuse-mode-window | display-buffer-same-window | display-buffer-in-previous-window |

* Customize mode line
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
    (setq
     doom-modeline-hud t
     doom-modeline-minor-modes nil
          doom-modeline-height 25))
#+end_src

#+RESULTS:
: 25

** Mixed Pitch
A better verson of variable pitch.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! mixed-pitch
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face '(org-date org-priority org-tag org-special-keyword))
      (add-to-list 'mixed-pitch-fixed-pitch-faces face))
   )
#+end_src

#+RESULTS:

** Quickrun
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! quickrun
    :defer t
    :general
    (general-def
     :states 'normal
     :prefix "SPC"
     :keymaps 'quickrun--mode-map
     "cq" '(nil :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")"cq" '(nil :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")
 ))
#+end_src

#+RESULTS:

** Auto-revert changed files
#+begin_src emacs-lisp  :tangle ~/.emacs.d/init.el
  (setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

#+RESULTS:
: t


* Treesitter
#+begin_src emacs-lisp :tangle yes
(after! tree-sitter
(add-to-list 'tree-sitter-major-mode-language-alist '(tsx-mode . tsx))
)
#+end_src

#+RESULTS:

* LSP-UI
#+begin_src emacs-lisp :tangle yes
(use-package! lsp-ui
  :after lsp
  :hook ((lsp-mode . lsp-ui-mode)
         (lsp-mode . lsp-ui-sideline-mode))
  :config
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-doc-position 'top)
  )
#+end_src

#+RESULTS:

*TSX Mode
#+begin_src emacs-lisp :tangle yes
(use-package! tsi
  :hook ((web-mode-hook . tsi-typescript-mode)
         (typescript-mode-hook . tsi-typescript-mode)
         (tsx-mode-hook . tsi-typescript-mode)
          (json-mode-hook . tsi-typescript-mode)
          (css-mode-hook . tsi-css-mode)
          (scss-mode-hook . tsi-scss-mode))
  :config
  (require 'tsi-css)
  (require 'tsi-json)
  (require 'tsi-typescript)

)

(use-package! tsx-mode

  :hook (tsx-mode . lsp-deferred)
  :config
  (add-to-list 'auto-mode-alist '("\\.[jt]sx?\\'" . tsx-mode))

(map!
 :leader
 :prefix "m"
 :map 'general-override-mode-map
 (:desc "Toggle All Nodes"
  :nmv #'tsx-mode-fold-toggle-all-nodes)
 (:desc "Toggle Coverage"
        :nmv #'tsx-mode-coverage-toggle)
 (:desc "Toggle Node"
        :nvm #'tsx-mode-fold-toggle-node)
)
)
#+end_src

#+RESULTS:
| lsp-deferred |

* Format on Save
#+begin_src emacs-lisp :tangle yes
(use-package! apheleia
  :config
  (apheleia-global-mode +1))

#+end_src

#+RESULTS:
: t

* Hydras
** Switch Buffers
#+begin_src emacs-lisp :tangle yes
(defun my/name-of-buffers (n)
  "Return the names of the first N buffers from `buffer-list'."
  (let ((bns
         (delq nil
               (mapcar
                (lambda (b)
                  (unless (string-match "^ " (setq b (buffer-name b)))
                    b))
                (buffer-list)))))
    (subseq bns 1 (min (1+ n) (length bns)))))

;; Given ("a", "b", "c"), return "1. a, 2. b, 3. c".
(defun my/number-names (list)
  "Enumerate and concatenate LIST."
  (let ((i 0))
    (mapconcat
     (lambda (x)
       (format "%d. %s" (cl-incf i) x))
     list
     ", ")))

(defvar my/last-buffers nil)

(defun my/switch-to-buffer (arg)
  (interactive "p")
  (switch-to-buffer
   (nth (1- arg) my/last-buffers)))

(defun my/switch-to-buffer-other-window (arg)
  (interactive "p")
  (switch-to-buffer-other-window
   (nth (1- arg) my/last-buffers)))

 (defhydra hydra:switch-buffer (:exit t
                                :body-pre (setq my/last-buffers
                                                (my/name-of-buffers 4)))
   "
_o_ther buffers: %s(my/number-names my/last-buffers)

"
   ("o" my/switch-to-buffer "this window")
   ("O" my/switch-to-buffer-other-window "other window")
   ("<escape>" nil))
#+end_src

#+RESULTS:
: hydra:switch-buffer/body


** LSP
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (defhydra hydra:lsp (:exit t :hint nil)
    "
   Buffer^^               Server^^                   Symbol
  -------------------------------------------------------------------------------------
   [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
   [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
   [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
    ("d" lsp-find-declaration)
    ("D" lsp-ui-peek-find-definitions)
    ("R" lsp-ui-peek-find-references)
    ("i" lsp-ui-peek-find-implementation)
    ("t" lsp-find-type-definition)
    ("s" lsp-signature-help)
    ("o" lsp-describe-thing-at-point)
    ("r" lsp-rename)

    ("f" lsp-format-buffer)
    ("m" lsp-ui-imenu)
    ("x" lsp-execute-code-action)

    ("M-s" lsp-describe-session)
    ("M-r" lsp-restart-workspace)
    ("S" lsp-shutdown-workspace))
#+end_src
** Dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
      (defhydra hydra:dired (:hint nil :color pink)
        "
      _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
      _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
      _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
      _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
      _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
      _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
      _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
      _z_ compress-file  _A_ find regexp
      _Z_ compress       _Q_ repl regexp

      T - tag prefix
      "
        ("\\" dired-do-ispell)
        ("(" dired-hide-details-mode)
        (")" dired-omit-mode)
        ("+" dired-create-directory)
        ("=" diredp-ediff)         ;; smart diff
        ("?" dired-summary)
        ("$" diredp-hide-subdir-nomove)
        ("A" dired-do-find-regexp)
        ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
        ("E" dired-mark-extension)
        ("e" dired-ediff-files)
        ("F" dired-do-find-marked-files)
        ("G" dired-do-chgrp)
        ("g" revert-buffer)        ;; read all directories again (refresh)
        ("i" dired-maybe-insert-subdir)
        ("l" dired-do-redisplay)   ;; relist the marked or singel directory
        ("M" dired-do-chmod)
        ("m" dired-mark)
        ("O" dired-display-file)
        ("o" dired-find-file-other-window)
        ("Q" dired-do-find-regexp-and-replace)
        ("R" dired-do-rename)
        ("r" dired-do-rsynch)
        ("S" dired-do-symlink)
        ("s" dired-sort-toggle-or-edit)
        ("t" dired-toggle-marks)
        ("U" dired-unmark-al-marks)
        ("u" dired-unmark)
        ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
        ("w" dired-kill-subdir)
        ("Y" dired-do-relsymlink)
        ("z" diredp-compress-this-file)
        ("Z" dired-do-compress)
        ("q" nil)
        ("." nil :color blue)

      (define-key dired-mode-map "." 'hydra-dired/body)
#+end_src

#+RESULTS:
: hydra-dired/body

** Theme swticher
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
           (defhydra hydr:a:themes   (:hint nil)
             "
              Dark                ^Light^
         ----------------------------------------------
         _1_ one              _z_ one-light
         _2_ vivendi          _x_ operandi
         _3_ molokai          _c_ ef-trio-light
         _4_ snazzy          MORE DARK BELOW
         _5_ old-hope         _v_     ef-dark
         _6_ henna            _b_     doom-dark+
         _7_ kaolin-galaxy    _n_     iosevkm
         _8_ monokai-machine  _m_     vibrant
         _9_ xcode                ^
         _0_ moonlight            ^
         _-_ laserwave            ^
         _q_ quit                 ^
         ^                        ^
           "
             ;; Dark
             ("1" (consult-theme 'doom-one )             "one")
             ("2" (consult-theme 'modus-vivendi )             "modus-vivendi")
             ("3" (consult-theme 'doom-molokai )             "molokai")
             ("4" (consult-theme 'doom-snazzy t )             "snazzy")
             ("5" (consult-theme 'doom-old-hope )             "old hope")
             ("6" (consult-theme 'doom-henna )             "henna")
             ("7" (consult-theme 'kaolin-galaxy )             "jaolin-galaxy")
             ("8" (consult-theme 'doom-monokai-machine )             "monokai-machine")
             ("9" (consult-theme 'doom-xcode )             "xcode")
             ("0" (consult-theme 'doom-moonlight )             "moonlight")
             ("-" (consult-theme 'doom-laserwave )             "laserwave")
             ("z" (consult-theme 'doom-one-light )
              "one-light")
             ("x" (consult-theme 'modus-operandi )             "operand")
  ("c" (consult-theme 'ef-trio-light )             "ef-trio-light")
  ("v" (consult-theme 'ef-dark )             "ef-dark")
  ("b" (consult-theme 'doom-dark+ )             "doom-dark+")
  ("n" (consult-theme 'doom-Iosvkem )             "Iosvkem")
  ("m" (consult-theme 'doom-vibrant )             "vibrant")
   ("q" nil)

             )



#+end_src

#+RESULTS:
: rc:themes/body

** window commands
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (defhydra hydra:themes (:hint nil)
     "
  Movement      ^Split^            ^Switch^        ^Resize^
  ----------------------------------------------------------------
  _M-<left>_  <   _s_ vertical      _b_uffer        _<left>_  <
  _M-<right>_ >   _v_ horizontal    _f_ind file     _<down>_  ↓
  _M-<up>_    ↑   _m_aximize        _x_wap          _<up>_    ↑
  _M-<down>_  ↓   _c_lose           _[_backward     _<right>_ >
  _q_uit          _e_qualize        _]_forward     ^
  ^               ^               _K_ill         ^
  ^               ^                  ^             ^
  "
     ;; Movement
     ("M-<left>" windmove-left)
     ("M-<down>" windmove-down)
     ("M-<up>" windmove-up)
     ("M-<right>" windmove-right)

     ;; Split/manage
     ("s" rc/split-window-vertically-and-switch)
     ("v" rc/split-window-horizontally-and-switch)
     ("c" evil-window-delete)
     ("d" evil-window-delete)
     ("m" delete-other-windows)
     ("e" balance-windows)

     ;; Switch
     ("b" consult-switch-buffer)
     ("f" consult-find)
     ("P" project-find-file)
     ("x" ace-swap-window)
     ("[" previous-buffer)
     ("]" next-buffer)
     ("K" kill-this-buffer)

     ;; Resize
     ("<left>" windresize-left)
     ("<right>" windresize-right)
     ("<down>" windresize-down)
     ("<up>" windresize-up)

     ("q" nil))
#+END_SRC

#+RESULTS:
: hydra:themes/body

** Flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defhydra hydra:flycheck
     (:pre (flycheck-list-errors)
      :post (quit-windows-on "*Flycheck errors*")
      :hint nil)
   "Errors"
   ("f" flycheck-error-list-set-filter "Filter")

   ("j" flycheck-next-error "Next")
   ("k" flycheck-previous-error "Previous")
   ("gg" flycheck-first-error "First")
   ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
   ("q" nil))
#+end_src

#+RESULTS:
: hydra:flycheck/body

** Org
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
        ;; Hydra for org agenda (graciously taken from Spacemacs)
        (defhydra hydra:org (:pre (setq which-key-inhibit t)
                                         :post (setq which-key-inhibit nil)
                                         :hint none)
          "
        Org agenda (_q_uit)

        ^Clock^      ^Visit entry^              ^Date^             ^Other^
        ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
        _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
        _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
        _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
        _cj_ jump    _o_   link                 _+_  do later      ^^
        ^^           ^^                         _-_  do earlier    ^^
        ^^           ^^                         ^^                 ^^
        ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
        ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
        _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
    :keymaps 'override
  _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
        _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
        _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
        _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
        _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
        _vp_ prev span  ^^                       ^^                 ^^
        _vr_ reset      ^^                       ^^                 ^^
        ^^              ^^                       ^^                 ^^
        "
          ;; Entry
          ("hA" org-agenda-archive-default)
          ("hk" org-agenda-kill)
          ("hp" org-agenda-priority)
          ("hr" org-agenda-refile)
          ("h:" org-agenda-set-tags)
          ("ht" org-agenda-todo)
          ;; Visit entry
          ("o"   link-hint-open-link :exit t)
          ("<tab>" org-agenda-goto :exit t)
          ("TAB" org-agenda-goto :exit t)
          ("SPC" org-agenda-show-and-scroll-up)
          ("RET" org-agenda-switch-to :exit t)
          ;; Date
          ("dt" org-agenda-date-prompt)
          ("dd" org-agenda-deadline)
          ("+" org-agenda-do-date-later)
          ("-" org-agenda-do-date-earlier)
          ("ds" org-agenda-schedule)
          ;; View
          ("vd" org-agenda-day-view)
          ("vw" org-agenda-week-view)
          ("vt" org-agenda-fortnight-view)
          ("vm" org-agenda-month-view)
          ("vy" org-agenda-year-view)
          ("vn" org-agenda-later)
          ("vp" org-agenda-earlier)
          ("vr" org-agenda-reset-view)
          ;; Toggle mode
          ("ta" org-agenda-archives-mode)
          ("tA" (org-agenda-archives-mode 'files))
          ("tr" org-agenda-clockreport-mode)
          ("tf" org-agenda-follow-mode)
          ("tl" org-agenda-log-mode)
          ("td" org-agenda-toggle-diary)
          ;; Filter
          ("fc" org-agenda-filter-by-category)
          ("fx" org-agenda-filter-by-regexp)
          ("ft" org-agenda-filter-by-tag)
          ("fr" org-agenda-filter-by-tag-refine)
          ("fh" org-agenda-filter-by-top-headline)
          ("fd" org-agenda-filter-remove-all)
          ;; Clock
          ("cq" org-agenda-clock-cancel)
          ("cj" org-agenda-clock-goto :exit t)
          ("ci" org-agenda-clock-in :exit t)
          ("co" org-agenda-clock-out)
          ;; Other
          ("q" nil :exit t)
          ("gd" org-agenda-goto-date)
          ("." org-agenda-goto-today)
          ("gr" org-agenda-redo))
#+end_src

#+RESULTS:
: hydra:org/body

** Avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
      (defhydra hydra:avy (:exit t :hint nil)
        "
       Line^^       Region^^        Goto
      ----------------------------------------------------------
       [_y_] yank   [_Y_] yank      [_c_] timed char  [_C_] char
       [_m_] move   [_M_] move      [_w_] word        [_W_] any word
       [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
        ("c" avy-goto-char-timer)
        ("C" avy-goto-char)
        ("w" avy-goto-word-1)
        ("W" avy-goto-word-0)
        ("l" avy-goto-line)
        ("L" avy-goto-end-of-line)
        ("m" avy-move-line)
        ("M" avy-move-region)
  ("k" avy-kill-whole-line)
        ("K" avy-kill-region)
        ("y" avy-copy-line)
        ("Y" avy-copy-region))

#+end_src

#+RESULTS:
: hydra:avy/body

** YasNippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(defhydra hydra:yasnippet (:color blue :hint nil)
  "
              ^YASnippets^
--------------------------------------------
  Modes:    Load/Visit:    Actions:

 _g_lobal  _d_irectory    _i_nsert
 _m_inor   _f_ile         _t_ryout
 _e_xtra   _l_ist         _n_ew
         _a_ll
"
  ("d" yas-load-directory)
  ("e" yas-activate-extra-mode)
  ("i" yas-insert-snippet)
  ("f" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet)
  ("t" yas-tryout-snippet)
  ("l" yas-describe-tables)
  ("g" yas/global-mode)
  ("m" yas/minor-mode)
  ("a" yas-reload-all))
#+end_src

#+RESULTS:
: hydra:yasnippet/body
** Code folding
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
 (defhydra hydra:folding (:color red)
   "
  _o_pen node    _n_ext fold       toggle _f_orward  _s_how current only
  _c_lose node   _p_revious fold   toggle _a_ll
  "
   ("o" origami-open-node)
   ("c" origami-close-node)
   ("n" origami-next-fold)
   ("p" origami-previous-fold)
   ("f" origami-forward-toggle-node)
   ("a" origami-toggle-all-nodes)
   ("s" origami-show-only-node))
#+end_src


** Keybinds
#+begin_src emacs-lisp :tangle yes
(map!
 :leader
 :prefix "H"
(:desc "Themes"
       :nvm "t" #'hydra:themes/body)
(:desc "Windows"
       :nvm "w" #'hydra:windows/body)
(:desc "Dired"
       :nvm "d" #'hydra:dired/body)
(:desc "FlyCheck"
       :nvm "f" #'hydra:flycheck/body)
(:desc "Org"
       :nvm "o" #'hydra:org/body)
(:desc "Avy"
       :nvm "a" #'hydra:yasnippet/body)
(:desc "Folding"
       :nvm "z" #'hydra:folding/body)
(:desc "LSP"
       :nvm "l" #'hydra:lsp/body)
(:desc "Buffers"
       :nvm "b" #'hydra:buffers/body)
(:desc "DAP"
       :nvm "D" #'hydra-dap))
#+end_src

#+RESULTS:
: hydra-dap/body
