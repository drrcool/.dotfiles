#+Title: Emacs Config

** My Info:
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Richard Cool"
      user-mail-address "richardjcool@gmail.com")
#+end_src

#+RESULTS:
: richardjcool@gmail.com


** Move to trash to delete
#+begin_src emacs-lisp :tangle yes
(setq-default delete-by-moving-to-trash t
              trash-directory "~/.local/share/Trash/files/")
#+end_src

#+RESULTS:
: ~/.local/share/Trash/files/

** Font
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Anonymice Nerd Font Mono" :size 20)
      doom-big-font (font-spec :family "Anonymice Nerd Font Mono" :size 30)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 20)
      doom-unicode-font (font-spec :family "Spleen 32x64" :size 20)
      doom-serif-font (font-spec :family "DankMono Nerd Font" :size 20)

      )


(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+end_src

#+RESULTS:
| doom--customize-themes-h-40 | doom--customize-themes-h-44 |


** COMMENT Theme
#+begin_src emacs-lisp :tangle yes
(use-package! modus-themes
:init
  (setq modus-themes-hl-line '(intense)
  modus-themes-subtle-line-numbers nil
  modus-themes-region '(no-extend bg-only)
  modus-themes-variable-pitch-ui nil
  modus-themes-fringes 'intense
  modus-themes-diffs nil
  modus-themes-italic-constructs t
  modus-themes-bold-constructs  t
  modus-themes-prompts '( bold intense italic)
  modus-themes-intense-mouseovers t
  modus-themes-paren-match '(bold intense)
  modus-themes-syntax '( yellow-comments)
  modus-themes-links '(neutral-underline background)
  modus-themes-mode-line '(moody borderless accented 4 1)
    modus-themes-org-blocks 'gray-background
    modus-themes-markup '(intense background)
    modus-themes-mail-citations 'intensep
    modus-themes-lang-checkers '(background))

:config
(modus-themes-load-vivendi)
(map! :leader
    :prefix "t"
    :desc "Toggle Modus theme"  #'modus-themes-toggle)
)
#+end_src

** Copilot
#+begin_src emacs-lisp :tangle yes
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
         #+END_SRC

         #+RESULTS:


* Turn on rainbow mode
#+begin_src emacs-lisp :tangle yes
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

#+RESULTS:
: t

* line numbers
#+begin_src emacs-lisp :tangle yes
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: relative

* tramp
#+begin_src emacs-lisp :tangle yes
(setq tramp-default-method "ssh")

#+end_src

#+RESULTS:
: ssh

* auto-tangle
#+begin_src emacs-lisp :tangle yes
(after! org-mode
 (use-package! org-auto-mode
   :defer t
   :hook (org-mode . org-auto-tangle-mode)
   :config
   (setq org-auto-tangle-default t))
)
#+end_src

#+RESULTS:


* COMMENT Ivy Posframe
#+begin_src emacs-lisp :tangle yes
(setq ivy-posframe-display-functions-alist
      '((swiper                         . ivy-posframe-display-at-point)
     (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
(setq ivy-posframe-border-width 0)
(ivy-posframe-mode 1)
#+end_src

#+RESULTS:
: t

#+RESULTS:
: t

* Org
   #+begin_src emacs-lisp :tangle yes
(after! org
  ;; TODO: extract org-directory into noweb reference so it can be used in all the places
  (setq org-directory "~/org"
        org-agenda-files '(
                           "~/org/todo.org"
                           "~/org/agenda.org"
                           )
        +org-capture-todo-file "inbox.org")
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "HOLD(h)" "|" "DONE(d!)" "CANCELLED(c!)")))

  (setq org-todo-keyword-faces '(("TODO" . (:foreground "#7bc275" :weight normal))
                                 ("WAIT" . (:foreground "orange" :weight normal))
                                 ("HOLD" . (:inherit warning :weight normal))))


  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (js . t)
     (lua . t)
     (sql . t)
     ))
  (setq python-shell-completion-native-enable nil)
  (setq org-src-window-setup 'current-window)

   (defun org-babel-execute:typescript (body params)
    (let ((org-babel-js-cmd "npx ts-node < "))
      (org-babel-execute:js body params)))
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window)

  (setq org-capture-templates
        '(
          ("t" "todo" entry (file +org-capture-todo-file) "* TODO %?")
          ("n" "node" entry (file +org-capture-todo-file) "* Note: ")
          ("p" "process email" entry (file +org-capture-todo-file)
           "* TODO %? %:fromname: %a")
          )))

(map!
 :leader
 :prefix "m"
 :map 'org-src-mode-map
 (:desc "Accept SRC Edits"
 :nmv "J" #'org-edit-src-exit)
 (:desc "Abort SRC Edits"
 :nmv "X" #'org-edit-src-abort))
#+end_src

#+RESULTS:
: org-edit-src-abort

* Set HUGO base directory
#+begin_src emacs-lisp :tangle yes

(setq org-hugo-base-dir "~/org/markdown")

#+end_src

#+RESULTS:
: ~/org/markdown

** Turn on beacon
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! beacon
    :config
    (beacon-mode +1))
#+end_src

#+RESULTS:
: t

** Line Highlighting and Fringe
#+BEGIN_SRC emacs-lisp  :tangle ~/.emacs.d/init.el
  ;; Turn on line highlithting for current line
  (hl-line-mode 1)
  ;; Add some margins
  (set-fringe-mode 10)
#+END_SRC

#+RESULTS:
: ((buffer-predicate . doom-buffer-frame-predicate) (right-divider-width . 1) (bottom-divider-width . 1) (menu-bar-lines . 1) (vertical-scroll-bars) (tool-bar-lines . 0) (left-fringe . 10) (right-fringe . 10))

** Keys for Mac
#+begin_src emacs-lisp  :tangle ~/.emacs.d/init.el
  (setq mac-command-modifier       'meta
        mac-option-modifier        'meta
        mac-control-modifier       'control
        mac-right-option-modifier     'meta
        mac-right-control-modifier  'control)
#+end_src

#+RESULTS:
: control


** Manage how new windows are placed
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (winner-mode +1)
  (setq display-buffer-base-action
    '((display-buffer-reuse-window
       display-buffer-reuse-mode-window
       display-buffer-same-window
       display-buffer-in-previous-window)))
#+end_src

#+RESULTS:
| display-buffer-reuse-window | display-buffer-reuse-mode-window | display-buffer-same-window | display-buffer-in-previous-window |

* Customize mode line
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
    (setq
     doom-modeline-hud t
     doom-modeline-minor-modes nil
          doom-modeline-height 25))
#+end_src

#+RESULTS:
: 25

** Mixed Pitch
A better verson of variable pitch.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! mixed-pitch
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face '(org-date org-priority org-tag org-special-keyword))
      (add-to-list 'mixed-pitch-fixed-pitch-faces face))
   )
#+end_src

#+RESULTS:

** Quickrun
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package! quickrun
    :defer t
    :general
    (general-def
     :states 'normal
     :prefix "SPC"
     :keymaps 'quickrun--mode-map
     "cq" '(nil :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")"cq" '(nil :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")
 ))
#+end_src

#+RESULTS:

** Auto-revert changed files
#+begin_src emacs-lisp  :tangle ~/.emacs.d/init.el
  (setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

#+RESULTS:
: t


* Treesitter
#+begin_src emacs-lisp :tangle yes
(after! tree-sitter
(add-to-list 'tree-sitter-major-mode-language-alist '(tsx-mode . tsx))
)
#+end_src

#+RESULTS:

* LSP-UI
#+begin_src emacs-lisp :tangle yes
(use-package! lsp-ui
  :after lsp
  :hook ((lsp-mode . lsp-ui-mode)
         (lsp-mode . lsp-ui-sideline-mode))
  :config
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-doc-position 'top)
  )
#+end_src

#+RESULTS:

*TSX Mode
#+begin_src emacs-lisp :tangle yes
(use-package! tsi
  :hook ((web-mode-hook . tsi-typescript-mode)
         (typescript-mode-hook . tsi-typescript-mode)
         (tsx-mode-hook . tsi-typescript-mode)
          (json-mode-hook . tsi-typescript-mode)
          (css-mode-hook . tsi-css-mode)
          (scss-mode-hook . tsi-scss-mode))
  :config
  (require 'tsi-css)
  (require 'tsi-json)
  (require 'tsi-typescript)

)

(use-package! tsx-mode

  :hook (tsx-mode . lsp-deferred)
  :config
  (add-to-list 'auto-mode-alist '("\\.[jt]sx?\\'" . tsx-mode))

(map!
 :leader
 :prefix "m"
 :map 'general-override-mode-map
 (:desc "Toggle All Nodes"
  :nmv #'tsx-mode-fold-toggle-all-nodes)
 (:desc "Toggle Coverage"
        :nmv #'tsx-mode-coverage-toggle)
 (:desc "Toggle Node"
        :nvm #'tsx-mode-fold-toggle-node)
)
)
#+end_src

#+RESULTS:
| lsp-deferred |

* Format on Save
#+begin_src emacs-lisp :tangle yes
(use-package! apheleia
  :config
  (apheleia-global-mode +1))

#+end_src

#+RESULTS:
: t

** LSP
  ;;   ("d" lsp-find-declaration)
  ;;   ("D" lsp-ui-peek-find-definitions)
  ;;   ("R" lsp-ui-peek-find-references)
  ;;   ("i" lsp-ui-peek-find-implementation)
  ;;   ("t" lsp-find-type-definition)
  ;;   ("s" lsp-signature-help)
  ;;   ("o" lsp-describe-thing-at-point)
  ;;   ("r" lsp-rename)

  ;;   ("f" lsp-format-buffer)
  ;;   ("m" lsp-ui-imenu)
  ;;   ("x" lsp-execute-code-action)

  ;;   ("M-s" lsp-describe-session)
  ;;   ("M-r" lsp-restart-workspace)
  ;;   ("S" lsp-shutdown-workspace))
#+end_src

** Flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
   ;; ("f" flycheck-error-list-set-filter "Filter")

   ;; ("j" flycheck-next-error "Next")
   ;; ("k" flycheck-previous-error "Previous")
   ;; ("gg" flycheck-first-error "First")
   ;; ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
#+end_src

#+RESULTS:
: hydra:flycheck/body

** Org
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
        ;; Hydra for org agenda (graciously taken from Spacemacs)
          ;; ;; Entry
          ;; ("hA" org-agenda-archive-default)
          ;; ("hk" org-agenda-kill)
          ;; ("hp" org-agenda-priority)
          ;; ("hr" org-agenda-refile)
          ;; ("h:" org-agenda-set-tags)
          ;; ("ht" org-agenda-todo)
          ;; ;; Visit entry
          ;; ("o"   link-hint-open-link :exit t)
          ;; ("<tab>" org-agenda-goto :exit t)
          ;; ("TAB" org-agenda-goto :exit t)
          ;; ("SPC" org-agenda-show-and-scroll-up)
          ;; ("RET" org-agenda-switch-to :exit t)
          ;; ;; Date
          ;; ("dt" org-agenda-date-prompt)
          ;; ("dd" org-agenda-deadline)
          ;; ("+" org-agenda-do-date-later)
          ;; ("-" org-agenda-do-date-earlier)
          ;; ("ds" org-agenda-schedule)
          ;; ;; View
          ;; ("vd" org-agenda-day-view)
          ;; ("vw" org-agenda-week-view)
          ;; ("vt" org-agenda-fortnight-view)
          ;; ("vm" org-agenda-month-view)
          ;; ("vy" org-agenda-year-view)
          ;; ("vn" org-agenda-later)
          ;; ("vp" org-agenda-earlier)
          ;; ("vr" org-agenda-reset-view)
          ;; ;; Toggle mode
          ;; ("ta" org-agenda-archives-mode)
          ;; ("tA" (org-agenda-archives-mode 'files))
          ;; ("tr" org-agenda-clockreport-mode)
          ;; ("tf" org-agenda-follow-mode)
          ;; ("tl" org-agenda-log-mode)
          ;; ("td" org-agenda-toggle-diary)
          ;; ;; Filter
          ;; ("fc" org-agenda-filter-by-category)
          ;; ("fx" org-agenda-filter-by-regexp)
          ;; ("ft" org-agenda-filter-by-tag)
          ;; ("fr" org-agenda-filter-by-tag-refine)
          ;; ("fh" org-agenda-filter-by-top-headline)
          ;; ("fd" org-agenda-filter-remove-all)
          ;; ;; Clock
          ;; ("cq" org-agenda-clock-cancel)
          ;; ("cj" org-agenda-clock-goto :exit t)
          ;; ("ci" org-agenda-clock-in :exit t)
          ;; ("co" org-agenda-clock-out)
          ;; ;; Other
          ;; ("q" nil :exit t)
          ;; ("gd" org-agenda-goto-date)
          ;; ("." org-agenda-goto-today)
          ;; ("gr" org-agenda-redo))
#+end_src

#+RESULTS:
: hydra:org/body

** Avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;;       ("c" avy-goto-char-timer)
  ;;       ("C" avy-goto-char)
  ;;       ("w" avy-goto-word-1)
  ;;       ("W" avy-goto-word-0)
  ;;       ("l" avy-goto-line)
  ;;       ("L" avy-goto-end-of-line)
  ;;       ("m" avy-move-line)
  ;;       ("M" avy-move-region)
  ;; ("k" avy-kill-whole-line)
  ;;       ("K" avy-kill-region)
  ;;       ("y" avy-copy-line)
  ;;       ("Y" avy-copy-region))

#+end_src

#+RESULTS:
: hydra:avy/body

** YasNippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; ("d" yas-load-directory)
  ;; ("e" yas-activate-extra-mode)
  ;; ("i" yas-insert-snippet)
  ;; ("f" yas-visit-snippet-file :color blue)
  ;; ("n" yas-new-snippet)
  ;; ("t" yas-tryout-snippet)
  ;; ("l" yas-describe-tables)
  ;; ("g" yas/global-mode)
  ;; ("m" yas/minor-mode)
  ;; ("a" yas-reload-all))
#+end_src

#+RESULTS:
: hydra:yasnippet/body
** Code folding
#+begin_src emacs-lisp :tangle yes
(general-def
  :prefix-map 'rc/origami-map
   "c" #'origami-close-node
   "n" #'origami-next-fold
   "p" #'origami-previous-fold
   "f" #'origami-forward-toggle-node
   "a" #'origami-toggle-all-nodes
   "s" #'origami-show-only-node
   )
(hercules-def
 :toggle-funs #'rc/origami-mode
 :keymap 'rc/origami-map
 :transient t)
(map!
:leader
:prefix "H"
:desc "Folding"
:nm "f" #'rc/origami-mode
)
#+end_src



* Hercules
#+begin_src emacs-lisp :tangle yes


(map!
 :leader
 :desc "Windows"
 :nm "w" #'rc/window-mode)

(hercules-def
 :toggle-funs #'rc/magit-map
 :keymap 'magit-mode-map
 :transient t)
(hercules-def
 :toggle-funs #'rc/buffer-mode
 :keymap 'doom-leader-buffer-map
:transient t)

(map!
 :leader
 :desc "Buffers"
 :nm "b" #'rc/buffer-mod)

#+end_src

#+end_src

* Dired Hercules
#+begin_src emacs-lisp :tangle yes
(general-def
  :prefix-map 'my-dired-map

  "\\" #'dired-do-ispell
  "(" #'dired-hide-details-mode
  ")" #'dired-omit-mode
  "+" #'dired-create-directory
  "=" #'diredp-ediff         ;; smart diff
  "?" #'dired-summary
  "$" #'diredp-hide-subdir-nomove
  "A" #'dired-do-find-regexp
  "C" #'dired-do-copy        ;; Copy all marked files
  "D" #'dired-do-delete
  "E" #'dired-mark-extension
  "e" #'dired-ediff-files
  "F" #'dired-do-find-marked-files
  "G" #'dired-do-chgrp
  "g" #'revert-buffer        ;; read all directories again (refresh)
  "i" #'dired-maybe-insert-subdir
  "l" #'dired-do-redisplay   ;; relist the marked or singel directory
  "M" #'dired-do-chmod
  "m" #'dired-mark
  "O" #'dired-display-file
  "o" #'dired-find-file-other-window
  "Q" #'dired-do-find-regexp-and-replace
  "R" #'dired-do-rename
  "r" #'dired-do-rsynch
  "S" #'dired-do-symlink
  "s" #'dired-sort-toggle-or-edit
  "t" #'dired-toggle-marks
  "U" #'dired-unmark-all-marks
  "u" #'dired-unmark
  "v" #'dired-view-file      ;; q to exit, s to search, = gets line #
  "w" #'dired-kill-subdir
  "Y" #'dired-do-relsymlink
  "z" #'diredp-compress-this-file
  "Z" #'dired-do-compress
  )

(hercules-def
 :toggle-funs #'my-dired-mode
 :keymap 'my-dired-map
 :transient t)

(map!
 :leader
 :desc "Hercules"
 :"H" 'nil)

(map!
 :leader
 :prefix "H"
 (:desc "Magit"
 :nm "m" #'rc/magit-map)
(:desc "Dired"
 :nm "d" #'my-dired-mode)
                )
#+end_src

#+RESULTS:

* mu4e
#+begin_src emacs-lisp :tangle yes
(after! mu4e

(delete 'mu4e evil-collection-mode-list)
(delete 'mu4e-conversation evil-collection-mode-list)

(use-package! mu4e

  :config
  (setq mu4e-mu-binary (executable-find "mu"))
  (setq mu4e-maildir "~/.maildir")
  (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
  (setq mu4e-update-interval 300)
  (setq mu4e-attachment-dir "~/Desktop")
  (setq mu4e-change-filenames-with-moving t)
  (setq mu4e-user-mail-address-list '("richardjcool@gmail.com"
                                      "rcool@netflix.com"))
  (setq mu4e-maildir-shortcuts
        '(("/gmail-personal/INBOX" :key ?p)
          ("/gmail-personal/[Gmail]/Sent Mail" :key ?P)
          ("/gmail-work/INBOX"  :key ?w)
          ("/gmail-work/[Gmail]/Sent Mail" :key ?W)
          ))

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Inbox - Personal Gmail"
                :query "maildir:/gmail-personal/INBOX"
                :key ?p))
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Inbox - Work Gmail"
                :query "maildir:/gmail-work/INBOX"
                :key ?w))

  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "gmail"
            :enter-func
            (lambda () (mu4e-message "Enter richardjcool@gmail.com context"))
            :leave-func
            (lambda () (mu4e-message "Leave richardjcool@gmail.com context"))
            :match-func
            (lambda (msg)
              (when msg
                mu4e-message-contact-field-matches msg
                :to "richardjcool@gmail.com")))
          :vars '(( user-mail-address . "richardjcool@gmail.com" )
                  (user-full-name "Richard Cool")
                  (mu4e-drafts-folder . "/gmail-personal/Drafts")
                  (mu4e-refile-folder . "/gmail-personal/Archive")
                  (mu4e-sent-folder . "/gmail-personal/Sent")
                  (mu4e-trash-folder . "/gmail-personal/Trash")))
        ,(make-mu4e-context
            :name "gmail-work"
            :enter-func
            (lambda () (mu4e-message "Enter rcool@netflix.com"))
            :leave-func
            (lambda () (mu4e-message "Leave rcool@netflix.com"))
            :match-func
            (lambda (msg)
              (when msg
                mu4e-message-contact-field-matches msg
                :to "rcool@netflix.com")))
          :vars '(( user-mail-address . "rcool@netflix.com" )
                  (user-full-name "Richard Cool")
                  (mu4e-drafts-folder . "/gmail-work/Drafts")
                  (mu4e-refile-folder . "/gmail-work/Archive")
                  (mu4e-sent-folder . "/gmail-work/Sent")
                  (mu4e-trash-folder . "/gmail-work/Trash")))


#+end_src

* mu4e send
#+begin_src emacs-lisp :tangle yes

(setq epa-pinentry-mode 'loopback)
(auth-source-forget-all-cached)

;; Don't keep message compose buffers around)
(setq message-kill-buffer-on-exit t)

;;send function
(setq send-mail-function 'sendmail-send-it
      message-send-mail-function 'sendmail-send-it)

;;send program;
;; this is external
(setq sendmail-program (executable-find "msmtp"))

;; Select the right sender email from context
(setq message-sendmail-evelope-from 'header)

;; choose from account before sending
;; this is a custom function
(defun rcool/set-msmtp-account ()
  (if (message-mail-p)
      (save-exursion
       (let*
           ((from (save-restriction
                    (message-narrow-to-headers)
                    (message-fetch-field "from")))
            (account
             (cond
              ((string-match "richardjcool@gmail.com" from) "gmail")
              ((string-match "rcool@netflix.com from" from) "gmail-work"))))
         (setq message-sendmail-extra-arguments (list '"-a" account))))))
(add-hook 'message-send-mail-hook 'rcool/set-msmtp-account)

;; mu4e cc & bcc
(add-hook 'mu4e-compose-mode-hook
          (defun rcool/add-cc-and-bcc ()
            "My function to automatically add cc and bcc headers. this is in the mu3e compose mode."
            (save-excursion (message-add-header "Cc:\n"))
            (save-excursion (message-add-header "Bcc:\n"))))

;; mu4e address completion
(add-hook 'mu4e-compose-mode-hook' 'company-mode')
#+end_src

* Set some sane defaults
#+begin_src emacs-lisp :tangle yes

;; store link to message if in header view
(setq org-mu4e-link-query-in-headers-mode nil )

;; dont have to confirm to quit
(setq mu4e-confirm-quit nil)

;; number of visible headers in h split view
(setq mu4e-headers-visible-lines 20 )

;; don't show threading by default
(setq mu4e-headers-show-threads nil)

            ;; hide annoying mu4e recieving messages
(setq mu4e-hide-index-messages t )

                ;;customize the replay quote string
(setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")

                ;; Mx find-function RET message-citation-line-format for docs:
(setq message-citation-line-function 'message-insert-formatted-citation-line )

;;By default do not show related emails
(setq mu4e-headers-include-related nil)


))



#+END_SRC
