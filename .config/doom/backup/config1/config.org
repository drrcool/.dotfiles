#+title Drrcool's Emacs#+auto_tangle: t* Dvorak-mode#+begin_src emacs-lisp :tangle yes(use-package! evil-dvorak  :config  (global-evil-mode 1)  :diminish evil-dvorak-mode)#+end_src* My Name#+begin_src emacs-lisp :tangle yes(setq user-full-name "Richard Cool"      user-mail-address "richardjcool@gmail.com")#+end_src* Adjust the window size#+begin_src emacs-lisp :tangle yes(add-to-list 'initial-frame-alist '(fullscreen . maximized))#+end_src#+RESULTS:: ((fullscreen . maximized) (top . 1) (left . 1) (width . 500) (height . 120))* Some mac mappings:#+begin_src emacs-lisp :tangle yes(cond (IS-MAC       (setq             mac-right-option-modifier  'alt             mac-option-modifier        'alt             mac-pass-control-to-system nil)))#+end_src* Some split preferences:#+begin_src emacs-lisp :tangle yes(setq-default window-combination-resize t)(setq evil-vsplit-window-right t      evil-split-window-below t)#+end_src** Changing the keybindings to open splitsThis didn't work as existing items are block it#+begin_src emacs-lisp :tangle yes;; (evil-define-key 'normal 'global (kbd "SPC s v") 'evil-window-vsplit);; (evil-define-key  'normal 'global (kbd "SPC s V") '+evil/window-vsplit-and-follow);; (evil-define-key  'normal 'global (kbd "SPC s s") 'evil-window-split;; (evil-define-key  'normal 'global (kbd "SPC s S") '+evil/window-split-and-follow);; (evil-define-key  'normal 'global (kbd "SPC s h") 'evil-window-left);; (evil-define-key  'normal 'global (kbd "SPC s H") '+evil/window-move-left);; (evil-define-key  'normal 'global (kbd "SPC s l") 'evil-window-right);; (evil-define-key  'normal 'global (kbd "SPC s K") '+evil/window-move-right);; (evil-define-key  'normal 'global (kbd "SPC s j") 'evil-window-down);; (evil-define-key  'normal 'global (kbd "SPC s J") '+evil/window-move-down);; (evil-define-key  'normal 'global (kbd "SPC s k") 'evil-window-up);; (evil-define-key  'normal 'global (kbd "SPC s K") '+evil/window-move-up)#+end_src#+RESULTS:* Delete to trash:#+begin_src emacs-lisp :tangle yes(setq-default delete-by-moving-to-trash t              trash-directory "~/.local/share/Trash/files/")#+end_src* FIle History increase#+begin_src emacs-lisp :tangle yes;; Increase undo history limits even more(after! undo-fu  ;; Emacs undo defaults  (setq undo-limit        10000000    ;; 1MB   (default is 160kB, Doom's default is 400kB)        undo-strong-limit 100000000   ;; 100MB (default is 240kB, Doom's default is 3MB)        undo-outer-limit  1000000000) ;; 1GB   (default is 24MB,  Doom's default is 48MB)#+end_src* Some customization**  Undo fu customization#+begin_src emacs-lisp :tangle yes  ;; Undo-fu customization options  (setq undo-fu-allow-undo-in-region t ;; Undoing with a selection will use undo within that region.        undo-fu-ignore-keyboard-quit t)) ;; Use the `undo-fu-disable-checkpoint' command instead of Ctrl-G `keyboard-quit' for non-linear behavior.#+end_src**  Undo settings for evil#+begin_src emacs-lisp :tangle yes;; Evil undo(after! evil  (setq evil-want-fine-undo t)) ;; By default while in insert all changes are one big blob#+end_src** Vundo -- an undo tree#+begin_src emacs-lisp :tangle yes(use-package! vundo  :defer t  :init  (defconst +vundo-unicode-symbols    '((selected-node   . ?‚óè)      (node            . ?‚óã)      (vertical-stem   . ?‚îÇ)      (branch          . ?‚îú)      (last-branch     . ?‚ï∞)      (horizontal-stem . ?‚îÄ)))  (map! :leader        (:prefix ("o")         :desc "vundo" "v" #'vundo))  :config  (setq vundo-glyph-alist +vundo-unicode-symbols        vundo-compact-display t        vundo-window-max-height 6))#+end_src** Change cursor on large glyphs and add line numbers#+begin_src emacs-lisp :tangle yes;; Stretch cursor to the glyph width(setq-default x-stretch-cursor t);; Enable relative line numbers(setq display-line-numbers-type 'relative)#+end_src**  Keep files in recent#+begin_src emacs-lisp :tangle yes(when (daemonp)  (add-hook! '(delete-frame-functions delete-terminal-functions)(let ((inhibit-message t))    (recentf-save-list)    (savehist-save))))#+end_src* Fonts#+begin_src emacs-lisp :tangle yes(setq doom-font (font-spec :family "PragmataPro Liga" :size 20)      doom-big-font (font-spec :family "PragmataPro Liga" :size 30)    doom-variable-pitch-font (font-spec :family "Fantasque Sans Mono" :size 20)    doom-unicode-font (font-spec :family "PragmataPro Mono Liga" :size 20)    doom-serif-font (font-spec :family "Rockwell" :size 20)    )(custom-set-faces!'(font-lock-comment-face :slant italic)'(font-lock-keyword-face :slant italic));; Themes:1 ends here#+end_src#+RESULTS:* Themes#+begin_src emacs-lisp :tangle yes(use-package! modus-themes:init(setq modus-themes-hl-line '(accented intense)    modus-themes-subtle-line-numbers t    modus-themes-region '(accented bg-only)  ;; accented    modus-themes-variable-pitch-ui t    modus-themes-fringes 'intense    modus-themes-diffs nil    modus-themes-italic-constructs t    modus-themes-bold-constructs t    modus-themes-intense-mouseovers t    modus-themes-paren-match '(bold intense)    modus-themes-syntax '(alt-syntax yellow-comments green-strings)    modus-themes-links '(neutral-underline background)    modus-themes-mode-line '(borderless padded accented)    modus-themes-tabs-accented nil ;; default    modus-themes-completions    '((matches . (extrabold intense accented))        (selection . (semibold accented intense))        (popup . (accented)))    modus-themes-headings '((1 . (rainbow 1.4))                            (2 . (rainbow 1.3))                            (3 . (rainbow 1.2))                            (4 . (rainbow bold 1.1))                            (t . (rainbow bold)))    modus-themes-org-blocks 'tinted-background    modus-themes-org-agenda    '((header-block . (semibold 1.4))        (header-date . (workaholic bold-today 1.2))        (event . (accented italic varied))        (scheduled . rainbow)        (habit . traffic-light))    modus-themes-markup '(intense background)    modus-themes-mail-citations 'intense    modus-themes-lang-checkers '(background))):config(modus-themes-load-vivendi)(map! :leader    :prefix "t" ;; toggle    :desc "Toggle Modus theme" "m" #'modus-themes-toggle)#+end_src#+RESULTS:: t#+RESULT* modelline#+begin_src emacs-lisp :tangle yes(after! doom-modeline(setq display-time-string-forms    '((propertize (concat " üïò " 24-hours ":" minutes))))(display-time-mode 1) ; Enable time in the mode-line;; Add padding to the right(doom-modeline-def-modeline 'main'(bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)'(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker "   ")))(after! doom-modeline(let ((battery-str (battery)))(unless (or (equal "Battery status not available" battery-str)            (string-match-p (regexp-quote "unknown") battery-str)            (string-match-p (regexp-quote "N/A") battery-str))    (display-battery-mode 1))))(after! doom-modeline(setq doom-modeline-bar-width 4    doom-modeline-major-mode-icon t    doom-modeline-major-mode-color-icon t    doom-modeline-buffer-file-name-style 'truncate-upto-project));; NOTE: Not tangled(set-frame-parameter (selected-frame) 'alpha '(95 100))(add-to-list 'default-frame-alist '(alpha 97 100))#+end_src* Dashboard#+begin_src emacs-lisp :tangle yes(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)(add-hook! '+doom-dashboard-mode-hook (hl-line-mode -1))(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))#+end_src* Which Key#+begin_src emacs-lisp :tangle yes#+end_src* Window title#+begin_src emacs-lisp :tangle yes :result none(setq frame-title-format    '(""    (:eval        (if (s-contains-p org-roam-directory (or buffer-file-name ""))            (replace-regexp-in-string ".*/[0-9]*-?" "‚ò∞ "                                    (subst-char-in-string ?_ ?\s buffer-file-name))        "%b"))    (:eval        (when-let* ((project-name (projectile-project-name))                    (project-name (if (string= "-" project-name)                                    (ignore-errors (file-name-base (string-trim-right (vc-root-dir))))                                    project-name)))        (format (if (buffer-modified-p) " ‚óã %s" " ‚óè %s") project-name)))))#+end_src* Add focus mode#+begin_src emacs-lisp :tangle yes(use-package! focus:commands focus-mode):#+end_src* Tweak scrolls#+begin_src emacs-lisp :tangle yes(use-package! good-scroll:unless EMACS29+:config (good-scroll-mode 1))(when EMACS29+(pixel-scroll-precision-mode 1))(setq hscroll-step 1    hscroll-margin 0    scroll-step 1    scroll-margin 0    scroll-conservatively 101    scroll-up-aggressively 0.01    scroll-down-aggressively 0.01    scroll-preserve-screen-position 'always    auto-window-vscroll nil    fast-but-imprecise-scrolling nil)#+end_src* Tweak icons#+begin_src emacs-lisp :tangle yes(after! all-the-icons(setcdr (assoc "m" all-the-icons-extension-icon-alist)          (cdr (assoc "matlab" all-the-icons-extension-icon-alist))))#+end_src* Zen#+begin_src emacs-lisp :tangle yes(after! writeroom-mode;; Show mode line(setq writeroom-mode-line t);; Disable line numbers(add-hook! 'writeroom-mode-enable-hook(when (bound-and-true-p display-line-numbers-mode)    (setq-local +line-num--was-activate-p display-line-numbers-type)    (display-line-numbers-mode -1)))(add-hook! 'writeroom-mode-disable-hook(when (bound-and-true-p +line-num--was-activate-p)    (display-line-numbers-mode +line-num--was-activate-p)))(after! org;; Increase latex previews scale in Zen mode(add-hook! 'writeroom-mode-enable-hook (+org-format-latex-set-scale 2.0))(add-hook! 'writeroom-mode-disable-hook (+org-format-latex-set-scale 1.4)))(after! blamer;; Disable blamer in zen (writeroom) mode(add-hook! 'writeroom-mode-enable-hook    (when (bound-and-true-p blamer-mode)    (setq +blamer-mode--was-active-p t)    (blamer-mode -1)))(add-hook! 'writeroom-mode-disable-hook    (when (bound-and-true-p +blamer-mode--was-active-p)    (blamer-mode 1)))))#+end_src* Highlight indent guides#+begin_src emacs-lisp :tangle yes(after! highlight-indent-guides(setq highlight-indent-guides-character ?‚îÇ    highlight-indent-guides-responsive 'top))#+end_src* Make some templates#+begin_src emacs-lisp :tangle yes(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)(set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)#+end_src* Evil tweaks#+begin_src emacs-lisp :tangle yes(after! evil;; This fixes https://github.com/doomemacs/doomemacs/issues/6478;; Ref: https://github.com/emacs-evil/evil/issues/1630(evil-select-search-module 'evil-search-module 'isearch)(setq evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring#+end_src* Aggressive Indent#+begin_src emacs-lisp :tangle yes(use-package! aggressive-indent:commands (aggressive-indent-mode))#+end_src* Yasssss#+begin_src emacs-lisp :tangle yes(setq yas-triggers-in-field t)#+end_src* Turn off company in some modes#+begin_src emacs-lisp :tangle yes(setq company-global-modes'(not erc-mode             circe-mode             help-mode             gud-mode             vterm-mode             org-mode             ))#+end_src#+RESULTS:* company tweaks#+begin_src emacs-lisp :tangle yes(after! company-box  (defun +company-box--reload-icons-h ()    (setq company-box-icons-all-the-icons          (let ((all-the-icons-scale-factor 0.8))            `((Unknown       . ,(all-the-icons-faicon   "code"                 :face 'all-the-icons-purple))              (Text          . ,(all-the-icons-material "text_fields"          :face 'all-the-icons-green))              (Method        . ,(all-the-icons-faicon   "cube"                 :face 'all-the-icons-red))              (Function      . ,(all-the-icons-faicon   "cube"                 :face 'all-the-icons-blue))              (Constructor   . ,(all-the-icons-faicon   "cube"                 :face 'all-the-icons-blue-alt))              (Field         . ,(all-the-icons-faicon   "tag"                  :face 'all-the-icons-red))              (Variable      . ,(all-the-icons-material "adjust"               :face 'all-the-icons-blue))              (Class         . ,(all-the-icons-material "class"                :face 'all-the-icons-red))              (Interface     . ,(all-the-icons-material "tune"                 :face 'all-the-icons-red))              (Module        . ,(all-the-icons-faicon   "cubes"                :face 'all-the-icons-red))              (Property      . ,(all-the-icons-faicon   "wrench"               :face 'all-the-icons-red))              (Unit          . ,(all-the-icons-material "straighten"           :face 'all-the-icons-red))              (Value         . ,(all-the-icons-material "filter_1"             :face 'all-the-icons-red))              (Enum          . ,(all-the-icons-material "plus_one"             :face 'all-the-icons-red))              (Keyword       . ,(all-the-icons-material "filter_center_focus"  :face 'all-the-icons-red-alt))              (Snippet       . ,(all-the-icons-faicon   "expand"               :face 'all-the-icons-red))              (Color         . ,(all-the-icons-material "colorize"             :face 'all-the-icons-red))              (File          . ,(all-the-icons-material "insert_drive_file"    :face 'all-the-icons-red))              (Reference     . ,(all-the-icons-material "collections_bookmark" :face 'all-the-icons-red))              (Folder        . ,(all-the-icons-material "folder"               :face 'all-the-icons-red-alt))              (EnumMember    . ,(all-the-icons-material "people"               :face 'all-the-icons-red))              (Constant      . ,(all-the-icons-material "pause_circle_filled"  :face 'all-the-icons-red))              (Struct        . ,(all-the-icons-material "list"                 :face 'all-the-icons-red))              (Event         . ,(all-the-icons-material "event"                :face 'all-the-icons-red))              (Operator      . ,(all-the-icons-material "control_point"        :face 'all-the-icons-red))              (TypeParameter . ,(all-the-icons-material "class"                :face 'all-the-icons-red))              (Template      . ,(all-the-icons-material "settings_ethernet"    :face 'all-the-icons-green))              (ElispFunction . ,(all-the-icons-faicon   "cube"                 :face 'all-the-icons-blue))              (ElispVariable . ,(all-the-icons-material "adjust"               :face 'all-the-icons-blue))              (ElispFeature  . ,(all-the-icons-material "stars"                :face 'all-the-icons-orange))              (ElispFace     . ,(all-the-icons-material "format_paint"         :face 'all-the-icons-pink))))))  )#+end_src#+RESULTS:: +company-box--reload-icons-h* Treemacs#+begin_src emacs-lisp :tangle yes(after! treemacs  (require 'dired)  ;; My custom stuff (from tecosaur's config)  (setq +treemacs-file-ignore-extensions        '(;; LaTeX          "aux" "ptc" "fdb_latexmk" "fls" "synctex.gz" "toc"          ;; LaTeX - bibliography          "bbl"          ;; LaTeX - glossary          "glg" "glo" "gls" "glsdefs" "ist" "acn" "acr" "alg"          ;; LaTeX - pgfplots          "mw"          ;; LaTeX - pdfx          "pdfa.xmpi"          ;; Python          "pyc"))  (setq +treemacs-file-ignore-globs        '(;; LaTeX          "*/_minted-*"          ;; AucTeX          "*/.auctex-auto"          "*/_region_.log"          "*/_region_.tex"          ;; Python          "*/__pycache__"))  ;; Reload treemacs theme  (setq doom-themes-treemacs-enable-variable-pitch nil        doom-themes-treemacs-theme "doom-colors")  (doom-themes-treemacs-config)  (setq treemacs-show-hidden-files nil        treemacs-hide-dot-git-directory t        treemacs-width 30)  (defvar +treemacs-file-ignore-extensions '()    "File extension which `treemacs-ignore-filter' will ensure are ignored")  (defvar +treemacs-file-ignore-globs '()    "Globs which will are transformed to `+treemacs-file-ignore-regexps' which `+treemacs-ignore-filter' will ensure are ignored")  (defvar +treemacs-file-ignore-regexps '()    "RegExps to be tested to ignore files, generated from `+treeemacs-file-ignore-globs'")  (defun +treemacs-file-ignore-generate-regexps ()    "Generate `+treemacs-file-ignore-regexps' from `+treemacs-file-ignore-globs'"    (setq +treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp +treemacs-file-ignore-globs)))  (unless (equal +treemacs-file-ignore-globs '())    (+treemacs-file-ignore-generate-regexps))  (defun +treemacs-ignore-filter (file full-path)    "Ignore files specified by `+treemacs-file-ignore-extensions', and `+treemacs-file-ignore-regexps'"    (or (member (file-name-extension file) +treemacs-file-ignore-extensions)        (let ((ignore-file nil))          (dolist (regexp +treemacs-file-ignore-regexps ignore-file)            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))  (add-to-list 'treemacs-ignored-file-predicates #'+treemacs-ignore-filter))#+end_src#+RESULTS:* Use Eros to make the output cuter#+begin_src emacs-lisp :tangle yes(setq eros-eval-result-prefix "‚üπ ")#+end_src* Dir Locals#+begin_src emacs-lisp :tangle yes(map! :leader      (:when (modulep! :ui workspaces)       :prefix ("TAB" . "workspace")       :desc "Display tab bar"           "TAB" #'+workspace/display       :desc "Switch workspace"          "."   #'+workspace/switch-to       :desc "Switch to last workspace"  "$"   #'+workspace/other ;; Modified       :desc "New workspace"             "n"   #'+workspace/new       :desc "New named workspace"       "N"   #'+workspace/new-named       :desc "Load workspace from file"  "l"   #'+workspace/load       :desc "Save workspace to file"    "s"   #'+workspace/save       :desc "Delete session"            "x"   #'+workspace/kill-session       :desc "Delete this workspace"     "d"   #'+workspace/delete       :desc "Rename workspace"          "r"   #'+workspace/rename       :desc "Restore last session"      "R"   #'+workspace/restore-last-session       :desc "Next workspace"            ">"   #'+workspace/switch-right ;; Modified       :desc "Previous workspace"        "<"   #'+workspace/switch-left ;; Modified       :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0       :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1       :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2       :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3       :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4       :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5       :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6       :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7       :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8       :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))#+end_src* TLDR#+begin_src emacs-lisp :tangle yes(use-package! tldr  :commands (tldr-update-docs tldr)  :init  (setq tldr-enabled-categories '("common" "linux" "osx" "sunos")))#+end_src#+RESULTS:| common | linux | osx | sunos |* FZF#+begin_src emacs-lisp :tangle yes(after! evil  (evil-define-key 'insert fzf-mode-map (kbd "ESC") #'term-kill-subjob))(define-minor-mode fzf-mode  "Minor mode for the FZF buffer"  :init-value nil  :lighter " FZF"  :keymap '(("C-c" . term-kill-subjob)))(defadvice! doom-fzf--override-start-args-a (original-fn &rest args)  "Set the FZF minor mode with the fzf buffer."  :around #'fzf/start  (message "called with args %S" args)  (apply original-fn args)  ;; set the FZF buffer to fzf-mode so we can hook ctrl+c  (set-buffer "*fzf*")  (fzf-mode))(defvar fzf/args  "-x --print-query -m --tiebreak=index --expect=ctrl-v,ctrl-x,ctrl-t")(use-package! fzf  :commands (fzf fzf-projectile fzf-hg fzf-git fzf-git-files fzf-directory fzf-git-grep))#+end_src#+RESULTS:* Magit#+begin_src emacs-lisp :tangle yes(after! code-review  (setq code-review-auth-login-marker 'forge))(after! magit  ;; Disable if it causes performance issues  (setq magit-diff-refine-hunk t))(use-package! magit-pretty-graph  :after magit  :init  (setq magit-pg-command        (concat "git --no-pager log"                " --topo-order --decorate=full"                " --pretty=format:\"%H%x00%P%x00%an%x00%ar%x00%s%x00%d\""                " -n 2000")) ;; Increase the default 100 limit  (map! :localleader        :map (magit-mode-map)        :desc "Magit pretty graph" "p" (cmd! (magit-pg-repo (magit-toplevel)))))#+end_src#+RESULTS:: magit-pretty-graph* Org Mode#+begin_src emacs-lisp :tangle yes(after! org(setq org-directory "~/org/" ; let's put files here      org-use-property-inheritance t ; it's convenient to have properties inherited      org-log-done 'time             ; having the time an item is done sounds convenient      org-list-allow-alphabetical t  ; have a. A. a) A) list bullets      org-export-in-background nil   ; run export processes in external emacs process      org-export-async-debug t      org-tags-column 0      org-catch-invisible-edits 'smart ;; try not to accidently do weird stuff in invisible regions      org-export-with-sub-superscripts '{} ;; don't treat lone _ / ^ as sub/superscripts, require _{} / ^{}      org-pretty-entities-include-sub-superscripts nil      org-auto-align-tags nil      org-special-ctrl-a/e t      org-startup-indented t ;; Enable 'org-indent-mode' by default, override with '+#startup: noindent' for big files      org-insert-heading-respect-content t)                (setq org-babel-default-header-args      '((:session  . "none")        (:results  . "replace")        (:exports  . "code")        (:cache    . "no")        (:noweb    . "no")        (:hlines   . "no")        (:tangle   . "no")        (:comments . "link")))(map! :map evil-org-mode-map      :after evil-org      :n "g <up>" #'org-backward-heading-same-level      :n "g <down>" #'org-forward-heading-same-level      :n "g <left>" #'org-up-element      :n "g <right>" #'org-down-element))#+end_src*** TO DO tweaks#+begin_src emacs-lisp :tangle yes    (after! org(setq org-todo-keywords      '((sequence "IDEA(i)" "TODO(t)" "NEXT(n)" "PROJ(p)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")        (sequence "[ ](T)" "[-](S)" "|" "[X](D)")        (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))(setq org-todo-keyword-faces      '(("IDEA" . (:foreground "goldenrod" :weight bold))        ("NEXT" . (:foreground "IndianRed1" :weight bold))        ("STRT" . (:foreground "OrangeRed" :weight bold))        ("WAIT" . (:foreground "coral" :weight bold))        ("KILL" . (:foreground "DarkGreen" :weight bold))        ("PROJ" . (:foreground "LimeGreen" :weight bold))        ("HOLD" . (:foreground "orange" :weight bold))))(defun +log-todo-next-creation-date (&rest ignore)  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"  (when (and (string= (org-get-todo-state) "NEXT")             (not (org-entry-get nil "ACTIVATED")))    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))(add-hook 'org-after-todo-state-change-hook #'+log-todo-next-creation-date)  )#+end_src#+RESULTS:| +log-todo-next-creation-date |*** Org keywords#+begin_src emacs-lisp :tangle yes(setq org-tag-persistent-alist      '((:startgroup . nil)        ("home"      . ?h)        ("research"  . ?r)        ("work"      . ?w)        (:endgroup   . nil)        (:startgroup . nil)        ("tool"      . ?o)        ("dev"       . ?d)        ("report"    . ?p)        (:endgroup   . nil)        (:startgroup . nil)        ("easy"      . ?e)        ("medium"    . ?m)        ("hard"      . ?a)        (:endgroup   . nil)        ("urgent"    . ?u)        ("key"       . ?k)        ("bonus"     . ?b)        ("ignore"    . ?i)        ("noexport"  . ?x)))#+end_src*** Some colors#+begin_src emacs-lisp :tangle yes(setq org-tag-faces      '(("home"     . (:foreground "goldenrod"  :weight bold))        ("research" . (:foreground "goldenrod"  :weight bold))        ("work"     . (:foreground "goldenrod"  :weight bold))        ("tool"     . (:foreground "IndianRed1" :weight bold))        ("dev"      . (:foreground "IndianRed1" :weight bold))        ("report"   . (:foreground "IndianRed1" :weight bold))        ("urgent"   . (:foreground "red"        :weight bold))        ("key"      . (:foreground "red"        :weight bold))        ("easy"     . (:foreground "green4"     :weight bold))        ("medium"   . (:foreground "orange"     :weight bold))        ("hard"     . (:foreground "red"        :weight bold))        ("bonus"    . (:foreground "goldenrod"  :weight bold))        ("ignore"   . (:foreground "Gray"       :weight bold))        ("noexport" . (:foreground "LimeGreen"  :weight bold))))#+end_src*** Org Agenda#+begin_src emacs-lisp :tangle yes(after! org(setq org-agenda-files      (list (expand-file-name "inbox.org" org-directory)            (expand-file-name "agenda.org" org-directory)            (expand-file-name "gcal-agenda.org" org-directory)            (expand-file-name "notes.org" org-directory)            (expand-file-name "projects.org" org-directory)            (expand-file-name "archive.org" org-directory)));; Agenda styling(setq org-agenda-block-separator ?‚îÄ      org-agenda-time-grid      '((daily today require-timed)        (800 1000 1200 1400 1600 1800 2000)        " ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ " "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ")      org-agenda-current-time-string      "‚≠† now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))#+end_src#+RESULTS:: ‚≠† now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*** Org super agenda#+begin_src emacs-lisp :tangle yes(after! org(use-package! org-super-agenda  :defer t  :config  (org-super-agenda-mode)  :init  (setq org-agenda-skip-scheduled-if-done t        org-agenda-skip-deadline-if-done t        org-agenda-include-deadlines t        org-agenda-block-separator nil        org-agenda-tags-column 100 ;; from testing this seems to be a good value        org-agenda-compact-blocks t)  (setq org-agenda-custom-commands        '(("o" "Overview"           ((agenda "" ((org-agenda-span 'day)                        (org-super-agenda-groups                         '((:name "Today"                            :time-grid t                            :date today                            :todo "TODAY"                            :scheduled today                            :order 1)))))            (alltodo "" ((org-agenda-overriding-header "")                         (org-super-agenda-groups                          '((:name "Next to do" :todo "NEXT" :order 1)                            (:name "Important" :tag "Important" :priority "A" :order 6)                            (:name "Due Today" :deadline today :order 2)                            (:name "Due Soon" :deadline future :order 8)                            (:name "Overdue" :deadline past :face error :order 7)                            (:name "Assignments" :tag "Assignment" :order 10)                            (:name "Issues" :tag "Issue" :order 12)                            (:name "Emacs" :tag "Emacs" :order 13)                            (:name "Projects" :tag "Project" :order 14)                            (:name "Research" :tag "Research" :order 15)                            (:name "To read" :tag "Read" :order 30)                            (:name "Waiting" :todo "WAIT" :order 20)                            (:name "University" :tag "Univ" :order 32)                            (:name "Trivial" :priority<= "E" :tag ("Trivial" "Unimportant") :todo ("SOMEDAY") :order 90)                            (:discard (:tag ("Chore" "Routine" "Daily")))))))))))))#+end_src#+RESULTS:*** C*** Wild Notifier#+begin_src emacs-lisp :tangle yes(use-package! org-wild-notifier  :hook (org-load . org-wild-notifier-mode)  :config  (setq org-wild-notifier-alert-time '(60 30)))#+end_src*** Org menu#+begin_src emacs-lisp :tangle yes(use-package! org-menu  :commands (org-menu)  :init  (map! :localleader        :map org-mode-map        :desc "Org menu" "M" #'org-menu))#+end_src*** Setup org-modern and correct for ligature overlap#+begin_src emacs-lisp :tangle yes(use-package! org-modern  :hook (org-mode . org-modern-mode)  :config  (setq org-modern-star '("‚óâ" "‚óã" "‚óà" "‚óá" "‚ú≥" "‚óÜ" "‚ú∏" "‚ñ∂")        org-modern-table-vertical 2        org-modern-table-horizontal 4        org-modern-list '((43 . "‚û§") (45 . "‚Äì") (42 . "‚Ä¢"))        org-modern-footnote (cons nil (cadr org-script-display))        org-modern-priority t        org-modern-block t        org-modern-block-fringe nil        org-modern-horizontal-rule t        org-modern-keyword        '((t                     . t)          ("title"               . "ùôè")          ("subtitle"            . "ùô©")          ("author"              . "ùòº")          ("email"               . "@")          ("date"                . "ùòø")          ("lastmod"             . "‚úé")          ("property"            . "‚ò∏")          ("options"             . "‚å•")          ("startup"             . "‚èª")          ("macro"               . "ùìú")          ("bind"                . #("ÓÖó" 0 1 (display (raise -0.1))))          ("bibliography"        . "ÔêÖ")          ("print_bibliography"  . #("Óïã" 0 1 (display (raise -0.1))))          ("cite_export"         . "ÔêÖ‚Æ≠")          ("print_glossary"      . #("Óïã·¥¨·∂ª" 0 1 (display (raise -0.1))))          ("glossary_sources"    . #("ÓÅì" 0 1 (display (raise -0.14))))          ("export_file_name"    . "‚áí")          ("include"             . "‚á§")          ("setupfile"           . "‚áê")          ("html_head"           . "üÖ∑")          ("html"                . "üÖó")          ("latex_class"         . "üÑª")          ("latex_class_options" . #("üÑªÓ¢∏" 1 2 (display (raise -0.14))))          ("latex_header"        . "üÖª")          ("latex_header_extra"  . "üÖª‚Å∫")          ("latex"               . "üÖõ")          ("beamer_theme"        . "üÑ±")          ("beamer_color_theme"  . #("üÑ±Óêä" 1 2 (display (raise -0.12))))          ("beamer_font_theme"   . "üÑ±ùêÄ")          ("beamer_header"       . "üÖ±")          ("beamer"              . "üÖë")          ("attr_latex"          . "üÑõ")          ("attr_html"           . "üÑó")          ("attr_org"            . "‚í™")          ("name"                . "‚Åç")          ("header"              . "‚Ä∫")          ("caption"             . "‚ò∞")          ("RESULTS"             . "ü†∂")          ("language"            . "ùôá")          ("hugo_base_dir"       . "ùêá")          ("latex_compiler"      . "‚üæ")          ("results"             . "ü†∂")          ("filetags"            . "#")          ("created"             . "‚è±")          ("export_select_tags"  . "‚úî")          ("export_exclude_tags" . "‚ùå")))  ;; Change faces  (custom-set-faces! '(org-modern-tag :inherit (region org-modern-label)))  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))(when (modulep! :ui ligatures)  (defadvice! +org-init-appearance-h--no-ligatures-a ()    :after #'+org-init-appearance-h    (set-ligatures! 'org-mode                    :name nil                    :src_block nil                    :src_block_end nil                    :quote nil                    :quote_end nil)))#+end_src*** Setup an org outline#+begin_src emacs-lisp :tangle yes(use-package! org-ol-tree  :commands org-ol-tree  :config  (setq org-ol-tree-ui-icon-set        (if (and (display-graphic-p)                 (fboundp 'all-the-icons-material))            'all-the-icons          'unicode))  (org-ol-tree-ui--update-icon-set))(map! :localleader      :map org-mode-map      :desc "Outline" "O" #'org-ol-tree)#+end_src#+RESULTS:*** Change bullet points#+begin_src emacs-lisp :tangle yes(setq org-list-demote-modify-bullet      '(("+"  . "-")        ("-"  . "+")        ("*"  . "+")        ("1." . "a.")))#+end_src*** Org Styling#+begin_src emacs-lisp :tangle yes;; Org styling, hide markup etc.(setq org-hide-emphasis-markers t      org-pretty-entities t      org-ellipsis " ‚Ü©"      org-hide-leading-stars t)      ;; org-priority-highest ?A      ;; org-priority-lowest ?E      ;; org-priority-faces      ;; '((?A . 'all-the-icons-red)      ;;   (?B . 'all-the-icons-orange)      ;;   (?C . 'all-the-icons-yellow)      ;;   (?D . 'all-the-icons-green)      ;;   (?E . 'all-the-icons-blue)))#+end_src* Rainbow Mode#+begin_src emacs-lisp :tangle yes(define-globalized-minor-mode global-rainbow-mode rainbow-mode  (lambda ()    (when (not (memq major-mode                (list 'org-agenda-mode)))     (rainbow-mode 1))))(global-rainbow-mode 1 )#+end_src#+RESULTS:: t* Copilot#+begin_src emacs-lisp :tangle yes;; accept completion from copilot and fallback to company(use-package! copilot  :hook (prog-mode . copilot-mode)  :bind (("C-TAB" . 'copilot-accept-completion-by-word)         ("C-<tab>" . 'copilot-accept-completion-by-word)         :map copilot-completion-map         ("<tab>" . 'copilot-accept-completion)         ("TAB" . 'copilot-accept-completion)))#+end_src#+RESULTS:* Capture#+begin_src emacs-lisp :tangle yes(setq +org-capture-emails-file (expand-file-name "inbox.org" org-directory)      +org-capture-todo-file (expand-file-name "inbox.org" org-directory)      +org-capture-projects-file (expand-file-name "projects.org" org-directory))#+end_src#+RESULTS:: /Users/rcool2/org/projects.org#+begin_src emacs-lisp :tangle yes(after! org-capture:  <<prettify-capture>>  (defun +doct-icon-declaration-to-icon (declaration)    "Convert :icon declaration to icon"    (let ((name (pop declaration))          (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))          (face (intern (concat "all-the-icons-" (plist-get declaration :color))))          (v-adjust (or (plist-get declaration :v-adjust) 0.01)))      (apply set `(,name :face ,face :v-adjust ,v-adjust))))  (defun +doct-iconify-capture-templates (groups)    "Add declaration's :icon to each template group in GROUPS."    (let ((templates (doct-flatten-lists-in groups)))      (setq doct-templates            (mapcar (lambda (template)                      (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))                                  (spec (plist-get (plist-get props :doct) :icon)))                        (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)                                                       "\t"                                                       (nth 1 template))))                      template)                    templates))))  (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))  (defun set-org-capture-templates ()    (setq org-capture-templates          (doct `(("Personal todo" :keys "t"                   :icon ("checklist" :set "octicon" :color "green")                   :file +org-capture-todo-file                   :prepend t                   :headline "Inbox"                   :type entry                   :template ("* TODO %?"                              "%i %a"))                  ("Personal note" :keys "n"                   :icon ("sticky-note-o" :set "faicon" :color "green")                   :file +org-capture-todo-file                   :prepend t                   :headline "Inbox"                   :type entry                   :template ("* %?"                              "%i %a"))                  ("Email" :keys "e"                   :icon ("envelope" :set "faicon" :color "blue")                   :file +org-capture-todo-file                   :prepend t                   :headline "Inbox"                   :type entry                   :template ("* TODO %^{type|reply to|contact} %\\3 %? ‚úâÔ∏è"                              "Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}"                              "about %^{topic}"                              "%U %i %a"))                  ("Interesting" :keys "i"                   :icon ("eye" :set "faicon" :color "lcyan")                   :file +org-capture-todo-file                   :prepend t                   :headline "Interesting"                   :type entry                   :template ("* [ ] %{desc}%? :%{i-type}:"                              "%i %a")                   :children (("Webpage" :keys "w"                               :icon ("globe" :set "faicon" :color "green")                               :desc "%(org-cliplink-capture) "                               :i-type "read:web")                              ("Article" :keys "a"                               :icon ("file-text" :set "octicon" :color "yellow")                               :desc ""                               :i-type "read:reaserch")                              ("Information" :keys "i"                               :icon ("info-circle" :set "faicon" :color "blue")                               :desc ""                               :i-type "read:info")                              ("Idea" :keys "I"                               :icon ("bubble_chart" :set "material" :color "silver")                               :desc ""                               :i-type "idea")))                  ("Tasks" :keys "k"                   :icon ("inbox" :set "octicon" :color "yellow")                   :file +org-capture-todo-file                   :prepend t                   :headline "Tasks"                   :type entry                   :template ("* TODO %? %^G%{extra}"                              "%i %a")                   :children (("General Task" :keys "k"                               :icon ("inbox" :set "octicon" :color "yellow")                               :extra "")                              ("Task with deadline" :keys "d"                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)                               :extra "\nDEADLINE: %^{Deadline:}t")                              ("Scheduled Task" :keys "s"                               :icon ("calendar" :set "octicon" :color "orange")                               :extra "\nSCHEDULED: %^{Start time:}t")))                  ("Project" :keys "p"                   :icon ("repo" :set "octicon" :color "silver")                   :prepend t                   :type entry                   :headline "Inbox"                   :template ("* %{time-or-todo} %?"                              "%i"                              "%a")                   :file ""                   :custom (:time-or-todo "")                   :children (("Project-local todo" :keys "t"                               :icon ("checklist" :set "octicon" :color "green")                               :time-or-todo "TODO"                               :file +org-capture-project-todo-file)                              ("Project-local note" :keys "n"                               :icon ("sticky-note" :set "faicon" :color "yellow")                               :time-or-todo "%U"                               :file +org-capture-project-notes-file)                              ("Project-local changelog" :keys "c"                               :icon ("list" :set "faicon" :color "blue")                               :time-or-todo "%U"                               :heading "Unreleased"                               :file +org-capture-project-changelog-file)))                  ("\tCentralised project templates"                   :keys "o"                   :type entry                   :prepend t                   :template ("* %{time-or-todo} %?"                              "%i"                              "%a")                   :children (("Project todo"                               :keys "t"                               :prepend nil                               :time-or-todo "TODO"                               :heading "Tasks"                               :file +org-capture-central-project-todo-file)                              ("Project note"                               :keys "n"                               :time-or-todo "%U"                               :heading "Notes"                               :file +org-capture-central-project-notes-file)                              ("Project changelog"                               :keys "c"                               :time-or-todo "%U"                               :heading "Unreleased"                               :file +org-capture-central-project-changelog-file)))))))  (set-org-capture-templates)  (unless (display-graphic-p)    (add-hook 'server-after-make-frame-hook              (defun org-capture-reinitialise-hook ()                (when (display-graphic-p)                  (set-org-capture-templates)                  (remove-hook 'server-after-make-frame-hook                               #'org-capture-reinitialise-hook))))))                (defun org-capture-select-template-prettier (&optional keys)  "Select a capture template, in a prettier way than defaultLisp programs can force the template by setting KEYS to a string."  (let ((org-capture-templates         (or (org-contextualize-keys              (org-capture-upgrade-templates org-capture-templates)              org-capture-templates-contexts)             '(("t" "Task" entry (file+headline "" "Tasks")                "* TODO %?\n  %u\n  %a")))))    (if keys        (or (assoc keys org-capture-templates)            (error "No capture template referred to by \"%s\" keys" keys))      (org-mks org-capture-templates               "Select a capture template\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"               "Template key: "               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)(defun org-mks-pretty (table title &optional prompt specials)  "Select a member of an alist with multiple keys. Prettified.TABLE is the alist which should contain entries where the car is a string.There should be two types of entries.1. prefix descriptions like (\"a\" \"Description\")   This indicates that `a' is a prefix key for multi-letter selection, and   that there are entries following with keys like \"ab\", \"ax\"‚Ä¶2. Select-able members must have more than two elements, with the first   being the string of keys that lead to selecting it, and the second a   short description string of the item.The command will then make a temporary buffer listing all entriesthat can be selected with a single key, and all the single keyprefixes.  When you press the key for a single-letter entry, it is selected.When you press a prefix key, the commands (and maybe further prefixes)under this key will be shown and offered for selection.TITLE will be placed over the selection in the temporary buffer,PROMPT will be used when prompting for a key.  SPECIALS is analist with (\"key\" \"description\") entries.  When one of theseis selected, only the bare key is returned."  (save-window-excursion    (let ((inhibit-quit t)          (buffer (org-switch-to-buffer-other-window "*Org Select*"))          (prompt (or prompt "Select: "))          case-fold-search          current)      (unwind-protect          (catch 'exit            (while t              (setq-local evil-normal-state-cursor (list nil))              (erase-buffer)              (insert title "\n\n")              (let ((des-keys nil)                    (allowed-keys '("\C-g"))                    (tab-alternatives '("\s" "\t" "\r"))                    (cursor-type nil))                ;; Populate allowed keys and descriptions keys                ;; available with CURRENT selector.                (let ((re (format "\\`%s\\(.\\)\\'"                                  (if current (regexp-quote current) "")))                      (prefix (if current (concat current " ") "")))                  (dolist (entry table)                    (pcase entry                      ;; Description.                      (`(,(and key (pred (string-match re))) ,desc)                       (let ((k (match-string 1 key)))                         (push k des-keys)                         ;; Keys ending in tab, space or RET are equivalent.                         (if (member k tab-alternatives)                             (push "\t" allowed-keys)                           (push k allowed-keys))                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "‚Ä∫" 'face 'font-lock-comment-face) "  " desc "‚Ä¶" "\n")))                      ;; Usable entry.                      (`(,(and key (pred (string-match re))) ,desc . ,_)                       (let ((k (match-string 1 key)))                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")                         (push k allowed-keys)))                      (_ nil))))                ;; Insert special entries, if any.                (when specials                  (insert "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")                  (pcase-dolist (`(,key ,description) specials)                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))                    (push key allowed-keys)))                ;; Display UI and let user select an entry or                ;; a sublevel prefix.                (goto-char (point-min))                (unless (pos-visible-in-window-p (point-max))                  (org-fit-window-to-buffer))                (let ((pressed (org--mks-read-key allowed-keys                                                  prompt                                                  (not (pos-visible-in-window-p (1- (point-max)))))))                  (setq current (concat current pressed))                  (cond                   ((equal pressed "\C-g") (user-error "Abort"))                   ;; Selection is a prefix: open a new menu.                   ((member pressed des-keys))                   ;; Selection matches an association: return it.                   ((let ((entry (assoc current table)))                      (and entry (throw 'exit entry))))                   ;; Selection matches a special entry: return the                   ;; selection prefix.                   ((assoc current specials) (throw 'exit current))                   (t (error "No entry available")))))))        (when buffer (kill-buffer buffer))))))(advice-add 'org-mks :override #'org-mks-pretty)(setf (alist-get 'height +org-capture-frame-parameters) 15);; (alist-get 'name +org-capture-frame-parameters) "‚ùñ Capture") ;; ATM hardcoded in other places, so changing breaks stuff(setq +org-capture-fn      (lambda ()        (interactive)        (set-window-parameter nil 'mode-line-format 'none)        (org-capture)))#+end_src#+RESULTS:* Snippet Helpers#+begin_src emacs-lisp :tangle yes(defun +yas/org-src-header-p ()  "Determine whether `point' is within a src-block header or header-args."  (pcase (org-element-type (org-element-context))    ('src-block (< (point) ; before code part of the src-block                   (save-excursion (goto-char (org-element-property :begin (org-element-context)))                                   (forward-line 1)                                   (point))))    ('inline-src-block (< (point) ; before code part of the inline-src-block                          (save-excursion (goto-char (org-element-property :begin (org-element-context)))                                          (search-forward "]{")                                          (point))))    ('keyword (string-match-p "^header-args" (org-element-property :value (org-element-context))))))#+end_src#+RESULTS:: +yas/org-src-header-p#+begin_src emacs-lisp :tangle yes(defun +yas/org-prompt-header-arg (arg question values)  "Prompt the user to set ARG header property to one of VALUES with QUESTION.The default value is identified and indicated. If either default is selected,or no selection is made: nil is returned."  (let* ((src-block-p (not (looking-back "^#\\+property:[ \t]+header-args:.*" (line-beginning-position))))         (default           (or            (cdr (assoc arg                        (if src-block-p                            (nth 2 (org-babel-get-src-block-info t))                          (org-babel-merge-params                           org-babel-default-header-args                           (let ((lang-headers                                  (intern (concat "org-babel-default-header-args:"                                                  (+yas/org-src-lang)))))                             (when (boundp lang-headers) (eval lang-headers t)))))))            ""))         default-value)    (setq values (mapcar                  (lambda (value)                    (if (string-match-p (regexp-quote value) default)                        (setq default-value                              (concat value " "                                      (propertize "(default)" 'face 'font-lock-doc-face)))                      value))                  values))    (let ((selection (consult--read question values :default default-value)))      (unless (or (string-match-p "(default)$" selection)                  (string= "" selection))        selection))))#+end_src#+RESULTS:: +yas/org-prompt-header-arg#+begin_src emacs-lisp :tangle yes#+end_src