#+title: New Emacs Config
#+STARTUP: show2levels
#+PROPERTY: header-args:emacs-lisp :results none

This is a second attempt at emacs config that's modular and a bit easier to handle. The files here will be tangled separately into areas we may want to disable on some devices. This also allows us to disable sections of the config that we may be experimenting with without hurting the rest of my workflow.

Planned sections:

* Early Init
Early init takes some housekeeping tasks and runs them at startup.  Much of this is taken second hand from doom emacs.
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/early-init.el
;;; early-init.el --- Early init file -*- lexical-binding: t; no-byte-compile: t -*-
;; Defer garbage collection further back in the startup processs
(setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6)

;; Keep emacs from running package initilization
(setq pacakge-enable-at-startup nil)
;; Do not load from package cache
(setq package-quickstart nil)

;; Get rid of unstyled emacs
(push '(menu-bar-lines  . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the frame is taxing. Keep it small and ignore fonts for a bit
(setq frame-inhibit-implied-resize t)

;; Remove gui elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; prevent undwanted runtime buils
(setq comp-deferred-compilation nil)
#+end_src

** init.el startup optimization
Again this is mostly stolen from doom
#+begin_src emacs-lisp :tangle ~/init.el
;; init.el -- personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-

;; `file-name-handler-alist` is consulted on every require, load, and various function. You get a minor speed up by nooping this
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore file-name-handler-alist later because it is needed for handling encrypted or comprssed files
  (defun doom-reset-file-handler-alist-h ()
    ;; re-add rather than setq because file-name-handler-alist change should be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initialfile-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook '(lambda ()
                                ;; restore
                                (setq gc-cons-threshold 16777216
                                      gc-cons-percentage 0.1)))
  )
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src
** init.el load modules
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/init.el
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

(let ((file-name-handler-alist nil)
      (gc-cons-threshold  100000000))

  (require 'init-core)
  (require 'init-keybindings)
  (require 'init-org)

)
;; init.el ends here

#+end_src

* Package manger
** using straight
Conventions:
- prefer :init to :custom
- prefer multiple setq to one
- default to :defer t use :demand loading
- when packges do not require installation (like =eglot= or =dired=) we need to ~:straight (:type built-in)~
- If you specify :commands, they will be autoloaded and the package will be loaded when the commands are first executed
  + If you use :general and bind commands to keys it will automatically load the package on first invocation

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
(setq straight-check-for-modifications nil)

(setq use-package-always-defer t)
(defvar bootstrap-version)
(let* ((straight-repo-dir
        (expand-file-name "straight/repos" user-emacs-directory))
       (bootstrap-file
        (concat straight-repo-dir "/straight.el/bootstrap.el"))
       (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (shell-command
     (concat
      "mkdir -p " straight-repo-dir " && "
      "git -C " straight-repo-dir " clone "
      "https://github.com/raxod502/straight.el.git && "
      "git -C " straight-repo-dir " checkout 2d407bc")))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
(setq comp-deferred-compilation-black-list nil)
#+end_src
** Enable use-package statisics
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(setq use-package-compute-statistics t)
#+end_src

* Emacs
** Sane Defaults
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        frame-resize-pixelwise t)

  (setq user-full-name "Richard Cool"
        user-mail-address "rcool@netflix.com")

  (setq read-process-output-max (* 1024 1024))

  ;; Always allow y for yes
  (defalias 'yes-or-no-p  'y-or-n-p)

  ;; Default to utf-8
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  ;; write over selection on input
  (delete-selection-mode t)

  ;; Enable recent files
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))

  ;; Dont use escape modifier
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;;Dont persist a custom file
  (setq custom-file (make-temp-file ""))
  (setq custom-safe-themes t)
  (setq enable-local-variables :all)

  ;; stop emcs from littering the file system with backup files
  (setq make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)

  ;; Follow Simlinks
  (setq vc-follow-symlinks t)

  ;; Don't show extra window chrome
  (when (window-system)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

  ;;enable winnder mode globally
  (winner-mode t)
  (show-paren-mode t)

  ;; Less noise
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexival make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)

  ;; Clean up the mode line
  (display-time-mode -1)
  (setq column-number-mode t)

  ;; Indent defaults that are more sane
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 2)

  ;; Enable indentation and completion using tab
  (setq tab-always-indent 'complete)
  )
#+end_src
** Fonts
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (defcustom rc/default-font-family "Spleen32x64 Nerd Font"
    "default font family"
    :type 'string
    :group 'rc)
  (defcustom rc/variable-pitch-font-family "Spleen32x64 Nerd Font"
    "default variable pitch font family"
    :type 'string
    :group 'rc)

  (defun rc/set-font-size ()
    (interactive)
    (set-face-attribute 'default nil :family rc/default-font-family :height 175)
    (set-face-attribute 'fixed-pitch nil :family rc/default-font-family)
    (set-face-attribute 'variable-pitch nil :family rc/variable-pitch-font-family)
    (set-face-attribute 'mode-line nil :family rc/default-font-family :height 175)
    (set-face-attribute 'mode-line-inactive nil :family rc/default-font-family :height 175)
    )

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
)
#+end_src
** Set Keybindings for Mac:
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs

  :init
  (defun rc/is-macos ()
    (and (eq system-type 'darwin)
	 (= 0 (length (shell-command-to-string "uname -a | grep iPad"))))
  )

  (when (rc/is-macos)
   (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq right-command-modifier 'control)
    (setq mac-right-option-modifier 'meta)
    (setq mac-control-modifier 'meta)
    (setq mac-right-control-modifier 'control)
    )
  )

#+end_src
** Garbage Collection Magic
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'gcmh)
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))
#+end_src
** Helpful
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'helpful)
(use-package helpful
  :after evil
  :init
  (setq evil-lookup-func #'helpful-at-point)
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Eldoc
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'eldoc)
(use-package eldoc
  :hook (emacs-lisp-mode cider-mode))
#+end_src

** exec path from shell
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'exec-path-from-shell)
(use-package exec-path-from-shell
  :if (rc/is-macos)
  :hook (emacs-startup . (lambda ()
			   (setq exec-path-from-shell-arguments '("-1"))
			   (exec-path-from-shell-initialize))))
#+end_src
** no littering
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'no-littering)
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (add-to-list 'recentf-exclude no-littering-var-directory))
  )

#+end_src

** server mode
#+begin_src emacs-lisp ::tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (unless (and (fboundp 'server-running-p) (server-running-p))
    (server-start)))
#+end_src
** auto-pair parents
#+begin_src elisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
   :init
   (electric-pair-mode +1)
   (setq electric-pair-preserve-balance nil)
   ;; don't skip newline when auto-pairing parens
   (setq electric-pair-skip-whitespace-chars '(9 32))

 )

#+end_src

#+RESULTS:
: emacs

** xref
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'xref)
(use-package xref
  :straight (:type built-in)
  :init
  (setq xref-prompt-for-identifier nil)
  )

#+end_src

** don't close window with escape

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (defadvice keyboard-escape-quit
      (around keyboard-escape-dont-close-windows activate)
    (let ((buffer-quit-function (lambda () ())))
      ad-do-it))
  )
#+end_src
* Keybindings
** General
We need to load general to handle keybindings for packages

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'general)
(use-package general
  :demand t
  :config
  (general-evil-setup)

  (general-create-definer rc/leader-keys
    :states '(normal visual insert emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer rc/local-leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix ","
    :global-prefix "SPC m")

  (general-nmap
    :states 'normal
    "gD" '(xref-find-references :wk "references")
    )

  (rc/leader_keys
   "SPC" '(execute-extended-command :which-key "execute command")
   "`" '((lambda () (interactive) (switch-to-buffer (other-buffer (current-buffer) 1))) :which-key "prev buffer")
   "<escape>" 'keyboard-escape-quit
   ";" '(eval-expression :which-key "eval expression")

   "b" '(:ignore t :which-key "buffer")
   "br" 'revert-buffer
   "bd" 'kill-current-buffer

   "c" '(:ignore t :which-key "code")

   "f" (:ignore t :which-key "file")
   "fD" '((lambda () (interactive) (delete-file (buffer0-file-name))) :wk "delete")
   "ff" 'find-file
   "fs" 'save-buffer

   "g" '(:ignore t :which-key "git")

   "h" '(:ignore t :which-key "describe")
   "he" 'view-echo-area-messages
   "hf" 'describe-function
   "hF" 'describe-face
   "hl" 'view-lossage
   "hL" 'find-library
   "hm" 'descibe-mode
   "hk" 'describe-key
   "hK" 'describe-keymap

   "o" '(:ignore t :which-key "org")

   "p" '(:ignore t :which-key "project")

   "s" (:ignore t :which-key "search")

   "t" '(:ignore t :which-key "toggle")
   "t d" '(toggle-debug-on-error :wkl "debug on error")
   "t l" '(toggle-line-numbers-mode :wk "line numbers")
   "t w" '((lambda () (interactive) (toggle-truncate-lines)) :wk "work wrap")
    "u" '(universal-argument :wk "universal")

    "w" '(:ignore t :which-key "window")
    "wl"  'windmove-right
    "wh"  'windmove-left
    "wk"  'windmove-up
    "wj"  'windmove-down
    "wr" 'winner-redo
    "wd"  'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wu" 'winner-undo
    "wr" 'winner-redo
    "wm"  '(delete-other-windows :wk "maximize")

    )

  (rc/local-leader-keys
    :states 'normal
    "d" '(:ignore t :which-key "debug")
    "e" '(:ignore t :which-key "eval")
    "t" '(:ignore t :which-key "test")))
#+end_src
** COMMENT Evil
Search Tricks:
 - =*= / =#= to go to next/prev of symbol under point
 - =/= starts a Search =n= / =N= to go to next/prev
 - =gn= is a noun for the next match

Interesting vim nouns:
- =_= first char of line
- =g_= last character of line

Marks:
- =ma= mark the position in the buffer and save it to register =a=
- ='a= go to mark =a=
- =mA= mark position and filename
- =]'= go to next mark
- =''= go back to previous
- =g;= go to previous change location
- =gi= go back to insert mode where you left off

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil)
(use-package evil
:demand
:general
(rc/leader-keys
 "wv" 'evil-window-vsplit
 "ws" 'evil-window-split
  )
:init
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump t)
(setq evil-want-Y-yank-to-eol t)
(setq evil-undo-system 'undo-fu)
(setq evil-search-module 'evil-search)
(setq evil-split-window-below t)
(setq evil-vsplit-window-right t)
(setq evil-auto-indent nil)
:config
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-motion-state-map "_" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)
(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal)
(defun rc/evil-dont-move-cursor (orig-fn &rest args)
  (save-excursion (apply orig-fn args)))
(advice-add 'evil-indent :around #'rc/evil-dont-move-cursor)
)
#+End_src

** Evil-collection
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-collection)
(use-package evil-collection
  :after evil
  :demand
  :init
  (setq evil-collection-magit-use-z-for-folds nil)
  :config
  (evil-collection-init))
#+end_src

** Evil Goggles
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-goggles)
(use-package evil-goggles
:after evil
:demand
:init
(setq evil-goggles-duration 0.1)
:config
(push '(evil-operator-eval
        :face evil-goggles-yank-face
        :switch evil-goggles-enable-yank
        :advice evil-goggles--generic-async-advice)
      evil-goggles--commands)
(evil-goggles-mode)
(evil-goggles-use-diff-faces)
)

#+end_src

** Evil Snipe
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-snipe)
(use-package evil-snipe
  :after evil
  :demand
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src

** Evil comments
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-nerd-commenter)
(use-package evil-nerd-commenter
  :general
  (general-nvmap
   "gc" 'evilnc-comment-operator
   "gC" 'evilnc-copy-and-comment-operator))
#+end_src

** Evil Surround
- use =S)= to surround something without spaces =(sexp)=
- use =S(= to surround something with spaces =( sexp )=
#+begin_src emacs-lisp
(straight-use-package 'evil-surround)
(use-package evil-surround
  :general
  (:states 'operator
           "s" 'evil-surround-edit
           "S" 'evil-Surround-edit)
  (:states 'visual
           "S" 'evil-surround-region
           "gS" 'evil-Surround-region))
#+end_src

** Evil Indent Plus
To select a function in =python=, stand on a line in the body, select with =vik=
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-indent-plus)
(use-package evil-indent-plus
  :after evil
  :demand
  :config
  (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
  (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
  (define-key evil-inner-text-objects-map "k" 'evil-indent-plus-i-indent-up)
  (define-key evil-outer-text-objects-map "k" 'evil-indent-plus-a-indent-up)
  (define-key evil-inner-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
  (define-key evil-outer-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
  )
#+end_src

** Evil clever parens

Mark the outer form with =v a f=
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-cleverparens)
(use-package evil-cleverparens
  :after evil
  :hook (emacs-lisp-mode . rc/init-cleverparens)
  :init
  (defun rc/init-cleverparens ()
    (require 'evil-cleverparens-util)
    (evil-define-text-object evil-cp-a-defun (count &optional beg end type)
      "An other text object for a top level sexp (defun)."
      (if (evil-cp--inside-form-p)
          (let ((bounds (evil-cp--top-level-bounds)))
            (evil-range (car bounds) (cdr bounds) 'inclusive :expanded t))
        (error "Not inside a sexp.")))

    (evil-define-text-object evil-cp-inner-defun (count &optional beg end type)
      "An inner text object for a top elvel sexp (defun)."
      (if (evil-cp--inside-form-p)
          (let ((bounds (evil-cp--top-level-bounds)))
            (evil-range (1+ (car bounds)) (1- (cdr bounds)) 'inclusive :expanded t))
        (error "Not inside a sexp.")))

    (define-key evil-outer-text-objects-map "f" #'evil-cp-a-defun)
    (define-key evil-inner-text-objects-map "f" #'evil-cp-inner-defun)
    )
  )
#+end_src

** Evil iedit state
Keybindings:
=TAB=: toggle occurance
=n/N=: next/prev occurance
=F=: restrict scope to function
=J/K=: expand scope of match up or down
=V=: toggle visibility of matches

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-iedit-state)
(use-package evil-iedit-state
  :straight (evil-iedddit-state :type git :host github :repo "kassick/evil-iedit-state" :branch "master")
  :general
  (rc/leader-keys
   "s e" '(evil-iedit-state/iedit-mode :wk "iedit")
   "s q" '(evil-iedit-state/quit-iedit-mode :wk "iedit quit")))
#+end_src

** Which key
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'which-key)
(use-package which-key
  :demand
  :general
  (rc/leader-keys
   "?" 'which-key-show-top-level
   )
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode)
  )
#+end_src
* Org
** org-mode
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
  :hook ((org-mode . prettify-symbols-mode)
         (org-mode . visual-line-mode)
         (org-mode . variable-pitch-mode))
  :general
  (rc/leader-keys
   "f t" '(org-babel-tangle :wk "tangle")

)
#+end_src

* Provide Modules

** init-core
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(provide 'init-core)
;;; init-core.el ends here
#+end_src
** init-keybindings
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(provide 'init-keybindings)
;; init-keybindings ends here
#+end_src
** init-org
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(provide 'init-org)
;; init-org ends here
#+end_src
