#+title: New Emacs Config
#+STARTUP: show2levels
#+PROPERTY: header-args:emacs-lisp :results none

This is a second attempt at emacs config that's modular and a bit easier to handle. The files here will be tangled separately into areas we may want to disable on some devices. This also allows us to disable sections of the config that we may be experimenting with without hurting the rest of my workflow.

Planned sections:

* Early Init
Early init takes some housekeeping tasks and runs them at startup.  Much of this is taken second hand from doom emacs.
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/early-init.el
;;; early-init.el --- Early init file -*- lexical-binding: t; no-byte-compile: t -*-
;; Defer garbage collection further back in the startup processs
(setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6)

;; Keep emacs from running package initilization
(setq pacakge-enable-at-startup nil)
;; Do not load from package cache
(setq package-quickstart nil)

;; Get rid of unstyled emacs
(push '(menu-bar-lines  . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the frame is taxing. Keep it small and ignore fonts for a bit
(setq frame-inhibit-implied-resize t)

;; Remove gui elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; prevent undwanted runtime buils
(setq comp-deferred-compilation nil)
#+end_src

** init.el startup optimization
Again this is mostly stolen from doom
#+begin_src emacs-lisp :tangle ~/init.el
;; init.el -- personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-

;; `file-name-handler-alist` is consulted on every require, load, and various function. You get a minor speed up by nooping this
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore file-name-handler-alist later because it is needed for handling encrypted or comprssed files
  (defun doom-reset-file-handler-alist-h ()
    ;; re-add rather than setq because file-name-handler-alist change should be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initialfile-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook '(lambda ()
                                ;; restore
                                (setq gc-cons-threshold 16777216
                                      gc-cons-percentage 0.1)))
  )
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src
** init.el load modules
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/init.el
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

(let ((file-name-handler-alist nil)
      (gc-cons-threshold  100000000))

  (require 'init-core)
  (require 'init-keybindings)
  (require 'init-org)
  (require 'init-ui)
  (require 'init-programming)
  (require 'init-completion)
  (require 'init-languages)
)
;; init.el ends here

#+end_src

* Package manger
** using straight
Conventions:
- prefer :init to :custom
- prefer multiple setq to one
- default to :defer t use :demand loading
- when packges do not require installation (like =eglot= or =dired=) we need to ~:straight (:type built-in)~
- If you specify :commands, they will be autoloaded and the package will be loaded when the commands are first executed
  + If you use :general and bind commands to keys it will automatically load the package on first invocation

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
(setq straight-check-for-modifications nil)

(setq use-package-always-defer t)
(defvar bootstrap-version)
(let* ((straight-repo-dir
        (expand-file-name "straight/repos" user-emacs-directory))
       (bootstrap-file
        (concat straight-repo-dir "/straight.el/bootstrap.el"))
       (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (shell-command
     (concat
      "mkdir -p " straight-repo-dir " && "
      "git -C " straight-repo-dir " clone "
      "https://github.com/raxod502/straight.el.git && "
      "git -C " straight-repo-dir " checkout 2d407bc")))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
(setq comp-deferred-compilation-black-list nil)
#+end_src
** Enable use-package statisics
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(setq use-package-compute-statistics t)
#+end_src

* Emacs
** Sane Defaults
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        frame-resize-pixelwise t)

  (setq user-full-name "Richard Cool"
        user-mail-address "rcool@netflix.com")

  (setq read-process-output-max (* 1024 1024))

  ;; Always allow y for yes
  (defalias 'yes-or-no-p  'y-or-n-p)

  ;; Default to utf-8
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  ;; write over selection on input
  (delete-selection-mode t)

  ;; Enable recent files
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))

  ;; Dont use escape modifier
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;;Dont persist a custom file
  (setq custom-file (make-temp-file ""))
  (setq custom-safe-themes t)
  (setq enable-local-variables :all)

  ;; stop emcs from littering the file system with backup files
  (setq make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)

  ;; Follow Simlinks
  (setq vc-follow-symlinks t)

  ;; Don't show extra window chrome
  (when (window-system)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

  ;;enable winnder mode globally
  (winner-mode t)
  (show-paren-mode t)

  ;; Less noise
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexival make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)

  ;; Clean up the mode line
  (display-time-mode -1)
  (setq column-number-mode t)

  ;; Indent defaults that are more sane
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 2)

  ;; Enable indentation and completion using tab
  (setq tab-always-indent 'complete)
  )
#+end_src
** Fonts
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (defcustom rc/default-font-family "Spleen32x64 Nerd Font"
    "default font family"
    :type 'string
    :group 'rc)
  (defcustom rc/variable-pitch-font-family "Spleen32x64 Nerd Font"
    "default variable pitch font family"
    :type 'string
    :group 'rc)

  (defun rc/set-font-size ()
    (interactive)
    (set-face-attribute 'default nil :family rc/default-font-family :height 250)
    (set-face-attribute 'fixed-pitch nil :family rc/default-font-family)
    (set-face-attribute 'variable-pitch nil :family rc/default-font-family)
    (set-face-attribute 'mode-line nil :family rc/default-font-family :height 175)
    (set-face-attribute 'mode-line-inactive nil :family rc/default-font-family :height 175)
    )

  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
)
#+end_src
** Set Keybindings for Mac:
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs

  :init
   (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq mac-right-command-modifier 'control)
    (setq mac-right-option-modifier 'meta)
    (setq mac-control-modifier 'meta)
    (setq mac-right-control-modifier 'control)
)
#+end_src
** Garbage Collection Magic
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'gcmh)
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))
#+end_src
** Helpful
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'helpful)
(use-package helpful
  :after evil
  :init
  (setq evil-lookup-func #'helpful-at-point)
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Eldoc
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'eldoc)
(use-package eldoc
  :hook (emacs-lisp-mode cider-mode))
#+end_src

** exec path from shell
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'exec-path-from-shell)
(use-package exec-path-from-shell
  :hook (emacs-startup . (lambda ()
			   (setq exec-path-from-shell-arguments '("-1"))
			   (exec-path-from-shell-initialize))))
#+end_src
** no littering
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'no-littering)
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (add-to-list 'recentf-exclude no-littering-var-directory))
  )

#+end_src

** server mode
#+begin_src emacs-lisp ::tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (unless (and (fboundp 'server-running-p) (server-running-p))
    (server-start)))
#+end_src
** auto-pair parents
#+begin_src elisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
   :init
   (electric-pair-mode +1)
   (setq electric-pair-preserve-balance nil)
   ;; don't skip newline when auto-pairing parens
   (setq electric-pair-skip-whitespace-chars '(9 32))

 )

#+end_src

#+RESULTS:
: emacs

** xref
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(straight-use-package 'xref)
(use-package xref
  :straight (:type built-in)
  :init
  (setq xref-prompt-for-identifier nil)
  )

#+end_src

** don't close window with escape

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(use-package emacs
  :init
  (defadvice keyboard-escape-quit
      (around keyboard-escape-dont-close-windows activate)
    (let ((buffer-quit-function (lambda () ())))
      ad-do-it))
  )
#+end_src
* Keybindings
** General
We need to load general to handle keybindings for packages

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'general)
(use-package general
  :demand t
  :config
  (general-evil-setup)

  (general-create-definer rc/leader-keys
    :states '(normal visual insert emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer rc/local-leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix ","
    :global-prefix "SPC m")

  (general-nmap
    :states 'normal
    "gD" '(xref-find-references :wk "references")
    )

  (rc/leader-keys
   "SPC" '(execute-extended-command :which-key "execute command")
   "`" '((lambda () (interactive) (switch-to-buffer (other-buffer (current-buffer) 1))) :which-key "prev buffer")
   "<escape>" 'keyboard-escape-quit
   ";" '(eval-expression :which-key "eval expression")

   "b" '(:ignore t :which-key "buffer")
   "br" 'revert-buffer
   "bd" 'kill-current-buffer

   "c" '(:ignore t :which-key "code")

   "f" '(:ignore t :which-key "file")
   "fD" '((lambda () (interactive) (delete-file (buffer0-file-name))) :wk "delete")
   "ff" 'find-file
   "fs" 'save-buffer

   "g" '(:ignore t :which-key "git")

   "h" '(:ignore t :which-key "describe")
   "he" 'view-echo-area-messages
   "hf" 'describe-function
   "hF" 'describe-face
   "hl" 'view-lossage
   "hL" 'find-library
   "hm" 'descibe-mode
   "hk" 'describe-key
   "hK" 'describe-keymap

   "o" '(:ignore t :which-key "org")

   "p" '(:ignore t :which-key "project")

   "s" '(:ignore t :which-key "search")

   "t" '(:ignore t :which-key "toggle")
   "t d" '(toggle-debug-on-error :wkl "debug on error")
   "t l" '(toggle-line-numbers-mode :wk "line numbers")
   "t w" '((lambda () (interactive) (toggle-truncate-lines)) :wk "work wrap")
    "u" '(universal-argument :wk "universal")

    "w" '(:ignore t :which-key "window")
    "wl"  'windmove-right
    "wh"  'windmove-left
    "wk"  'windmove-up
    "wj"  'windmove-down
    "wr" 'winner-redo
    "wd"  'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wu" 'winner-undo
    "wr" 'winner-redo
    "wm"  '(delete-other-windows :wk "maximize")

    )

  (rc/local-leader-keys
    :states 'normal
    "d" '(:ignore t :which-key "debug")
    "e" '(:ignore t :which-key "eval")
    "t" '(:ignore t :which-key "test")))
#+end_src
** Evil
Search Tricks:
 - =*= / =#= to go to next/prev of symbol under point
 - =/= starts a Search =n= / =N= to go to next/prev
 - =gn= is a noun for the next match

Interesting vim nouns:
- =_= first char of line
- =g_= last character of line

Marks:
- =ma= mark the position in the buffer and save it to register =a=
- ='a= go to mark =a=
- =mA= mark position and filename
- =]'= go to next mark
- =''= go back to previous
- =g;= go to previous change location
- =gi= go back to insert mode where you left off

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil)
(use-package evil
:demand
:general
(rc/leader-keys
 "wv" 'evil-window-vsplit
 "ws" 'evil-window-split
  )
:init
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump t)
(setq evil-want-Y-yank-to-eol t)
(setq evil-undo-system 'undo-fu)
(setq evil-search-module 'evil-search)
(setq evil-split-window-below t)
(setq evil-vsplit-window-right t)
(setq evil-auto-indent t)
:config
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-motion-state-map "_" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)
(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal)
(defun rc/evil-dont-move-cursor (orig-fn &rest args)
  (save-excursion (apply orig-fn args)))
(advice-add 'evil-indent :around #'rc/evil-dont-move-cursor)
)
#+End_src

** Evil-collection
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-collection)
(use-package evil-collection
  :after evil
  :demand
  :init
  (setq evil-collection-magit-use-z-for-folds nil)
  :config
  (evil-collection-init))
#+end_src

** Evil Goggles
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-goggles)
(use-package evil-goggles
:after evil
:demand
:init
(setq evil-goggles-duration 0.1)
:config
(push '(evil-operator-eval
        :face evil-goggles-yank-face
        :switch evil-goggles-enable-yank
        :advice evil-goggles--generic-async-advice)
      evil-goggles--commands)
(evil-goggles-mode)
(evil-goggles-use-diff-faces)
)


#+end_src

** Evil Snipe
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-snipe)
(use-package evil-snipe
  :after evil
  :demand
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+end_src

** Evil comments
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-nerd-commenter)
(use-package evil-nerd-commenter
  :general
  (general-nvmap
   "gc" 'evilnc-comment-operator
   "gC" 'evilnc-copy-and-comment-operator))
#+end_src

** Evil Surround
- use =S)= to surround something without spaces =(sexp)=
- use =S(= to surround something with spaces =( sexp )=
#+begin_src emacs-lisp
(straight-use-package 'evil-surround)
(use-package evil-surround
  :general
  (:states 'operator
           "s" 'evil-surround-edit
           "S" 'evil-Surround-edit)
  (:states 'visual
           "S" 'evil-surround-region
           "gS" 'evil-Surround-region))
#+end_src

** Evil Indent Plus
To select a function in =python=, stand on a line in the body, select with =vik=
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-indent-plus)
(use-package evil-indent-plus
  :after evil
  :demand
  :config
  (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
  (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
  (define-key evil-inner-text-objects-map "k" 'evil-indent-plus-i-indent-up)
  (define-key evil-outer-text-objects-map "k" 'evil-indent-plus-a-indent-up)
  (define-key evil-inner-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
  (define-key evil-outer-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
  )
#+end_src

** Evil clever parens

Mark the outer form with =v a f=
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'evil-cleverparens)
(use-package evil-cleverparens
  :after evil
  :hook (emacs-lisp-mode . rc/init-cleverparens)
  :init
  (defun rc/init-cleverparens ()
    (require 'evil-cleverparens-util)
    (evil-define-text-object evil-cp-a-defun (count &optional beg end type)
      "An other text object for a top level sexp (defun)."
      (if (evil-cp--inside-form-p)
          (let ((bounds (evil-cp--top-level-bounds)))
            (evil-range (car bounds) (cdr bounds) 'inclusive :expanded t))
        (error "Not inside a sexp.")))

    (evil-define-text-object evil-cp-inner-defun (count &optional beg end type)
      "An inner text object for a top elvel sexp (defun)."
      (if (evil-cp--inside-form-p)
          (let ((bounds (evil-cp--top-level-bounds)))
            (evil-range (1+ (car bounds)) (1- (cdr bounds)) 'inclusive :expanded t))
        (error "Not inside a sexp.")))

    (define-key evil-outer-text-objects-map "f" #'evil-cp-a-defun)
    (define-key evil-inner-text-objects-map "f" #'evil-cp-inner-defun)
    )
  )
#+end_src

** Evil iedit state
Keybindings:
=TAB=: toggle occurance
=n/N=: next/prev occurance
=F=: restrict scope to function
=J/K=: expand scope of match up or down
=V=: toggle visibility of matches

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(use-package evil-iedit-state
  :straight (evil-iedit-state :type git :host github :repo "kassick/evil-iedit-state" :branch "master")
  :general
  (rc/leader-keys
   "s e" '(evil-iedit-state/iedit-mode :wk "iedit")
   "s q" '(evil-iedit-state/quit-iedit-mode :wk "iedit quit")))
#+end_src

** Which key
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(straight-use-package 'which-key)
(use-package which-key
  :demand
  :general
  (rc/leader-keys
   "?" 'which-key-show-top-level
   )
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode)
  )
#+end_src
* Org
** org-mode
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
  :hook ((org-mode . prettify-symbols-mode)
         (org-mode . visual-line-mode)
         (org-mode . variable-pitch-mode))
  :general
  (rc/leader-keys
   "f t" '(org-babel-tangle :wk "tangle")
   "o C" '(org-capture :wk "capture")
   "o l" '(org-todo-list :wk "todo list")
   )

  (rc/local-leader-keys
   :keymaps 'org-mode-map
   "a" '(org-archive-subtree :wk "archive subtree")
   "E" '(org-export-dispatch :wk "export")
   "i" '(org-insert-structure-template :wk "insert src")
   "l" '(:ignore t :wk "link")
   "l l" '(org-insert-link :wk "insert link")
   "l s" '(org-store-link :wk "store link")
   "L" '((lambda () (interactive) (org-latex-preview)) :wk "latex preview")
   "r" '(org-refile :wk ":refile")
   "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
   "p" '(org-priority :wk "priority")
   "q" '(org-set-tags-command :wk :"tag")
   "s" '(org-sort :wk "sort")
   "t" '(:ignore t :wk "todo")
   "t t" '(org-todo :wk "heading todo")
   "t s" '(org-schedule :wk "schedule")
   "t d" '(org-deadline :wk "deadline")
   "x" '(org-toggle-checkbox :wk "toggle checkbox")
   )
  (org-mode-map
   :states 'insert
   "TAB" 'nil
   "S-TAB" 'nil)
  (org-mode-map
   :states 'normal
   "z i" '(org-toggle-inline-images :wk "inline images"))
  :init
  (when (file-directory-p "~/org")
    (setq org-directory "~/org"
          +org-export-directory "~/org/export"
          org-default-notes-file "~/org/notes.org"
          org-id-locations-file "~/org/.orgids"
          ))
  (setq org-src-preserve-indentation t
        org-startup-indented t
        org-hide-emphasis-markers t
        org-catch-invisible-edits 'smart
        org-image-actual-width nil
        org-indent-indentation-per-level 1
        org-list-demote-modify-bullet '(("-" . "+") ("+" . "*")))
  (setq org-modules '(ol-docview org-habit))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROP(p)" "|" "HOLD(h)" "CANCELLED(c)" "DONE(d)")))
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                         ("#+END_SRC" . "«")
                                         ("#+begin_src" . "»")
                                         ("#+end_src" . "«")
                                         ("lambda"  . "λ")
                                         ("->" . "→")
                                         ("->>" . "↠")))
    (setq  prettify-symbols-unprettify-at-point 'right-edge)
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-export-backends 'beamer)
    (plist-put org-format-latex-options :scale 1.2)
   )


#+end_src
** Org code blocks in monospace
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
:config
(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))

(eval-after-load "org"
  '(mapc
    (lambda (face)
      (set-face-attribute
       face nil
       :inherit
       (my-adjoin-to-list-or-symbol
        'fixed-pitch
        (face-attribute face :inherit))))
    (list 'org-code 'org-block)))
    )
#+end_src
** Org Agenda
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
  :general
  (rc/leader-keys
   "o a" '(org-agenda-list :wk "agenda")
   "o A" '(org-agenda :wk "agenda")
   "o C" '(org-capture :wk "capture")
   "o l" '(org-todo-list :wk "todo list")
   "o n" '((lambda () (interactive) (org-agenda nil "n")) :wk "next")
   "o p" '((lambda () (interactive) (find-file (concat org-directory "todo.org")))
             :wk "open todos"))
   :init
   (setq org-agenda-files '())
   (when (file-directory-p "~/org/personal/")
     (setq org-agenda-files
           (append org-agenda-files
                   '("~/org/personal/birthdays.org"))))
   (when (file-directory-p "~/roam/work")
     (setq org-agenda-files
           (append org-agenda-files
                   '("~/roam/work/todo.org"))))
   (when (file-directory-p "~/roam/recovery")
     (setq org-agenda-files
           (append org-agenda-files
                   '("~/roam/recovery/todo.org"))))
   (setq org-agenda-custom-commands
         '(("d" "Dashboard"
            ((agenda "" ((org-deadline-warning-days 7)))
             (todo "NEXT"
                   ((org-agenda-overriding-header "Next Tasks")))
             (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
           ("n" "Next Tasks"
            ((todo "NEXT"
                   ((org-agenda-overriding-header "Next Tasks")))))
           ("w" "Work Tasks" tags-todo "+work")
           ("r" "Recovery Tasks" tags-todo "+recovery")))
   )
#+end_src
** Org capture templates
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
  :init
  (setq org-capture-templates
        `(("b" "Blog" entry
           (file+headline "personal/todo.org" "Blog")
           ,(concat "* WRITE %^{Title} %^g\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n:END:\n\n"
                    "%i%?"))
          ("d" "New Diary Entry" entry(file+olp+datatree"~/org/personal/diagry.org" "Daily Logs")
           "* %^{thought for the day}
                 :PROPERTIES:
                 :CATEGORY: %^{category}
                 :SUBJECT: %^{subject}
                 :MOOD:  %^{mood}
                 :END:
                 :RESOURCES:
                 :END:

                \*What was one good thing you learned today?*:
                - %^{whatilearnedtoday}

               \*List one thing you could have done better*:
                - %^{onethingdobetter}

                \*Describe in your own words how your day was*:
                - %?")
          ("i" "Inbox" entry
           (file+headline "personal/todo.org" "Inbox")
           ,(concat "* %^{Title}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U%\n"
                    ":END:\n\n"
                    "%i%l"))
          ("u" "New URL Entry" entry
           (file+function "~/org/personal/dailies.org" org-reverse-datatree-goto-date-in-file)
           "* [[%^{URL}][%^{Description}]] %^g %?")
          ("w" "Work" entry
           (file+headline "personal/todo.org" "Work")
           ,(concat "* TODO [#A] %^{Title} :@work:\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                    "%i%?"))))
          )
#+end_src
** Cycle only one heading
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
 (use-package org
   :init
   (defun +org-cycle-only-current-subtree-h (&optional arg)
     "Toggle the local fold at the point, and no deeper.
   `org-cycles's standard behavior is to cycle betweeen three levels; collapsed,
   subtree and whole document. This is slow, especially in larger org buffer.  Most
   of the time, I just want to peek into the current subtree -- at most, expand *only* the
   current subtree.

  All my (performant) foldings needs are met between this and `org-show-subtree'
  (on z0 for evil users), and `org-cycle' on shift-TAB if I need it."
     (interactive "P")
     (unless (eq this-command 'org-shifttab)
       (save-excursion
         (org-beginning-of-line)
         (let (invisible-p)
           (when (and (org-at-heading-p)
                      (or org-cycle-open-archived-trees
                          (not (member org-archive-tag (org-get-tags))))
                      (or (not arg)
                          (setq invisible-p (outline-invisible-p (line-end-position)))))
             (unless invisible-p
               (setq org-cycle-subtree-status 'subtree))
             (org-cycle-internal-local)
             t)))))
   :config
   ;;Only fold the currnet tree, rather than recursively
   (add-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h)
   )
#+end_src
** org reverse datatree
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org-reverse-datetree
:after org :demand
)
#+end_src
** org-superstar
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org-superstar
:hook (org-mode . org-superstar-mode)
:init
(setq org-superstar-headline-bullets-list '("✖" "✚" "◉" "○" "▶")
  org-superstar-special-todo-items t
  org-ellipsis " ↴ ")
)
#+end_src
** org-evil-mode:
nice =+org/insert-item-below= function
=evil= bindings for =org-agenda=
text objects:
   use =vie= to select everything inside a src block
   use =vir= to select everything inside a heading
   use ==ie= to format a code block
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package evil-org-mode
  :straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
  :hook ((org-mode . evil-org-mode)
         (org-mode . (lambda ()
											 (require 'evil-org)
											 (evil-normalize-keymaps)
											 (evil-org-set-key-theme '(textobjects))
											 (require 'evil-org-agenda)
											 (evil-org-agenda-set-keys))))
  :bind
  ([remap evil-org-org-insert-heading-respect-content-below] . +org/insert-item-below) ;; "<C-return>"
  ([remap evil-org-org-insert-todo-heading-respect-content-below] . +org/insert-item-above) ;; "<C-S-return>"
  :general
  (general-nmap
    :keymaps 'org-mode-map
    :states 'normal
    "RET" #'org-open-at-point
		)
	:init
	(defun +org--insert-item (direction)
		(let ((context (org-element-lineage
										(org-element-context)
										'(table table-row headline inlinetask item plain-list)
										t)))
			(pcase (org-element-type context)
				;; Add a new list item (carrying over checkboxes if needed)
				((or `item `plain-list)
				 ;;Position determines where org-insert-todo-heading and org-insert item insert the new list tiem
				 (if (eq direction 'above)
						 (org-beginning-of-item)
					 (org-end-of-item)
					 (backward-char))
				 (org-insert-item (org-element-property :checkbox context))
				 ;;Handle edge case where current item is empty and bottom of list is flush against a new heading
				 (when (and (eq direction 'below)
										(eq (org-element-property :contents-begin context)
												(org-element-property :contents-end context)))
					 (org-end-of-item)
					 (org-end-of-line)))
				;; Add a new table row
				((or `table `table-row)
				 (pcase direction
					 ('below (save-excursion (org-table-insert-row t))
									 (org-table-next-row))
					 ('above (save-excursion (org-shiftmetadown))
									 (+org/table-previous-row))))

				;; Otherwise add a new heading carrying over any todo state
				(_
				 (let ((level (or (org-current-level) 1)))
					 (pcase direction
						 (`below
							(let (org-insert-heading-respect-content)
								(goto-char (line-end-position))
								(org-end-of-subtree)
								(insert "\n" (make-string level ?*) " ")))
						 (`above
							(org-back-to-heading)
							(insert (make-string level ?*) " ")
							(save-excursion (insert "\n"))))
					 (when-let* ((todo-keyword (org-element-property :todo-keyword context))
											 (todo-type (org-element-property :todo-type context)))
						 (org-todo
							(cond ((eq todo-type 'done)
										 (car (+org-get-todo-keywords-for todo-keyword)))
										(todo-keyword)
										('todo)))))))
			(when (org-invisible-p)
				(org-show-hidden-entry))
			(when (and (bound-and-true-p evil-local-mode)
								 (not (evil-emacs-state-p)))
        (evil-insert 1))))
(defun +org/insert-item-below (count)
 "Inserts a new heading, table cell or item below the current one"
(interactive "p")
(dotimes (_ count) (org--insert-item 'below)))

(defun +org/insert-item-above (count)
 "Inserts a new heading, table cell, or item above the current one"
(interactive "p")
(dotimes (_ count) (org--insert-item 'above)))
  )
#+end_src
** org-appear
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org-appear
:straight (org-appear :type git :host github :repo "awth13/org-appear")
:hook (org-mode . org-appear-mode)
:init
(setq org-appear-autoemphasis t)
(setq org-appear-autolinks t)
(setq org-appear-autosubmarkers t)
)
#+end_src
** org-roam
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org-roam
:after org
:init
(setq org-roam-directory (file-truename "~/roam"))
(setq org-roam-v2-ack t)
(setq org-roam-capture-templates
'(("d" "default" plain "%?" :target
(file+head "personal/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n") :unnarrowed t)
("w" "work" plain "%?" :target
(file+head "work/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n") :unnarrowed t)))
:general
(rc/leader-keys
"TAB n" '((lambda () (interactive) (perp-switch "notes")) :wk "notes")
"n b" 'org-roam-buffer-toggle
"n f" 'org-roam-node-find
"n g" 'org-roam-graph
"n i" 'org-roam-node-insert
"n c" 'org-roam-capture
"n t" 'org-roam-tag-add
"n r" 'org-roam-ref-add
"n a" 'org-roam-alias-add
;; Dailies
"n j" 'org-roam-dailies-capture-today
"n J" 'org-roam-dailies-goto-today
;; Todos
"o t" '((lambda () (interactive)
(persp-switch "notes")
(find-file (concat org-roam-directory "/work/todo.org")))
:wk "work todos")
"o n" '((lambda () (interactive)
(persp-switch "notes")
(org-roam-node-fine))
:wk "notes")

)
:config
(org-roam-setup)
(add-to-list 'display-buffer-alist
'(("*org-roam*"
(display-buffer-in-direction)
(direction . right)
(window-width . 0.33)
(window-height . fit-window-to-buffer))))
)
#+end_src
** org-babel
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package org
	:general
	(rc/local-leader-keys
		:keymaps 'org-mode-map
		"'" '(org-edit-special :wk "edit")
		"-" '(org-babel-demarcate-block :wk "split block")
		"z" '(org-babel-hide-result-toggle :wk "fold result"))
	(rc/local-leader-keys
		:keymaps 'org-src-mode-map
		"'" '(org-edit-src-exit :wk "exit"))
	:init
	(setq org-confirm-babel-evaluate nil)
	:config
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((emacs-lisp . t)
     (shell . t)))
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  )
#+end_src
** highlight todo
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(use-package hl-todo
  :hook ((prog-mode org-mode) . rc/hl-todo-init)
  :init
	(defun rc/hl-todo-init ()
		(setq-local hl-todo-keyword-faces '(("HOLD" . "#cfdf30")
																				("TODO" . "#ff9977")
																				("NEXT" . "#b6a0ff")
																				("PROG" . "#00d3d0")
																				("FIXME" . "#ff9977")
																				("DONE" . "#44bc44")
																				("REVIEW" . "#6ae4b9")
																				("CANCELLED" . "#bfd99ff")))
    (hl-todo-mode))
  )
#+end_src

* UI
** Doom themes
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package doom-themes
:demand
:config
 (setq doom-themes-enable-bold t
       doom-themes-enable-italic t)
 (load-theme 'doom-outrun-electric t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)
;; Enable custom neotree theme (with all-the-icons)
(doom-themes-neotree-config)
;; and for treemacs
(setq doom-themes-treemacs-theme "doom-colors")
(doom-themes-treemacs-config)
;; corrects and improves org's native fontifcation
(doom-themes-org-config)
)
#+END_SRC
** All the icons
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package all-the-icons
  :demand
)

(use-package all-the-icons-completion
 :after (marginalia all-the-icons)
:hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
:init
(all-the-icons-completion-mode)
)
#+END_SRC
** Doom Modeline
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package doom-modeline
:demand
:init
(setq doom-modeline-buffer-encoding nil)
(setq doom-modeline-env-enable-python nil)
(setq doom-modeline-height 15)
(setq doom-modeline-project-detection 'projectile)
:config
(doom-modeline-mode 1)
(set-face-attribute 'doom-modeline-evil-insert-state nil :foreground "orange")
)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package dashboard
  :demand
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboards*")))
  (setq dashboard-center-content t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (defun rc/is-after-17-or-weekends? ()
    (or (thread-first (nth 3 (split-string (current-time-string) " "))
                      (string-to-number)
                      ( > 16 ))
        (thread-first (substring (current-time-string) 0 3)
                      (member '("Sat" "Sun")))))

		(setq dashboard-banner-logo-title nil)
		(setq dashboard-set-footer nil)
		(defun rc/dasboard-agenda-entry-format ()
			"Format agenda entry to show it to dashboard. Compared to the original, we remove tags at the end"
			(let * ((schedule-time (org-get-scheduled-time (point)))
              (deadline-time (org-get-deadline-time (point)))
              (item (org-agenda-format-item
                     (dashboard-agenda-entry-time (or schedule-time deadline-time))
                     (org-get-heading)
                     (org-outline-level)
                     (org-get-category)
                     nil
                     t))
              (loc (point))
              (file (buffer-file-name)))
           (dasboard-agenda--set-agenda-headline-face item)
           (list item loc file)))
		(defun rc/dashboard-get-agenda ()
			"Get agenda items for today or for a week from now."
			(org-compile-prefix-format 'agenda)
			(org-map-entries 'rc/dashboard-agenda-entry-format
											 dashboard-match-agenda-entry
                       'agenda
                       dashboard-filter-agenda-entry))
		(defun rc/dashboard-get-next ()
			"Get agenda items for today or for a week from now."
			(org-compile-prefix-format 'agenda)
			(org-map-entries 'rc/dashboard-agenda-entry-format
											 dashboard-match-next-entry
											 'agenda))
		(defun rc/dashboard-insert-next (list-size)
			"Add the list of LIST-SIZE items of next tasks"
			(require 'org-agenda)
			(let ((next (rc/dashboard-get-next)))
				(dashboard-insert-section
				 "Next tasks"
				 next
				 list-size
				 "n"
				 `((lambda (&rest ignore)
						 (let ((buffer (find-file-other-window (nth 2 ',el))))
							 (with-current-buffer buffer
								 (goto-char (nth 1 ',el))
                 (switch-to-buffer buffer))))
           (format "%s" (nth 0 el))))))
			:config
			;; Exclude work items after 17 and on weekends
			(setq dashboard-match-next-entry "TODO=\"NEXT\"-work")
			(run-at-time "00:00" (* 60 60 24)
									 (lambda ()
										 (if (rc/is-after-17-or-weekends?)
												 (setq dashboard-match-agenda-entry "life|habits"
															 dashboard-match-next-entry "TODO=\"NEXT\"-work")
											 (setq dashboard-match-agenda-entry "work|life|habits"
                             dashboard-match-next-entry "TODO=\"NEXT\""))))
			(dashboard-setup-startup-hook)
			(set-face-attribute 'dashboard-items-face nil :height 200)
			(advice-add 'dashboard-get-agenda :override #'rc/dashboard-get-agenda)
			(add-to-list 'dashboard-item-generators '(next . rc/dashboard-insert-next))
			(setq dashboard-items '((agenda . 5)
															(next . 10)
															(recents . 5)
                              (projects . 5)))
      )
#+end_src
** Popup management
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package emacs
	:init
	(setq display-buffer-alist
				`((,(rx bos (or "*Apropos*" "*Help*" "*helpful*" "*info*" "*Summary*") (0+ not-newline))
					 (display-buffer-reuse-mode-window display-buffer-below-selected)
					 (window-height . 0.33)
					 (mode apropos-mode help-mode helpful-mode Info-mode Man-mod))))
	;; Reuse existing windows
	;; (setq display-buffer-alist
	;; 			'((".*"
	;; 				 (display-buffer-reuse-window display-buffer-same-window)
	;; 				 (reusable-frames . t))))
  ;; (setq even-window-sizes nil)
  )
#+end_src
** Centered cursor mode
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package centered-cursor-mode
:general
(rc/leader-keys
"t =" '((lambda () (interactive) (centered-cursor-mode 'toggle)) :wk "center cursor"))
)
#+end_src
** Hide Mode line
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package hide-mode-line
:commands (hide-mode-line-mode))
#+end_src
** Winnum
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package winum
:general
(rc/leader-keys
"1" '(winum-select-window-1 :wk "win 1")
"2" '(winum-select-window-2 :wk "win 2")
"3" '(winum-select-window-3 :wk "win 3")
"4" '(winum-select-window-4 :wk "win 4")
"5" '(winum-select-window-5 :wk "win 5")
"6" '(winum-select-window-6 :wk "win 6")
)
:config
(winum-mode))
#+end_src
** Transpose Frame
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package transpose-frame
:general
(rc/leader-keys
"w t" '(transpose-frame :wk "transpose")
"w f" '(rotate-frame :wk "flip")))
#+end_src
** Fill column indicator
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package display-fill-column-indicator
	:straight (:type built-in)
	:hook ((python-mode . display-fill-column-indicator-mode)
				 (tsx-mode . display-fill-column-indicator-mode)
				 (typescript-mode . display-fill-column-indicator-mode)
				 (web-mode . display-fill-column-indicator-mode))
	:init
  (setq-default fill-column 90)
  )
#+end_src
** Highlight indentation guides
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
;; Add a visual indent guide
(use-package highlight-indent-guides
:hook (prog-mode . highlight-indent-guides-mode)
:init
(setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-character ?‖)
(setq highlight-indent-guides-responsive 'top)
)
#+end_src
** Enlarge window
(stolen from DOOM)
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(use-package emacs
	:general
	(rc/leader-keys
		"w o" '(doom/window-enlargen :wk "enlargen"))
	:init
	(defun doom/window-enlargen (&optional arg)
		"Enlargen the current window to focus on this one. Does not close the other windows
(unlike `doom/window-maximize-buffer'). Activate again to undo"
		(interactive "P")
		(let ((param 'doom--enlargen-last-wconf))
			(cl-destructuring-bind (window . wconf)
					(or (frame-parameter nil param)
							(cons nil nil))
				(set-frame-parameter
				 nil param
				 (if (and (equal window (selected-window))
									(not arg)
									wconf)
						 (ignore
							(let ((source-window (selected-window)))
								(set-window-configuration wconf)
								(when (window-live-p source-window)
									(select-window source-window))))
					 (prog1 (cons (selected-window (or wconf (current-window-configuration)))
												(let* ((window (selected-window))
															 (dedicated-p (window-dedicated-p window))
															 (preserved-p (window-parameter dinwo 'window-preserved-size))
															 (ignore-window-parameters t)
															 (window-resize-pixelwise nil)
															 (frame-resize-pixelwise nil))
													(unwind-protext
													 (progn
														 (when dedicated-p (set-window-dedicated-p window nil))
														 (when preserved-p (set-window-parameter window 'window-preserved-size nil))
														 (maximize-window window))
													 (set-window-dedicated-p window dedicated-p)
													 (when preserved-p
														 (set-window-parameter window 'window-preserved-size preserved-p))
                           (add-hook 'doom-switch-window-hook #'doom--enlargen-forget-last-wconf-h))))))))))
  )
#+end_src
* Completion
*** Marginalia
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package marginalia
	:after vertico
	:init
	(setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	(marginalia-mode)
	(with-eval-after-load 'projectile
		(add-to-list 'marginalia-command-categories '(projectile-find-file . file)))
	)
#+end_src
** Embark
You can act on candidates with =C-l=
You can run =embark-export= in all results (e.g. after a =consult-line=) with =C-l E=
You can run =embark-export-snapshot= with =C-l S=

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package embark
  :after vertigo
  :general
  (general-nmap "C-l" 'embark-act)
  (vertico-map
   "C-l" #'embark-act
   )
  (:keymaps 'embark-file-map
            "o" 'find-file-other-window
            "x" 'rc/dired-open-externally)
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Emark live/completions buffer
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  )

#+end_src

** wgrep
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package wgrep
:general
(grep-mode-map "W" 'wgrep-change-to-wgrep-mode)
:init
(setq wgrep-auto-save-buffer t)
(setq wgrep-change-readonly-file t)
                )
#+end_src

** Consult
After =consult-line= you can press =M-n= twice to search for the symbol at point
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package consult
  :commands (consult-ripgrep)
  :general
  (general-nmap
		:states '(normal insert)
		"C-p" 'consult-yank-pop)
  (rc/leader-keys
		"s i" '(consult-isearch :wk "isearch")
		"s o" '(consult-outline :wk "outline")
		"s s" 'consult-line
		"s p" '(consult-ripgrep :wk "ripgrep project")
		"b b" 'consult-buffer
		"f r" 'consult-recent-file
		"s !" '(consult-flymake :wk "flymake")
		)
	:init
	(setq xref-show-xrefs-function #'consult-xref
				xref-show-definitions-function #'consult-xref)
	:config
	(autoload 'projectile-project-root "projectile")
	(setq consult-project-root-function #'projectile-project-root)
	(with-eval-after-load 'selectrum
    (require 'consult-selectrum))
  )
#+end_src

** embark-consult

#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package embark-consult
:demand t
:hook
(embark-collect-mode . embark-consult-preview-minor-mode)
)
#+end_src

** Vertico
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package vertico
	:straight (vertico :type git :host github :reppo "minad/vertico")
	:demand
	:general
	(:keymaps 'vertico-map
						"C-j" #'vertico-next
						"C-k" #'vertico-previous
						"<escape>" #'minibuffer-keyboard-quit
						"M-<backspace>" #'vertico-directory-delete-workd
						)
	(:keymaps '(normal insert visual motion)
						"M-." #'vertico-repeat)
	:init
	;; Multiform
	(setq vertico-grid-separator "         ")
	(setq vertico-grid-lookahead 50)
	(setq vertico-buffer-display-action '(display-buffer-reuse-window))
	(setq vertico-multiform-categories
				'((file indexed)
					(consult-grep buffer)
					(consult-location)
					(imenu buffer)
					(library reverse indexed)
					(t reverse)
					))
	(setq vertico-multiform-commands '(("flyspell-correct-*" grid reverse)
																		 (org-refile grid reverse indexed)
																		 (consult-yank-pop indexed)
																		 (consult-flycheck)
																		 (consult-lsp-diagnostics)
																		 ))
	(setq completion-in-region-function
				(lambda (&rest args)
					(apply (if vertico-mode
										 #'consult-completion-in-region
									 #'completion--in-region)
								 args)))
	:config
	(vertico-mode)

	;; Prefix the candidate with >>
	(advice-add #'vertico--format-candidate :around
							(lambda (orig cand prefix suffix index _start)
								(setq cand (funcall orig cand prefix suffix index _start))
								(concat
								 (if (= vertico--index index)
										 (propertize "» " 'face 'vertico-current)
									 "  ")
                 cand)))

  )
#+end_src

** Orderless
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package orderless
	:init
	(setq completion-styles '(orderless)
				completion-category-defaults nil
				completion-category-overrides '((file (styles partial-completion)))))

(use-package savehist
	:init
	(savehist-mode))

(use-package emacs
  :init
	;; Add prmpt indicator for completing read-multiple
	(defun crm-indicator (args)
		(const (concat "[CRM] " (ars args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
				'(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Enable recusrive minibuffers
	(setq enable-recursive-minibuffers t))

;; Hide commands in M-x which do not work in the current mode
;; (setq read-extended-command-predicate #'commands-completion-default-include-p)
)
#+end_src

** Dabbrev
When =TAB= does not work use =S-Tab=
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package dabbrev
:general
(python-mode-map
:states 'insert
"<backtab>" 'dabbrev-completion))
#+end_src
** Corfu
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(use-package corfu
:straight (corfu :type git :host github :repo "minad/corfu")
:hook ((prog-mode . corfu-mode)
(org-mode . corfu-mode))
:bind
(:map corfu-map
("C-j" . corfu-next)
("C-k" . corfu-previous))
:general
(evil-insert-state-map "C-k" nil)
:init
(setq corfu-auto nil) ;; enable auto completion
(setq corfu-cycle t) ;; enable cycling
(setq corfu-min-width 80)
(setq corfu-max-width corfu-min-width)
(setq corfu-preselect-first t)

(defun corfu-enable-always-in-minibuffer ()
"Enable corfu in minibuffer if Vertico is not active"
(unless (or (bound-and-true-p mct--active)
(bound-and-true-p vertico--input))
(setq-local corfu-auto nil)
(corfu-mode 1)))

(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

)
#+end_src
* Programming
** Snippets
#+BEGIN_SRC :tangle ~/.vanilla_emacs.d/lisp/init-programming.el
(use-package yasnippet
:general
(yas-minor-mode-map
:states 'insert
"TAB" 'nil
"C-TAB" 'yas-expand)
:hook
((prog-mode org-mode dap-ui-repl-mode vterm-mode) . yas-minor-mod)
:init
(defun rc/yas-try-expanding-auto-snippets ()
 (when (and (boundp 'yas-minor-mode) yas-minor-mode)
 (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
 (yas-expand))))
 :config
 (yas-reload-all)
 (add-hook 'post-comment-hook #'rc/yas-try-expanding-auto-snippets)
 )
#+END_SRC
** undo fu
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-programming.el
(use-package undo-fu
  :demand
  :general
  (:states 'normal
    "u" 'undo-fu-only-undo
    "\C-r" 'undo-fu-only-redo))
#+END_SRC
* Provide Modules

** init-core
#+begin_src emacs-lisp  :tangle ~/.vanilla_emacs.d/lisp/init-core.el
(provide 'init-core)
;;; init-core.el ends here
#+end_src
** init-keybindings
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-keybindings.el
(provide 'init-keybindings)
;; init-keybindings ends here
#+end_src
** init-org
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-org.el
(provide 'init-org)
;; init-org ends here
#+end_src
** init-programming
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-programming.el
(provide 'init-programming)
;; init-programming ends here
#+END_SRC
** init-ui
#+BEGIN_SRC emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-ui.el
(provide 'init-ui)
;; init-ui ends here
#+END_SRC
** Completion 
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-completion.el
(provide 'init-completion)
;; init-completion ends here
#+end_src
** Languages
#+begin_src emacs-lisp :tangle ~/.vanilla_emacs.d/lisp/init-languages.el
(provide 'init-languages)
#+end_src
