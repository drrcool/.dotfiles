Title: Emacs Configuration
#+PROPERTY: header-Ares :results none :tangle ~/.emacs.d/init.el
#+auto_tangle: t


* About this config
This is my first attempt at a fully-feature emacs configuration. In many ways, I have little idea of what I'm doing. I've used emacs for years without these features, but with the advent of LSP would like to learn more about to make emacs work the best for my workflow as possible. I've learned a lot via DOOM emacs, but now I want to ensure I have a system that caters to my personal need.

* Setup:
I got tired of emacs asking if it was ok to follow a symlink on every boot and the attempts I made to suppress that didn't work. So instead, we tangle directly to =init.el= and save this org file under version control.

* Initial Quick setup
These are the random one-off configurations that help make Emacs better, but didn't fall into a great category.  Things like removing the unneeded ui elements from the screen or suppressing annoying dialogs that you always answer yes to.
** Remove some of the features of the UI that we don't need (toolbars, menubars, scroll bars, and splash screen)
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;;-*- lexical-binding: t; -*-
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)
  (setq initial-buffer-choice nil)
  ;; Tune garbage collection
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Turn off some unneeded UI Elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-time-mode 1)
#+END_SRC
** Turn on centered-cursor-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
      (use-package centered-cursor-mode
      :ensure t
    :config
  (global-centered-cursor-mode +1))
#+end_src
** Make deleted files go to trash
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (setq delete-by-moving-to-trash t
trash-directory "~/.local/share/Trash/files/")
#+end_src

** Turn on beacon
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package beacon
    :ensure t
    :config
    (beacon-mode +1))
#+end_src

** DONE Suppress execute confirm
CLOSED: [2022-12-28 Wed 17:26]
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
 (setq org-confirm-babel-evaluate nil)
#+end_src
** DONE Keep little files from littering
CLOSED: [2022-12-28 Wed 18:13]
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package no-littering :ensure t)
#+end_src

** DONE Suppress compiler warnings
CLOSED: [2022-12-28 Wed 17:27]
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

** Load custom lisp files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (load (expand-file-name "rc-funcs.el" user-emacs-directory))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

#+RESULTS:
** Suppress emacs from asking if it should follow symlink files
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
(setq vc-follow-symlinks t)
(setq vc-suppress-confirm t)
#+end_src
** Turn on line numbers
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Turn on line numbers in every buffer
  (global-display-line-numbers-mode 1)
  ;; With vim bindings, relatives let us use j and k better
  (setq display-line-numbers-type 'relative)
#+END_SRC
** Disable lockfiles
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
(setq create-lockfiles nil)
#+end_src

** Line Highlighting and Fringe
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Turn on line highlithting for current line
  (hl-line-mode 1)
  ;; Add some margins
  (set-fringe-mode 10)
#+END_SRC
** Add escape to kill prompts
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Make escape kill prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** Keys for Mac
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (setq mac-command-modifier       'meta
        mac-option-modifier        'meta
        mac-control-modifier       'control
        mac-right-option-modifier     'meta
        mac-right-control-modifier  'control)
#+end_src

#+RESULTS:
: control
** DONE Turn on garbage collection
CLOSED: [2022-12-28 Wed 18:13]
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package gcmh
  :diminish gcmh-mode
  :config
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
  (gcmh-mode 1))

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))


#+end_src
** Manage how new windows are placed
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (setq display-buffer-base-action
    '((display-buffer-reuse-window
       display-buffer-reuse-mode-window
       display-buffer-same-window
       display-buffer-in-previous-window)))
#+end_src

* Setup our package manager
** Define where we go for packages

** Straight.el
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:

** Setup use-package

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
;;Initalize use-package
(unless (package-installed-p 'use-package)
(package-install 'use-package))

(require 'use-package)
(require 'quelpa-use-package)

#+END_SRC

* Build the UI we want
** Install a better mode line

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-hud nil)
    (setq doom-modeline-minor-modes nil)
    (setq rc-doom-modeline-text-height 200)
    (setq doom-modeline-height 35)
    )
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

#+END_SRC
** Themes:
*** Setup Modus Themes

I like to do this even if I don't plan on the modus themes being my main theme of choice. I often swap themes, and this way they are ready when I want them.
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package modus-themes
  :ensure t
  :init
  (setq modus-themes-hl-line '(intense)
  modus-themes-subtle-line-numbers nil
  modus-themes-region '(no-extend bg-only)
  modus-themes-variable-pitch-ui nil
  modus-themes-fringes 'intense
  modus-themes-diffs nil
  modus-themes-italic-constructs t
  modus-themes-bold-constructs  t
  modus-themes-prompts '( bold intense italic)
  modus-themes-intense-mouseovers t
  modus-themes-paren-match '(bold intense)
  modus-themes-syntax '( yellow-comments)
  modus-themes-links '(neutral-underline background)
  modus-themes-mode-line '(moody borderless accented 4 1)
  modus-themes-headings
   '((1 . (variable-pitch 1.1 rainbow))
                         (2 . (regular))
                         (3 . (regular))
                         (4 . (regular))
                         (t . (rainbow)))
  modus-themes-org-blocks `gray-background
   ))




#+END_SRC

#+RESULTS:
: t
*** doom-themes
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package doom-themes
  :after mixed-pitch
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-1337 t)

    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src
*** Kaolin Themes
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package kaolin-themes
      :ensure t
      :config
      (setq kaolin-themes-modeline-border nil)
  )
#+end_src
*** Ef-themes
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package ef-themes
      :ensure t
      :init
      (setq ef-themes-headings
	    (quote ((1 . (variable-pitch 1.1))
		    (2 . (regular))
		    (3 . (regular))
		    (4 . (regular))))))
#+end_src
*** Set out theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (load-theme 'doom-acario-dark t)
#+end_src


** Setup our fonts
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
 (set-face-attribute 'default nil :family "Anonymice Nerd Font Mono" :height 220)

 ;; Proportionally spaced typeface
 (set-face-attribute 'variable-pitch nil :family "OpenDyslexicAlta NF" :height 1.0)

 ;; Monospaced typeface
 (set-face-attribute 'fixed-pitch nil :family "Comic Sans MS" :height 1.5)


 (if (facep 'mode-line-active)
     (set-face-attribute 'mode-line-active nil :family "Spleen 32x64" :height 200) ; For 29+
   (set-face-attribute 'mode-line nil :family "Spleen 32x64" :height 200))
(set-face-attribute 'mode-line-inactive nil :family "Anonymice Nerd Font Mono" :height 200)
#+END_SRC
** Update the help docs

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
(use-package helpful
  :ensure t)
(global-set-key (kbd "C-c C-d") #'helpful-at-point)
(global-set-key (kbd "C-h F") #'helpful-function)
(global-set-key (kbd "C-h C") #'helpful-command)
(setq counsel-describe-function-function #'helpful-callable)
(setq counsel-describe-variable-function #'helpful-variable)

#+END_SRC
** Popper.el - tame popups
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package popper
    :ensure t
    :bind (("C-`" . popper-toggle-latest) 
           ("M-`" . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Warnings\\*"
            "\\*Backtrace\\*"
            help-mode
            helpful-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1)
    )


  (defvar rcool/help-temp-buffers '("^\\*Help\\*$",
                                    "^\\*helpful command"))

  (while rcool/help-temp-buffers
    (add-to-list 'display-buffer-alist
                 `(,(car rcool/help-temp-buffers)
                   (display-buffer-in-side-window
                    (side . left)
                    (window-width . 50))))

    (setq rcool/help-temp-buffers (cdr rcool/help-temp-buffers)))
#+end_src

** Key bindings with general
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package general
    :ensure t
    :config
    (general-auto-unbind-keys)
    (general-evil-setup t))



  #+end_src

** Ace window
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package ace-window :defer t :ensure t)
#+end_src
** Diminish
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package diminish :ensure t)
#+end_src
** Bufler 
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package bufler
      :ensure t
      :config
      (setq bufler-filter-buffer-modes nil
           bufler-filter-buffer-name-regexps nil)
      (setf bufler-groups (bufler-defgroups
                           (group
                            ;; All named workspaces
                            (auto-workspace))
                           (group
                            ;; `help-mode' and `info-mode'
                            (group-or "*Help/Info*"
                                      (mode-match "*Help*" (rx bos "help-"))
                                      (mode-match "*Info*" (rx bos "info-"))))
                           (group
                            ;;special buffers (except magit)
                            (group-and "*Special*"
                                       (lambda (buffer)
                                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                                              buffer)
                                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                                              buffer)
                                                     (funcall (auto-file) buffer))
                                           "*Special*"))))
                           (group
                            ;;Special Special Buffers
                            (name-match "**Special**"
                                        (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
                           (group
                            ;; All other Magic buffers by directory
                            (mode-match "Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
                            (auto-directory))
                           ;; Remaining by directory then major mode
                           (auto-directory)
                           (auto-mode)))
      :general
      (:keymaps 'bufler-list-mode-map "Q" 'kill-this-buffer))
#+end_src

* Developer Interaction
This class of settings I think of as those that I need in order to work best with the editor.  How can I commicate. Plugins that affect how I communicate via keybindings, mouse, whatever should go here.
** Avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package avy :ensure t)
#+end_src

** Undo-fu
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package undo-fu :ensure t)
#+end_src
** flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package flycheck
  :ensure t
    :config
  (global-flycheck-mode))

  (use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)):
  
#+end_src



** Evil
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (defun modeline-face-color ()
    (let ((color (cond ((minibufferp) '("#1d1d1f" . "#ffffff"))
                       ((evil-insert-state-p) '("#331612" . "#ffffff"))
                       ((evil-emacs-state-p) '("#1a2b14" . "#ffffff"))
                       ((evil-visual-state-p) '("#5a5c21" . "#ffffff"))
                       ((evil-replace-state-p) '("#1a403e" . "#ffffff"))
                       ((evil-motion-state-p) '("#677691" . "#ffffff"))
                       ((buffer-modified-p) '("#2b1a40" . "#ffffff"))
                       (t '("#1d1d1f" . "#ffffff")))))
      (set-face-background 'mode-line (car color))
      (set-face-foreground 'mode-line (cdr color))))
  (use-package evil
    :ensure t
    :init
    (setq evil-want-fine-under t)
    (setq evil-want-keybinding nil)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-undo-system 'undo-fu)
    (setq evil-search-module 'evil-search)
    :config

    (evil-set-initial-state 'dashboard-mode 'motion)
    (evil-set-initial-state 'debugger-mode 'motion)
    (evil-set-initial-state 'pdf-view-mode 'motion)
    (evil-set-initial-state 'bufler-list-mode 'emacs)
    (evil-set-initial-state 'inferior-python-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'calc-mode 'emacs)
    (define-key evil-window-map "\C-q" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
    (define-key evil-window-map "\C-w" 'kill-this-buffer)
    (define-key evil-motion-state-map "\C-b" 'evil-scroll-up) ;; Makes C-b how C-u is
    (add-hook 'post-command-hook 'modeline-face-color)

    ;; ----- Setting cursor colors
    (setq evil-emacs-state-cursor    '("#649bce" box))
    (setq evil-normal-state-cursor   '("#d9a871" box))
    (setq evil-operator-state-cursor '("#ebcb8b" hollow))
    (setq evil-visual-state-cursor   '("#677691" box))
    (setq evil-insert-state-cursor   '("#eb998b" (bar . 2)))
    (setq evil-replace-state-cursor  '("#eb998b" hbar))
    (setq evil-motion-state-cursor   '("#ad8beb" box))
    (evil-mode +1))
  (use-package evil-collection
    :ensure t
    :after evil
  :diminish
    :config
    (setq evil-collection-mode-list '(dired (custom cus-edit) (package-menu package) calc diff-mode))
    (evil-collection-init))
#+END_SRC
*** evil-surround
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )
#+end_src
*** evil-exchange
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package evil-exchange
  :ensure t
    :config
  (evil-exchange-install)
  )

#+end_src
*** visual star
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package evil-visualstar
  :ensure t
    :config
  (global-evil-visualstar-mode 1))
#+end_src
*** evil dvorak
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package evil-dvorak :ensure t)
#+end_src
*** evil-escape
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none

    (use-package evil-escape
    :ensure t
    :straight (evil-escape :host github
    :repo "syl20bnr/evil-escape"
    :files (:defaults))
    :custom
    (setq-default evil-escape-key-sequence "jk")
    (setq-default evil-escape-key-delay 0.5))
#+end_src
*** Evil God
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
      (use-package evil-god-state
        :ensure t
      :straight (evil-god-state :host github
    :repo "gridaphobe/evil-god-state"
    :files (:defaults))
        :after evil
        :diminish evil-god-state
        :config
        (define-key evil-normal-state-map (kbd "'") 'evil-execute-in-god-state)
        (define-key evil-god-state-map (kbd "Esc") 'evil-god-state-bail)
        )
#+end_src

** Copilot
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
      (use-package copilot
        :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
        :ensure t
  :config
  (with-eval-after-load 'company
  (delq 'company-preview-if-just-one-frontend company-frontends))
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  )
#+end_src

#+RESULTS:
: t
** Yas Snippets 
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package yasnippet
   :ensure t
   :config
   (setq yas-snippet-dirs '("~/.doom.d/snippets"))
   (yas-global-mode 1))
#+END_SRC
** Which-key
 #+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el

   (use-package which-key
     :ensure t
     :init (which-key-mode)
     :diminish which-key-mode
     :config
   (setq which-key-idle-delay 0.01))
   #+end_src  
** Rainbow delim
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package rainbow-delimiters
   :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
** hydra
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package hydra :ensure t)
  (defhydra hydra-text-scale (:timeout 4)
            "scale text"
            ("j" text-scale-increase "in")
            ("k" text-scale-decrease "out")
            ("f" nil "finished" :exit t))
  #+end_src
** Quickrun
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package quickrun
    :defer t
    :ensure t
    :general
    (general-define-key
     :states 'normal
     :prefix "SPC"
     :keymaps 'quickrun--mode-map
     "cq" '(nill :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")"cq" '(nill :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")
 ))
#+end_src
** Install rainbow mode
This lets us see hex colors
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package rainbow-mode :ensure t :diminish)
  (define-globalized-minor-mode global-rainbow-mode rainbow-mode
    (lambda ()
      (when (not (memq major-mode
		       (list 'org-agenda-mode)))
	(rainbow-mode 1))))
  (global-rainbow-mode 1)
#+END_SRC

** Recent files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package recentf
               :ensure nil
               :config
               (setq recentf-max-saved-items 200)
               (setq recentf-filename-handlers
                     (append '(abbreviate-file-name) recentf-filename-handlers))
  (recentf-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package projectile
    :ensure t
  :diminish
    )

  (use-package counsel-projectile
    :ensure t
    :after projectile
  :diminish
    :init
    (counsel-projectile-mode +1)
    )

#+end_src

** Workspaces with perspective
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package perspective
    :ensure t
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
  (setq persp-initial-frame-name "Main")
  (unless (equal persp-mode t)
    (persp-mode)))
#+end_src

** Auto-revert changed files
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src


** Tramp
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
(setq tramp-default-method "ssh")
#+end_src

* Org-Mode and Family
** TODO Install org-mode (todo: Clean up and add comment)
Above is a function for all the "stuff" we want to do when org-mode starts. We attach that to a hook when org-mode starts. 
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package org
    :ensure t
    :hook (org-mode . rc/prettify-symbols-setup)
    :hook (org-capture-mode . evil-insert-state)
    :diminish org-indent-mode
    :diminish visual-line-mode
    :config

    ;; Visuals
    (setq org-src-fontify-natively t)
    (setq org-highlight-latex-and-related '(native))
    (setq org-startup-folded 'showeverything)
    (setq org-image-actual-width 300)
    (setq org-fonitfy-whole-heading-line t)

    ;; Interaction
    (setq org-cycle-separator-lines 1 )
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-scr-tab-acts-natively t)

    (setq org-M-RET-may-splitline '((headline) (item . t) (table .t) (default)))
    (setq org-loop-over-headlines-in-active-region nil)

    ;;Opens links to other org file in same frame
    (setq org-link-frame-setup '((file . find-file)))

    (setq org-log-done t
          org-log-into-drawer t)

    ;; Automatically change bullet type when indenting
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-scr-tab-acts-natively t)
    (setq org-M-RET-may-splitline '((headline) (item . t) (table .t) (default)))
    (setq org-loop-over-headlines-in-active-region nil)

    ;;Opens links to other org file in same frame
    (setq org-link-frame-setup '((file . find-file)))

    (setq org-log-done t
          org-log-into-drawer t)

    ;; Automatically change bullet type when indenting
    (setq org-list-demote-modify-bullet
          '(("+" . "*")("*" . "-")("-" . "+")))

    ;; Automatically save and close the org files i archive to
    (dolist (file '("todo-archive.org_archive"))
      (advice-add 'org-advice-subtree-default :after
                  (lambda () (rc/save-and-close-this-buffer file))))

    (setq org-list-demote-modify-bullet
          '(("+" . "*")("*" . "-")("-" . "+")))

    ;; Automatically save and close the org files i archive to
    (dolist (file '("todo-archive.org_archive"))
      (advice-add 'org-advice-subtree-default :after
                  (lambda () (rc/save-and-close-this-buffer file))))

#+END_SRC

**** Org part 2 -- tags
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(setq org-tags-column -1)
#+end_src


**** Todos
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(setq org-todo-keywords '((type
                           "TODO(t)" "WAITING(h)" "INPROG-TODO(i)" "WORK(w)"
                           "STUDY(s)" "SOMEDAY" "READ(r)" "PROJ(p)" "CONTACT(c)"
                           "|" "DONE(d)" "CANCELLED(C)")))

(setq org-todo-keyword-faces
      '(("TODO"  :inherit (region org-todo) :foreground "DarkOrange1"   :weight bold)
        ("WORK"  :inherit (org-todo region) :foreground "DarkOrange1"   :weight bold)
        ("READ"  :inherit (org-todo region) :foreground "MediumPurple3" :weight bold)
        ("PROJ"  :inherit (org-todo region) :foreground "orange3"     :weight bold)
        ("STUDY" :inherit (region org-todo) :foreground "plum3"       :weight bold)
        ("DONE" . "SeaGreen4")))
#+end_src

**** Priorities
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(setq org-lowest-priority ?F)  ;; Gives us priorities A through F
(setq org-default-priority ?E) ;; If an item has no priority, it is considered [#E].

(setq org-priority-faces
      '((65 . "red2")
        (66 . "Gold1")
        (67 . "Goldenrod2")
        (68 . "PaleTurquoise3")
        (69 . "DarkSlateGray4")
        (70 . "PaleTurquoise4")))
#+end_src

**** Babel
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (js . t)
     (lua . t)
     (sql . t)
     ))
  (setq python-shell-completion-native-enable nil)
  (setq org-src-window-setup 'current-window)

   (defun org-babel-execute:typescript (body params)
    (let ((org-babel-js-cmd "npx ts-node < "))
      (org-babel-execute:js body params)))

#+end_src

**** Agenda
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
; custom time stamp format. I don't use this.
(setq org-time-stamp-custom-formats '("<%A, %B %d, %Y" . "<%m/%d/%y %a %I:%M %p>"))

(setq org-agenda-restore-windows-after-quit t)

(setq org-agenda-window-setup 'current-window)

;; Only show upcoming deadlines for the next 5 days. By default it shows
;; 14 days into the future, which seems excessive.
(setq org-deadline-warning-days 5)
;; If something is done, don't show its deadline
(setq org-agenda-skip-deadline-if-done t)
;; If something is done, don't show when it's scheduled for
(setq org-agenda-skip-scheduled-if-done t)
;; If something is scheduled, don't tell me it is due soon
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)

;; use AM-PM and not 24-hour time
(setq org-agenda-timegrid-use-ampm 1)

;; A new day is 3am (I work late into the night)
(setq org-extend-today-until 3)

;; (setq org-agenda-time-grid '((daily today require-timed)
;;                              (1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200)
;;                              "        " "----------------"))

(setq org-agenda-time-grid nil)

(setq org-agenda-span 'day)

;; (setq org-agenda-block-separator ?-)
(setq org-agenda-current-time-string "<----------------- Now")

(setq org-agenda-scheduled-leaders '("Plan | " "Sched.%2dx: ") ; ⇛
      org-agenda-deadline-leaders '("Due: " "Due in %1d d. | " "Due %1d d. ago: "))

(setq org-agenda-prefix-format '((agenda . "  %-6:T %t%s")
                                 (todo . "  ")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))

(add-hook 'org-agenda-mode-hook
          #'(lambda () (setq-local line-spacing 4)))
#+end_src

**** Org-capture
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none

(setq org-outline-path-complete-in-steps nil) ; Refile in a single go
(setq org-refile-use-outline-path t)          ; Show full paths for refiling

;; By default an org-capture/refile will save a bookmark. This
;; disables that and keeps my bookmark list how I want it.


(setq org-capture-templates
'(
        ("w" "Work Todo Entries")
        ("we" "No Time" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title} %?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("ws" "Scheduled" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t%?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("wd" "Deadline" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nDEADLINE: %^t%?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("ww" "Scheduled & deadline" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t DEADLINE: %^t %?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

)
))
#+end_src


*** OrgMode keybindings
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
   (general-def
     :states 'normal
     :keymaps 'org-mode-map
     "t" 'org-todo
     "<return>" 'org-open-at-point-global
     "K" 'org-shiftup
     "J" 'org-shiftdown
     "`" 'org-ctrl-c-ctrl-c)
   (general-def
     :states 'insert
     :keymaps 'org-mode-map
     "C-o" 'evil-org-open-above)

   (general-def
     :keymaps 'org-mode-map
     "M-[" 'org-metaleft
     "M-]" 'org-metaright
     "s-r" 'org-refile
     "M-k" 'org-insert-link
     )

   ;; Org src for editing a source block
   (general-def
     :prefix ","
     :states 'normal
     :keymaps 'org-src-mode-map

     "b" '(nill :which-key "org src")
     "bb" 'org-edit-src-exit
     "bc" 'org-edit-src-abort)
#+end_src
*** Org mode comma key setup
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-mode-map)
   "" nil
 
   "A" '(org-archive-subtree-default :which-key "org-archive")
   "a" '(org-agenda :which-key "org agenda")
   "6" '(org-sort :which-key "sort")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-schedule :which-key "schedule")
   "S" '(jib/org-schedule-tomorrow :which-key "schedule tmrw")
   "d" '(org-deadline :which-key "deadline")
   "g" '(counsel-org-goto :which-key "goto heading")
   "t" '(counsel-org-tag :which-key "set tags")
   "p" '(org-set-property :which-key "set property")
   "r" '(jib/org-refile-this-file :which-key "refile in file")
   "e" '(org-export-dispatch :which-key "export org")
   "B" '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")
   "," '(jib/org-set-startup-visibility :which-key "startup visibility")
   "H" '(org-html-convert-region-to-html :which-key "convert region to html")
   "C" '(jib/org-copy-link-to-clipboard :which-key "copy link to clipboard")
   "1" '(org-toggle-link-display :which-key "toggle link display")
   "2" '(org-toggle-inline-images :which-key "toggle images")
   "3" '(jib/org-occur-unchecked-boxes :which-key "occur unchecked boxes")

   "b" '(nil :which-key "babel")
   "bt" '(org-babel-tangle :which-key "org-babel-tangle")
   "bb" '(org-edit-special :which-key "org-edit-special")
   "bc" '(org-edit-src-abort :which-key "org-edit-src-abort")
   "bk" '(org-babel-remove-result-one-or-many :which-key "org-babel-remove-result-one-or-many")


   ;; insert
   "i" '(nil :which-key "insert")


   "il" '(org-insert-link :which-key "org-insert-link")
   "l" '(org-insert-link :which-key "org-insert-link") ;; More convenient access
   "iL" '(counsel-org-link :which-key "counsel-org-link")
   "it" '(jb-hydra-org-table/body :which-key "tables")

   "is" '(nil :which-key "insert stamp")
   "iss" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key "org-time-stamp-inactive")
   "isS" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key "org-time-stamp")

   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-clock-in :which-key "clock in")
   "co" '(org-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )


  ;; Org-agenda
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
   "" nil
   "a" '(org-agenda :which-key "org agenda")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-agenda-schedule :which-key "schedule")
   "d" '(org-agenda-deadline :which-key "deadline")
   "t" '(org-agenda-set-tags :which-key "set tags")
   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-agenda-clock-in :which-key "clock in")
   "co" '(org-agenda-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )

  (evil-define-key 'motion org-agenda-mode-map
    (kbd "f") 'org-agenda-later
    (kbd "b") 'org-agenda-earlier)
#+end_src

#+RESULTS:
**** Evil org
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (fset 'evil-redirect-digit-argument 'ignore) ;; before evil-org loaded
    (use-package evil-org
      :ensure t
      :diminish evil-org-mode
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook'
                (lambda () (evil-org-set-key-theme))))

    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
#+end_src
** Auto :results none :tangle org files
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package org-auto-tangle
    :ensure t
    :defer t
  :diminish
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t))
  #+end_src
** Org-projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  ;; (use-package org-category-capture :ensure t)
  ;; (use-package org-projectile
  ;;   :after org org-category-capture
  ;;   :config
  ;;   (progn
  ;;     (setq org-projectile-projects-file
  ;;           "~/org/projects.org"
  ;;           org-projectile-capture-template
  ;;           ("* TODO %?\n %i\n %a")
  ;;           )
  ;;     (add-to-list 'org-capture-templates
  ;;                  (org-projectile-project-todo-entry
  ;;                   :capture-character "l"
  ;;                   :capture-heading "Linked Project TODO"))
  ;;     (add-to-list 'org-capture-templates
  ;;                  (org-projectile-project-todo-entry
  ;;                   :capture-character "p"))

  ;;     (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  ;;     (push (org-projectile-project-todo-entry) org-capture-templates))
  ;;   :ensure t

  ;;   )

#+end_src

* Languages
** STUDY Tree-sitter
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (add-to-list 'tree-sitter-major-mode-language-alist '(tex-mode . tsx))
  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
  #+end_src

** LSP via EGlOT
This seems like its the paved path, but I'm unsure.
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
(use-package eglot :ensure t)
#+end_src
** LSP via lsp-mode
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :commands (lsp lsp-deferred)
  ;;   :hook (
  ;;          (lua-mode . #'lsp))
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   (setq lsp-modeline-code-actions-segments t)
  ;;   :config
  ;;   (with-eval-after-load 'lsp-mode
  ;;     (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)))


#+end_src
*** TEXmode
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
    (use-package tsx-mode
      :ensure t
      :straight '(tsx-mode
                  :type git :host github
                  :repo "orzechowskid/tsx-mode.el"
                  :branch "emacs29")

      :hook (tsx-mode . #'lsp)
      :init
      (add-to-list 'auto-mode-alist '("\\.[jt]sx?\\'" . tsx-mode))

      :general
      (general-def
        :prefix ","
        :states 'motion
        :keymaps 'general-override-mode-map
        "" nil

        "z" '(tsx-mode-fold-toggle-all-nodes :which-key "Toggle Fold all nodes")
        "c" '(tsx-mode-coverage-toggle :which-key "Toggle Coverage")
        "tab" '(tsx-mode-fold-toggle-node :which-key "Toggle Fold here")
        ))


    (use-package coverlay
      :ensure t
      :straight '(coverlay :type git
                           :host github :repo "twada/coverlay.el"))
    (use-package css-in-js-mode
      :ensure t :straight '(css-in-js-mode :type git :host github :repo "orzechowskid/tree-sitter-css-in-js"))
    (use-package origami :ensure t
      :straight '(origamd
                  :type git
                  :host github
                  :repo "gregsexton/origami.el"))


    (use-package corfu
      :ensure t
      :straight (corfu :host github :repo "minad/corfu")
     :custom
     (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
     (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
     (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
     (corfu-preview-current t)    ;; Disable current candidate preview
     (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
     :hook ((prog-mode . corfu-mode)
            (shell-mode . corfu-mode)
            (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
                                       #+END_SRC
                                       
*** TSI.el
=tsi.el= provides a tree-sitter powered set of indentation rules for ts, json, and css files
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package tsi
  :ensure t
        :after tree-sitter
        :quelpa (tsi :fetcher github :repo "orzechowskid/tsi.el")
        ;; define autoload definitions which when actually invoked will cause package to be loaded
        :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
        :init
        (add-hook 'tsx-mode-hook (lambda () (tsi-typescript-mode 1)))
        (add-hook 'js-mode-hook (lambda () (tsi-typescript-mode 1)))
        (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
        (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
        (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))
#+end_src

#+RESULTS:
| lambda  | nil | (tsi-scss-mode 1) |                   |
| closure | (t) | nil               | (tsi-scss-mode 1) |

*** Formatting on Save
We use =apheleia= to handle our formatting. This packages can do many different languages so including it here will
benefit others as well.

#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package apheleia
    :ensure t
  :diminish
    :config
    (apheleia-global-mode +1))
 #+end_src

** Simple Lua
*** Enable =lua-mode=

#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el :results none 
  (use-package lua-mode
    :ensure t
    :after (tree-sitter lsp-mode)
  :init
    (add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
  )
#+END_SRC

* Completion
** Install Company Mode
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el :results none 
  ;; (use-package company
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :hook (prog-mode . company-mode)
  ;;   :bind (:map company-active-map
  ;;               ("<tab>" . company-complete-selection))
  ;;   (:map lsp-mode-map
  ;;         ("<tab>" . company-indent-or-complete-common))
  ;;   :custom
  ;;   (company-minimum-prefix-length 1)
  ;;   (company-idle-delay 0.0))

  #+end_src
** Consult
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
   (autoload 'projectile-project-root "projectile")
   (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
)
#+end_src
** Consult-dir
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package consult-dir
    :ensure t
  :straight (consult-dir :host github :repo "karthink/consult-dir")
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))
#+end_src
** Consult-flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none

          (use-package consult-flycheck
          :ensure t
        :straight (
  consult-flycheck
    :host github
  :repo
  "minad/consult-flycheck"
    ))
#+end_src
** Consult-eglot
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
     (use-package consult-eglot :ensure t
       :straight  (consult-eglot
       :host github
  :repo "mohkale/consult-eglot"))
#+end_src
** Consult-projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
         (use-package consult-projectile :ensure t
        :straight
       (consult-projectile
      :type git :host gitlab
    :repo "OlMon/consult-projectile"
  :branch "master"))


#+end_src
** Consult-yasnippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package consult-yasnippet :ensure t)
#+end_src
** wgrep
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package wgrep :ensure t)
#+end_src
** marinalia
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    ;; Enable rich annotations using the Marginalia package
    (use-package marginalia
      ;; Either bind `marginalia-cycle' globally or only in the minibuffer
      :bind (("M-A" . marginalia-cycle)
             :map minibuffer-local-map
             ("M-A" . marginalia-cycle))

      ;; The :init configuration is always executed (Not lazy!)
      :init
  :general
  (general-define-key
    :states 'normal
  :keymap 'override
  "?" 'marginalia-cyle)
      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
#+end_src

** Veritco
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** vertico directory
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

#+end_src

** Orderless
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package orderless :ensure t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(substring orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Vertico quick
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package quick :ensure nill)
#+end_src
** Embark
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (use-package embark
      :ensure t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t ; only need to install it, embark loads it after consult if found
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+end_src



** Add LSP UI
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  
  ;;     :hook ((lsp-mode . lsp-ui-mode)
  ;; (lsp-mode . lsp-ui-sideline-mode))
  ;;     :config
  ;; (setq lsp-ui-sideline-show-hover t)
  ;;   (setq lsp-ui-doc-position 'top))
#+end_src 

** Treemacs
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-position 'right
          width 50))
#+end_src


*** LSP Treemacs
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; (use-package lsp-treemacs
  ;;   :ensure t
  
#+end_src


*** Treemacs-evil
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package treemacs-evil
    :ensure t
    :config
    )

#+end_src


*** Treemacs-projectile
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package treemacs-projectile
    :ensure t
    )

#+end_src



*** treemacs-magit
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package treemacs-magit
    :ensure t
    )

#+end_src


*** treemacs-icons-dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package treemacs-icons-dired :ensure t)
#+end_src


*** treemacs-perspective
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package treemacs-perspective :ensure t)
#+end_src


*** treemacs-all-the-icons
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(use-package treemacs-all-the-icons :ensure t)
#+end_src



** Ivy
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el

  ;; (use-package ivy
  ;;   :ensure t
  ;;   :diminish 
  ;;   :config
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq ivy-count-format "(%d/%d) ")
  ;;   (ivy-mode 1)
  ;;   )
  #+end_src
** Prescient
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  ;;     (use-package prescient
  ;;   :after counsel
  ;;     :ensure t)
  ;; (use-package ivy-prescient :ensure t
  ;;   :config
  ;; (ivy-prescient-mode))
  
#+end_src

** Faster Symbol searches
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; (use-package lsp-ivy
  ;;   :ensure t)
#+end_src


** Ivy Rich
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el

  ;; (use-package ivy-rich
  ;;   :ensure t
  ;;   :init
  ;;   (ivy-rich-mode 1)
  ;;  :config
  ;;  (setq ivy-format-function #'ivy-format-function-line)
  ;;  (setq ivy-rich-display-transformers-list
  ;;        (plist-put ivy-rich-display-transformers-list
  ;;                   'ivy-switch-buffer
  ;;                   '(:columns
  ;;                     ((ivy-rich-candidate (:width 40))
  ;;                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
  ;;                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
  ;;                      (ivy-rich-switch-buffer-project (:width 15 :face success))
  ;;                      (ivy-rich-switch-buffer-path (:width (lambda(x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
  ;;                     :predicate
  ;;                     (lambda (cand)
  ;;                       (if-let ((buffer (get-buffer cand)))
  ;;                           (with-current-buffer buffer
  ;;                             (not (derived-mode-p 'exwm-mode)))))))))
  #+end_src
** Ivy posframe
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  ;; (use-package ivy-posframe
  ;;   :ensure t
  ;;   :config
  ;;   (setq ivy-posframe-display-functions-alist
  ;;         '((swiper          . ivy-posframe-display-at-point)
  ;;           (complete-symbol . ivy-posframe-display-at-point)
  ;;           (counsel-M-x . ivy-display-function-fallback)
  ;;           (counsel-esh-history . ivy-posframe-display-at-window-center)
  ;;           (counsel-describe-function . ivy-display-function-fallback)
  ;;           (counsel-describe-variable . ivy-display-function-fallback)
  ;;           (counsel-find-file . ivy-posframe-display-at-window-center)
  ;;           (counsel-recentf . ivy-posframe-display-at-window-center)
  ;;           (counsel-register . ivy-posframe-display-at-frame-bottom-window-center)
  ;;           (dmenu . ivy-posframe-display-at-frame-top-center)
  ;;           (nil . ivy-posframe-display))
  ;;         ivy-posframe-height-alist
  ;;         '((swiper . 20)
  ;;           (dmenu . 20)
  ;;           (t . 10)))
  ;;   (ivy-posframe-mode +1)
  ;;   )
#+end_src


* Magit

#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
    (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  #+end_src


* Editing Configuration
** Tab Widths
Default to an indentation size of 2
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src

** Spaces not tabs
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (setq-default indent-tabs-mode nil)
#+end_src

** Comments:
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (use-package evil-nerd-commenter
    :ensure t
    :bind
    ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Mixed Pitch
A better verson of variable pitch.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package mixed-pitch
    :ensure t
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face '(org-date org-priority org-tag org-special-keyword))
      (add-to-list 'mixed-pitch-fixed-pitch-faces face))
   )
#+end_src

* Hydra
** Fonts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (defhydra rc-hydra-variable-fonts (:pre (mixed-pitch-mode 0)
                                          :post (mixed-pitch-mode 1))
    ("t" (set-face-attribute 'variable-pitch nil :family "Tinos" :height 160)             "Tinos")
    ("g" (set-face-attribute 'variable-pitch nil :family "EB Garamond" :height 160 :weight 'normal)             "EB Garamond")
    ("n" (set-face-attribute 'variable-pitch nil :family "Nunito" :slant 'normal :weight 'normal :height 160) "Nunito")
    ("s" (set-face-attribute 'variable-pitch nil :family "Spleen 32x64" :slant 'normal :weight 'normal :height 160) "Spleen")
    ("c" (set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :slant 'normal :weight 'normal :height 160) "Source Sans Pro")
  )
#+end_src
** Dired
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
      (defhydra hydra-dired (:hint nil :color pink)
        "
      _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
      _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
      _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
      _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
      _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
      _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
      _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
      _z_ compress-file  _A_ find regexp
      _Z_ compress       _Q_ repl regexp

      T - tag prefix
      "
        ("\\" dired-do-ispell)
        ("(" dired-hide-details-mode)
        (")" dired-omit-mode)
        ("+" dired-create-directory)
        ("=" diredp-ediff)         ;; smart diff
        ("?" dired-summary)
        ("$" diredp-hide-subdir-nomove)
        ("A" dired-do-find-regexp)
        ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
        ("E" dired-mark-extension)
        ("e" dired-ediff-files)
        ("F" dired-do-find-marked-files)
        ("G" dired-do-chgrp)
        ("g" revert-buffer)        ;; read all directories again (refresh)
        ("i" dired-maybe-insert-subdir)
        ("l" dired-do-redisplay)   ;; relist the marked or singel directory
        ("M" dired-do-chmod)
        ("m" dired-mark)
        ("O" dired-display-file)
        ("o" dired-find-file-other-window)
        ("Q" dired-do-find-regexp-and-replace)
        ("R" dired-do-rename)
        ("r" dired-do-rsynch)
        ("S" dired-do-symlink)
        ("s" dired-sort-toggle-or-edit)
        ("t" dired-toggle-marks)
        ("U" dired-unmark-all-marks)
        ("u" dired-unmark)
        ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
        ("w" dired-kill-subdir)
        ("Y" dired-do-relsymlink)
        ("z" diredp-compress-this-file)
        ("Z" dired-do-compress)
        ("q" nil)
        ("." nil :color blue))

      (define-key dired-mode-map "." 'hydra-dired/body)
#+end_src

** Theme swticher
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
           (defhydra rc-hydra-theme-switcher (:hint nil)
             "
              Dark                ^Light^
         ----------------------------------------------
         _1_ one              _z_ one-light 
         _2_ vivendi          _x_ operandi
         _3_ molokai          _c_ ef-trio-light
         _4_ snazzy          MORE DARK BELOW
         _5_ old-hope         _v_     ef-dark
         _6_ henna            _b_     doom-dark+  
         _7_ kaolin-galaxy    _n_     iosevkm     
         _8_ monokai-machine  _m_     vibrant              
         _9_ xcode                ^
         _0_ moonlight            ^
         _-_ laserwave            ^    
         _q_ quit                 ^
         ^                        ^
           "
             ;; Dark
             ("1" (load-theme 'doom-one t)             "one")
             ("2" (load-theme 'modus-vivendi t)             "modus-vivendi")
             ("3" (load-theme 'doom-molokai t)             "molokai")
             ("4" (load-theme 'doom-snazzy t )             "snazzy")
             ("5" (load-theme 'doom-old-hope t)             "old hope")
             ("6" (load-theme 'doom-henna t)             "henna")
             ("7" (load-theme 'kaolin-galaxy t)             "jaolin-galaxy")
             ("8" (load-theme 'doom-monokai-machine t)             "monokai-machine")
             ("9" (load-theme 'doom-xcode t)             "xcode")
             ("0" (load-theme 'doom-moonlight t)             "moonlight")
             ("-" (load-theme 'doom-laserwave t)             "laserwave")
             ("z" (load-theme 'doom-one-light t)
              "one-light")
             ("x" (load-theme 'modus-operandi t)             "operand")
  ("c" (load-theme 'ef-trio-light t)             "ef-trio-light")
  ("v" (load-theme 'ef-dark t)             "ef-dark")
  ("b" (load-theme 'doom-dark+ t)             "doom-dark+")
  ("n" (load-theme 'doom-Iosvkem t)             "Iosvkem")
  ("m" (load-theme 'doom-vibrant t)             "vibrant")
   ("q" nil)

             )



#+end_src
** window commands
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
    (defhydra rc-hydra-window (:hint nil)
     "
  Movement      ^Split^            ^Switch^        ^Resize^
  ----------------------------------------------------------------
  _M-<left>_  <   _s_ vertical      _b_uffer        _<left>_  <
  _M-<right>_ >   _v_ horizontal    _f_ind file     _<down>_  ↓
  _M-<up>_    ↑   _m_aximize        _x_wap          _<up>_    ↑
  _M-<down>_  ↓   _c_lose           _[_backward     _<right>_ >
  _q_uit          _e_qualize        _]_forward     ^
  ^               ^               _K_ill         ^
  ^               ^                  ^             ^
  "
     ;; Movement
     ("M-<left>" windmove-left)
     ("M-<down>" windmove-down)
     ("M-<up>" windmove-up)
     ("M-<right>" windmove-right)

     ;; Split/manage
     ("s" rc/split-window-vertically-and-switch)
     ("v" rc/split-window-horizontally-and-switch)
     ("c" evil-window-delete)
     ("d" evil-window-delete)
     ("m" delete-other-windows)
     ("e" balance-windows)

     ;; Switch
     ("b" consult-switch-buffer)
     ("f" consult-find)
     ("P" project-find-file)
     ("x" ace-swap-window)
     ("[" previous-buffer)
     ("]" next-buffer)
     ("K" kill-this-buffer)

     ;; Resize
     ("<left>" windresize-left)
     ("<right>" windresize-right)
     ("<down>" windresize-down)
     ("<up>" windresize-up)

     ("q" nil))
#+END_SRC
** Flycheck
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (defhydra hydra-flycheck
     (:pre (flycheck-list-errors)
      :post (quit-windows-on "*Flycheck errors*")
      :hint nil)
   "Errors"
   ("f" flycheck-error-list-set-filter "Filter")
   
   ("j" flycheck-next-error "Next")
   ("k" flycheck-previous-error "Previous")
   ("gg" flycheck-first-error "First")
   ("G" (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
   ("q" nil)) 
#+end_src
** Org
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
        ;; Hydra for org agenda (graciously taken from Spacemacs)
        (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                         :post (setq which-key-inhibit nil)
                                         :hint none)
          "
        Org agenda (_q_uit)

        ^Clock^      ^Visit entry^              ^Date^             ^Other^
        ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
        _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
        _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
        _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
        _cj_ jump    _o_   link                 _+_  do later      ^^
        ^^           ^^                         _-_  do earlier    ^^
        ^^           ^^                         ^^                 ^^
        ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
        ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
        _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
    :keymaps 'override
  _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
        _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
        _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
        _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
        _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
        _vp_ prev span  ^^                       ^^                 ^^
        _vr_ reset      ^^                       ^^                 ^^
        ^^              ^^                       ^^                 ^^
        "
          ;; Entry
          ("hA" org-agenda-archive-default)
          ("hk" org-agenda-kill)
          ("hp" org-agenda-priority)
          ("hr" org-agenda-refile)
          ("h:" org-agenda-set-tags)
          ("ht" org-agenda-todo)
          ;; Visit entry
          ("o"   link-hint-open-link :exit t)
          ("<tab>" org-agenda-goto :exit t)
          ("TAB" org-agenda-goto :exit t)
          ("SPC" org-agenda-show-and-scroll-up)
          ("RET" org-agenda-switch-to :exit t)
          ;; Date
          ("dt" org-agenda-date-prompt)
          ("dd" org-agenda-deadline)
          ("+" org-agenda-do-date-later)
          ("-" org-agenda-do-date-earlier)
          ("ds" org-agenda-schedule)
          ;; View
          ("vd" org-agenda-day-view)
          ("vw" org-agenda-week-view)
          ("vt" org-agenda-fortnight-view)
          ("vm" org-agenda-month-view)
          ("vy" org-agenda-year-view)
          ("vn" org-agenda-later)
          ("vp" org-agenda-earlier)
          ("vr" org-agenda-reset-view)
          ;; Toggle mode
          ("ta" org-agenda-archives-mode)
          ("tA" (org-agenda-archives-mode 'files))
          ("tr" org-agenda-clockreport-mode)
          ("tf" org-agenda-follow-mode)
          ("tl" org-agenda-log-mode)
          ("td" org-agenda-toggle-diary)
          ;; Filter
          ("fc" org-agenda-filter-by-category)
          ("fx" org-agenda-filter-by-regexp)
          ("ft" org-agenda-filter-by-tag)
          ("fr" org-agenda-filter-by-tag-refine)
          ("fh" org-agenda-filter-by-top-headline)
          ("fd" org-agenda-filter-remove-all)
          ;; Clock
          ("cq" org-agenda-clock-cancel)
          ("cj" org-agenda-clock-goto :exit t)
          ("ci" org-agenda-clock-in :exit t)
          ("co" org-agenda-clock-out)
          ;; Other
          ("q" nil :exit t)
          ("gd" org-agenda-goto-date)
          ("." org-agenda-goto-today)
          ("gr" org-agenda-redo))
#+end_src
** Avy
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
      (defhydra hydra-avy (:exit t :hint nil)
        "
       Line^^       Region^^        Goto
      ----------------------------------------------------------
       [_y_] yank   [_Y_] yank      [_c_] timed char  [_C_] char
       [_m_] move   [_M_] move      [_w_] word        [_W_] any word
       [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
        ("c" avy-goto-char-timer)
        ("C" avy-goto-char)
        ("w" avy-goto-word-1)
        ("W" avy-goto-word-0)
        ("l" avy-goto-line)
        ("L" avy-goto-end-of-line)
        ("m" avy-move-line)
        ("M" avy-move-region)
  ("k" avy-kill-whole-line)
        ("K" avy-kill-region)
        ("y" avy-copy-line)
        ("Y" avy-copy-region))

#+end_src
** YasNippet
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(defhydra hydra-yasnippet (:color blue :hint nil)
  "
              ^YASnippets^
--------------------------------------------
  Modes:    Load/Visit:    Actions:

 _g_lobal  _d_irectory    _i_nsert
 _m_inor   _f_ile         _t_ryout
 _e_xtra   _l_ist         _n_ew
         _a_ll
"
  ("d" yas-load-directory)
  ("e" yas-activate-extra-mode)
  ("i" yas-insert-snippet)
  ("f" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet)
  ("t" yas-tryout-snippet)
  ("l" yas-describe-tables)
  ("g" yas/global-mode)
  ("m" yas/minor-mode)
  ("a" yas-reload-all))
#+end_src


* Keybinds
** Preamble
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
general-define-key
   :states '(normal motion visual)
   :keymaps 'override
   :prefix "SPC"

   ;; Top level functions
   "/" '(rc/rg :which-key "RipGrep")
   "SPC" '(M-x :which-key "M-x")
   "q" '(popper-kill-latest-popup :which-key "kill popup")
   "X" '(org-capture :which-key "Capture")
#+END_SRC
** Files
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  "f" '(nil :which-key "Files")
  "fd" '(consult-dir :which-key "Find directory")
  "ff" '(consult-find :which-key "Find file")
  "fl" '(consult-locate :which-key "Locate")
  "fr" '(consult-recent-files :which-key "Recent Files")
  "fs" '(save :which-key "Save")

#+end_src


** Buffers
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Buffers
  "b" '(nil :which-key "Buffer")
  "bb" '(consult-project-buffer :which-key "Switch buffer")
  "bd" '(evil-delete-buffer :which-key "Delete buffer")
  "bm" '(rc/kill-other-buffers :which-key "Kill other buffers")
  "bi" '(ibuffer :which-key "iBuffer")
  "br" '(revert-buffer :which-key "Revert buffer")
  "bn" '(next-buffer :which-key "Next")
  "bp" '(previous-buffer :which-key "Prev")


#+END_SRC

** Code
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
        ;; lCode

        "c" '(nil :which-key "Code")
        "cd" '(lsp-ui-peek-find-definitions :which-key "Definition")
  "cR" '(lsp-ui-peek-find-references :which-key "References")
        "ca" '(lsp-execute-code-action :which-key "Code action")
        "ci" '(lsp-ui-peek-find-implementation :which-key "Implementations")
        "cD" '(lsp-goto-type-definition :which-key "Type Def.")
        "cc" '(lsp-treemacs-call-hierarchy :which-key "Call hierarchy")
        "ct" '(lsp-treemacs-type-hierarchy :which-key "Type hierarchy")
        "cs" '(lsp-treemacs-symbols :which-key "Symbol Hierarchy")
        "cT" '(lsp-treemacs-tree :which-key "Tree")
        "ce" '(nil :which-key "Errors")
        "cek" '(flycheck-previous-error :which-key "Prev Error")
        "cej" '(flycheck-next-error :which-key "Next Error")
        "ceg" '(flycheck-first-error :which-key "First Error")
        "cef" '(flycheck-error-list-set-filter :which-key "Filter")
        "ceG" '((progn (goto-char (point-max)) (flycheck-previour-error)) :which-key "Last Error")
        "cel" '(consult-flycheck :which-key "Error List")
        "cee" '(flycheck-explain-error-at-point :which-key "Explain error")

        "cf" '(nil :which-key "Format")
        "cfl" '(lsp-format-buffer :which-key "LSP format Buffer")
        "cfa" '(apheleia-format-buffer :which-key "Apheleia Format")
        "cfr" '(lsp-format-region :which-key "LSP Format Region")
        "cft" '(lsp-on-type-formatting :which-key "Toggle On Type Formatting")
#+END_SRC

** Bookmarks
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  "m" '(nil :which-key "Bookmarks")
  "ma" '(bookmark-set  :which-key "Set a bookmark")
  "mj" '(bookmark-jump-other-window :which-key "Jump to bookmark")
  "mJ" '(bookmark-jump :which-key "Jump Here")
  "mb" '(consult-bookmark :which-key "Set or Jump")
  
#+end_src

** Files
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
       ;;Files.
       "f" '(nil :which-key "files")
       "fb" '(consult-bookmark :which-key "bookmarks")
       "ff" '(consult-find :which-key "find file")
       "fr" '(consult-recent-file :which-key "recent files")
       "fR" '(rename-file :which-key "rename file")
       "fs" '(save-buffer :which-key "save buffer")
       "fS" '(evil-write-all :which-key "save all buffers")
#+END_SRC

** Projects
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  "p" '(nil :which-key "Projects")
  "pp" '(consult-projectile :which-key "Switch Project")
  "pg" '(consult-rg :which-key "RipGrep")
#+end_src

** Hydra
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Hydras
  "H" '(nil :which-key "Hydras")
  "Hs" '(hydra-text-scale/body :which-key "Scale text")
  "Ht" '(rc-hydra-theme-switcher/body :which-key "themes")
  "Hf" '(rc-hydra-variable-fonts/body :which-key "mixed-pitch face")
  "Hw" '(rc-hydra-window/body :which-key "Window Control")
  "Hd" '(hydra-dired/body :which-key "Dired")
  "He" '(hydra-flycheck/body :which-key "Diagnostics")
  "Ho" '(hydra-org-agenda/body :which-key "Org Agenda")
  "Ha" '(hydra-avy/body :which-key "Avy")
  "Hy" '(hydra-yasnippet :which-key "YASnippet")
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
    ;; Help/emacs
    "h" '(nil :which-key "help/emacs")

    "hv" '(helpful-variable :which-key "des. variable")
    "hb" '(describe-bindings :which-key "des. bindings")
    "hM" '(describe-mode :which-key "des. mode")
    "hf" '(helpful-function :which-key "des. func")
    "hF" '(describe-face :which-key "des. face")
    "hk" '(helpful-key :which-key "des. key")
  
    "hed" '((lambda () (interactive) (jump-to-register 67)) :which-key "edit dotfile")

    "hm" '(nil :which-key "switch mode")
    "hme" '(elisp-mode :which-key "elisp mode")
    "hmo" '(org-mode :which-key "org mode")
    "hmt" '(text-mode :which-key "text mode")

    "hp" '(nil :which-key "packages")
    "hpr" 'package-refresh-contents
    "hpi" 'package-install
    "hpd" 'package-delete

#+END_SRC

** Window
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el

  ;; Windows
         "w" '(nil :which-key "window")
         "wm" '(rc/toggle-maximize-buffer :which-key "maximize buffer")
         "wN" '(make-frame :which-key "make frame")
         "wd" '(evil-window-delete :which-key "delete window")
         "ws" '(rc/split-window-vertically-and-switch :which-key "split below")
         "wv" '(rc/split-window-horizontally-and-switch :which-key "split right")
         "wr" '(rc-hydra-window/body :which-key "hydra window")
         "wl" '(evil-window-right :which-key "evil-window-right")
         "wh" '(evil-window-left :which-key "evil-window-left")
         "wj" '(evil-window-down :which-key "evil-window-down")
         "wk" '(evil-window-up :which-key "evil-window-up")
  "wz" '(text-scale-adjust :which-key "text zoom")
  "wu" '(winner-undo :which-key "Winnder undo")
  "wU" '(winner-redo :which-key "Winner Redo")
#+END_SRC
** Registers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  "r" '(nil :which-key "Registers")
  "rc" '(copy-to-register :which-key "Copy to Register")
  "rf" '(frameset-to-register :which-key "Frameset to register")
  "ri" '(insert-register :which-key "Insert contents of register")
  "rj" '(jump-to-register :which-key "Jump to")
  "rl" '(list-registers :which-key "List registers")
  "rn" '(number-to-register :which-key "Number to register")
  "rr" '(consult-register :which-key "Choose a register")
  "rv" '(view-register :which-key "View register")
  "rw" '(window-configuration-to-register :which-key "Window config to register")
  "r+" '(increment-register :which-key "Increment register")
  "r " '(point-to-register :which-key "Point to Register")
  "rs" '(consult-register-store :which-key "Store")
#+end_src
** Workspaces
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  "s" '(nil :which-key "Work[s]paces")
  "ss" '(persp-switch :which-key "Switch")
  "sn" '(persp-switch-by-number :which-key "Swich By #")
  "sk" '(persp-remove-buffer :which-key "Remove Buffer")
  "sd" '(persp-kill :which-key "Delete workspace")
  "sr" '(persp-rename :which-key "Rename")
  "sa" '(persp-add-buffer :which-key "Add a buffer")
  "sc" '(persp-set-buffer :which-key "Claim buffer for perspective")
  "sb" '(persp-switch-to-buffer :which-key "Switch to buffer (in any perspective)")
  "sS" '(persp-state-save :which-key "Save")
  "sL" '(persp-state-load :which-key "Load")
#+end_src


** Toggles
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.emacs.d/init.el
  ;; Toggles
  "t" '(nil :which-key "toggles")
  "tm" '(modus-themes-toggle :which-key "Modus Themes")
  "ta" '(term-toggle-ansi :which-key "Ansi Term")
  "tA" '(ansi-term :which-key "Ansi Term (HERE)")
  "tt" '(term-toggle-term :which-key "Term")
  "tT" '(term :which-key "Term (HERE)")
  "te" '(term-toggle-eshell :which-key "Eshell")
  "tE" '(eshell :which-key "Eshell (HERE)")
  "td" '(dired :which-key "Dired")
  "tp" '(treemacs :which-key "Treemacs")
  ) ;; End SPC prefix block
#+end_src

#+RESULTS:

** DONE Global keybinds
CLOSED: [2022-12-29 Thu 06:28]
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (general-def
    :keymaps 'override

    ;; Emacs
    "M-x" 'counsel-M-x
    )
  (general-def
    :keymaps 'override
    :states '(normal motion)
    "K" 'lsp-ui-doc-show
    "Q" 'popper-kill-latest-popup
  )
#+end_src

#+RESULTS:

** Non-insert mode bindings
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el
  (general-def
    :states '(normal visual motion)
    "gc" 'comment-dwim
    "gC" 'comment-line
    "u" 'undo-fu-only-undo
    "U" 'undo-fu-only-redo
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line
    "f" 'evil-avy-goto-char-in-line
    )

  (general-def
    :states '(normal visual motion)
    :keymaps 'override
    "s" 'swiper)

  (general-def
    :states '(insert)
    "C-a" 'evil-beginning-of-visual-line
    "C-e" 'evil-end-of-visual-line
    "C-S-a" 'evil-beginning-of-line
    "C-S-e" 'evil-end-of-line
    "C-n" 'evil-next-visual-line
    "C-p" 'evil-previous-visual-line
    "TAB" 'yas-expand 

    )
#+end_src

#+RESULTS:

* TODO ADD:
** TODO open commonly used thigns
** TODO registers for common files


* Languages
** Web mode
#+begin_src emacs-lisp :results none :tangle ~/.emacs.d/init.el

  ;; (use-package web-mode
  ;;   :ensure t
  ;;   :defer t
  ;; :after lsp-mode
  ;;   :config
  ;;   (setq web-mode-enable-current-element-highlight t
  ;;         web-mode-enable-current-column-highlight t
  ;;         web-mode-enable-auto-quoting nil
  ;;         web-mode-markup-indent-offset 2
  ;;         web-mode-attr-indent-offset 2
  ;;         web-mode-attr-value-indent-offset 2)

  ;;   (define-derived-mode web-typescript-mode web-mode "TS [web]")
  ;;   (define-derived-mode web-js-mode web-mode "JS [web]")
  ;;   (define-derived-mode web-html-mode web-mode "HTML [web]")
  ;;   (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  ;;   (add-to-list 'auto-mode-alist '("\\.[tj]sx?\\'" . web-mode))

  ;;   :general
  ;;   (general-def
  ;;     :prefix ","
  ;;     :states 'motion
  ;;     :keymaps 'web-mode-map
  ;;     "" nil
  ;;     "i" '(web-mode-buffer-indent :which-key "Web mode indent")
  ;;     "c" '(web-mode-fold-or-unfold :which-key "Web mode toggle fold")
  ;;     ))

#+end_src
** json
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  ;; (use-package json-mode :ensure t)       ;
#+end_src

** emacs-lisp-mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package emacs-lisp-mode
    :ensure nil
    :general
    (general-define-key
     :prefix ","
     :states 'motion
     :keymaps 'emacs-lisp-mode-map
     "" nil
     "e" '(nil :which-key "eval")
     "es" '(eval-last-sexp :which-key "eval-sexp")
     "er" '(eval-region :which-key "eval-region")
     "eb" '(eval-buffer :which-key "eval-buffer")

     "g" '(counsel-imenu :which-key "imenu")
     "c" '(check-parens :which-key "check parens")
     "I" '(indent-region :which-key "indent-region")
     "b" '(nil :which-key "org src")
     "bc" '(org-edit-src-abort :which-key "Abort")
     "bb" '(org-edit-src-exit :which-key "Save & Exit")
     )


    )
#+end_src
** typescript tide

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (defun tide-setup-hook()
    (tide-setup)
    (eldoc-setup)
    (flycheck-set-indication-mode +1)
    (tide-hl-identifier-mode +1)
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet
                         company-dabbrev-code company-dabbrev))))

  (use-package tide
    :ensure t
    :after (company flycheck)
    :hook (
           (before-save . tide-format-before-save)
           (tsx-mode-hook . tide-setup-hook)
           (js-mode-hook . tide-setup-hook)
           (typescript-mode-hook . tide-setup-hook)
           )
   :config
    (flycheck-add-mode 'typescript-tslint 'typescript-mode)
   (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)



  :general
  (general-def
    :prefix "SPC"
  :states 'normal
  :keymap: 'override

    "j"  '(nil :whick-key "Tide (TS/JS)")
    "jr" '(tide-refactor :which-key "Refactor")
    "jo" '(tide-organize-imports :which-key "Organize Imports")
    "jR" '(tide-rename-file :which-key "Rename the files and references")
    "js" '(tide-rename-symbol :which-key "Rename symbol")
    "je" '(tide-error-at-point :which-key "Error details at point")

      ))


#+END_SRC


* Dashboard
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-banner-logo-title "")
  (setq dashboard-startup-banner "~/.emacs.d/ka.png")

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))    )

  #+end_src
* kill the scratch on startup
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :results none
(add-hook 'emacs-startup-hook (lambda ()
                                (when (get-buffer "*scratch*")
                                  (kill-buffer "*scratch*"))))
#+end_src
