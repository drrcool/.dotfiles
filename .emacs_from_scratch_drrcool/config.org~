#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :results none
#+TITLE: Emacs Config DrrCool - March 2023
* Personal Information
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Richard Cool"
      user-mail-address "richardjcool@gmail.com")
#+end_src


** Color Definitions:
#+begin_src emacs-lisp :tangle yes
  (defvar rcool/black-color "#1F2528")
(defvar rcool/red-color "#EC5F67")
(defvar rcool/yellow-color "#FAC863")
(defvar rcool/blue-color "#6699CC")
(defvar rcool/green-color "#99C794")
(defvar rcool/purple-color "#C594C5")
(defvar rcool/teal-color "#5FB3B3")
(defvar rcool/light-grey-color "#C0C5CE")
(defvar rcool/dark-grey-color "#65737E")
#+end_src
  
#+RESULTS:
: rcool/dark-grey-color

* Startup Performance
#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold (* 50 1000 1000))
;; Profile Emacs Startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src    

* Package System Setup
- Using MELPA, ELPA, and Org Package repos
- =use-package= setup
  #+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
("nonGNU" . "https://elpa.nongnu.org/nongnu/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Tells use package to use straight.el to download
(setq straight-use-package-by-default t)
  #+end_src
* Basic UI Configuration
** Setup
*** Basic Configuration
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-message t)
(scroll-bar-mode -1) ;; Disable Visible Scrollbars
(tool-bar-mode -1)   ;; Disable the toolbar
;;(tooltip-mode -1)  ;; Disable tooltip
(set-fringe-mode 10) ;; Give some breathing room
(menu-bar-mode -1)   ;; Disable the meu bar

(setq initial-scratch-message "; Hello Doctor Cool. C-x C-f eh" ) ;; Message on Scratch Buffer
#+end_src
*** Emacs Window
#+begin_src emacs-lisp :tangle yes
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

#+RESULTS:
: ((alpha 90 . 90) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))
 
** Emacs Dashboard

#+begin_src emacs-lisp :tangle yes
  (use-package dashboard
    :diminish
    (dashboard-mode page-break-lines-mode)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome to emacs. ")
    (setq dashboard-items '((recents . 2)
                            (projects . 2)
                            (agenda . 10)))
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-week-agenda t)
    (setq dashboard-startup-banner 'logo)
    :custom-face
    (dashboard-heading ((t (:foreground "#fff" :weight bold))))
    )
#+end_src

** Font Configuration:
#+begin_src emacs-lisp :tangle yes
(defvar rcool/default-font-size 200)
  (set-face-attribute 'default nil :font "Spleen32x64 Nerd Font" :height rcool/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Spleen32x64 Nerd Font" :height 210)
  (set-face-attribute 'variable-pitch nil :font "Spleen32x64 Nerd Font" :height 220 :weight 'regular)
#+end_src

#+RESULTS:

** Icons
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src

#+RESULTS:

** Modeline
*** Doom Modeline
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15))
#+end_src

#+RESULTS:

*** Hide Modeline
#+begin_src emacs-lisp :tangle yes
(use-package hide-mode-line)
#+end_src

#+RESULTS:

** Theme
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes :defer t)
  (load-theme 'doom-acario-dark t)
#+End_src

#+RESULTS:
: t

** Rainbow Delimiter
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

* Keybinding Configuration
** General
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer rcool/leader-keys
      :states '(normal visual motion emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"
      )
    (general-create-definer rcool/local-leader-keys
      :states '(normal visual motion emacs)
      :prefix ","
      :global-prefix "SPC m"
      ))
  (rcool/leader-keys
    "" nil
    "f" '(:ignore t :wk "Files")
    "w" '(:ignore t :wk "Window")
    "b" '(:ignore t :wk "Buffer")
    "TAB" '(:ignore t :wk "Workspace")
    "c" '(:ignore t :wk "Code")
    "g" '(:ignore t :wk  "Git")
    "h" '(:ignore t :wk "Help")

    "i" '(:ignore t :wk "Insert")
    "n" '(:ignore t :wk "Notes")
    "o" '(:ignore t :wk "Open")
    "p" '(:ignore t :wk "Project")
    "q" '(:ignore t :wk "Quit")
   "t" '(:ignore t :wk "Toggle")
) 
    (rcool/local-leader-keys
      "" nil)
#+end_src

#+RESULTS:

** Evil Configuration
*** Evil
#+begin_src emacs-lisp :tangle yes
(defun rcool/disable-arrow-keys ()
  (interactive)
  (message "STOP USING ARROW KEYS!"))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-redo)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode-buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (define-key evil-normal-state-map (kbd "<left>") 'rcool/disable-arrow-keys)
  (define-key evil-normal-state-map (kbd "<down>") 'rcool/disable-arrow-keys)
  (define-key evil-normal-state-map (kbd "<right>") 'rcool/disable-arrow-keys)
  (define-key evil-normal-state-map (kbd "<up>") 'rcool/disable-arrow-keys)
  (evil-global-set-key 'motion (kbd "<left>") 'rcool/disable-arrow-keys)
  (evil-global-set-key 'motion (kbd "<down>") 'rcool/disable-arrow-keys)
  (evil-global-set-key 'motion (kbd "<right>") 'rcool/disable-arrow-keys)
  (evil-global-set-key 'motion (kbd "<up>") 'rcool/disable-arrow-keys)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  )
#+end_src
*** Evil Collection
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** Which Key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.1))
#+end_src
** Mac OS Keyswaps
#+begin_src emacs-lisp :tangle yes
  (setq
   mac-command-modifier 'super
   mac-right-command-modifier 'control
   mac-option-modifier 'meta
   mac-right-option-modifier 'meta
   mac-control-modifier 'meta
   mac-right-control-modifier 'control
   )
#+end_src

#+RESULTS:
: control

* Editing Configuration
** Command log mode
#+begin_src emacs-lisp :tangle yes
  (use-package command-log-mode)
#+end_src

#+RESULTS:

** Ivy
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1)
    :general
    (rcool/leader-keys
      :states '(normal visual motion)
      "s" '(:ignore t :wk "Search")
      "s s" '(swiper :wk "Swiper")
      ))

  (use-package ivy-rich
    :after counsel
    :init
    (ivy-rich-mode 1))
#+end_src

#+RESULTS:

** Counsel
#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :general
    (rcool/leader-keys
      ":" '(counsel-M-x :wk "M-x")
"b i" '(counsel-ibuffer :wk "iBuffer")
"b b" '(counsel-switch-buffer :wk "Switch Buffer")
      ) 
   :config
    (counsel-mode 1))

  (use-package smex
    :defer 1
    :after counsel)
#+end_src

#+RESULTS:
: [nil 0 1 0 nil require (smex nil t) idle 0 nil]

** Helpful Help Commands
#+begin_src emacs-lisp :tangle yes
  (use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-commpand] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: helpful-key

** Productivity
*** Autopair Config
#+begin_src emacs-lisp :tangle yes
  (use-package autopair)
(autopair-global-mode)
#+end_src

#+RESULTS:
: t

*** Smartparens
#+begin_src emacs-lisp :tangle yes
    (use-package evil-smartparens
      :hook (smartparens-enabled-hook . evil-smartparens-mode)
      (prog-mode . evil-smartparens-mode))
#+end_src

#+RESULTS:
| evil-smartparens-mode | rainbow-delimiters-mode |

*** Emmet Mode
#+begin_src emacs-lisp :tangle yes
  (use-package emmet-mode
    :mode "\\.edge\\'"
    :diminish (emmet-mode . "Îµ")
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :init
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t)
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (setq emmet-expand-jsx-className? nil)
    (setq emmet-self-closing-tag-style " /")
    )
#+end_src

** Text Scaling
#+begin_src emacs-lisp :tangle yes
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
            "Scale text"
            ("j" text-scale-increase "in")
            ("k" text-scale-decrease "out")
            ("f" nil "finished" :exit t))

  (rcool/leader-keys
   :states 'normal
   "h" '(:ignore t :wk "Hydra")
   "h s" '(hydra-text-scale/body :wk "Scale Text"))
#+end_src

* Org Mode
** Basic Config
*** Setup
#+begin_src emacs-lisp :tangle yes
  (defun rcool/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode)
    (visual-line-mode 1)
  (auto-fill-mode 0)
  (setq evil-auto-indent nil))

#+end_src

#+RESULTS:
: rcool/org-mode-setup

*** Font Configuration
#+begin_src emacs-lisp :tangle yes
  (defun rcool/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â¢"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Spleen32x64 Nerd Font" :weight 'regular :height (cdr face)))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
*** Use Org
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :hook (org-mode . rcool/org-mode-setup)
    :ensure org-plus-contrib
    :config
    (setq org-src-fontify-natively t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-edit-src-content-indentation 2)
    (setq org-hide-emphasis-markers t)
    (setq org-hide-block-startup nil)
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    (rcool/org-font-setup)

    :general
    (rcool/local-leader-keys
      :states '(normal visual motion)
      :keymaps 'org-mode-map
      "'" '(org-edit-special :wk "Edit Special")
      "-" '(org-babel-demarcate-block :wk "Split Block")
      "z" '(org-babel-hide-result-toggle :wk "Fold Result"))
    (rcool/local-leader-keys
      :keymaps 'org-scr-mode-map
     :states '(normal motion visual)
      "'" '(org-edit-src-exit :wk "exit"))
    :init
    (setq org-confirm-babel-evaluate nil)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (rcool/leader-keys
      :states '(normal visual motion)
      "a" '(org-agenda :wk "Agenda")
      "x" '(org-capture :wk "Capture")
    ))
#+end_src

#+RESULTS:

*** Tag List
#+begin_src emacs-lisp :tangle yes
  (setq org-tag-persistent-alist
        '(("Inbox" . ?i)
          ("@home" . ?h)
          ("@work" . ?w)
          ("@recovery" . ?r)
          ("@Manny" . ?m)
          ("@car" . ?c)
          ("#phone" . ?p)
          ("#computer" . ?u)))

  (setq org-tag-faces
        '(("@home" . ,rcool/green-color)
          ("@car" . ,rcool/purple-color)
          ("@work" . ,rcool/red-color)
          ("Inbox" . ,rcool/teal-color)
          ("@recovery" . ,rcool/blue-color)
          ))
#+end_src

#+RESULTS:
| @home     | , | rcool/green-color  |
| @car      | , | rcool/purple-color |
| @work     | , | rcool/red-color    |
| Inbox     | , | rcool/teal-color   |
| @recovery | , | rcool/blue-color   |

*** Capture Templates
#+begin_src emacs-lisp :tangle yes
  (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/org/tasks.org" "Inbox")
           "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
          ("j" "Journal Entries")
          ("jj" "Journal" entry
           (file+olp+datetree "~/org/journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :clock-in
           :clock-resume
           :empty-lines 1)
          ("jm" "Meeting" entry
           (file+olp+datetree "~/org/journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in
           :clock-resume
           :empty-lines 1)
          ("w" "Workflow")
          ("we" "Checking Email" entry (file+olp+datetree "~/org/journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

#+end_src

** Org Roam
*** Basic Setup
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :straight (:host github :repo "org-roam/org-roam"
                     :files (:defaults "extensions/*"))
    :init
    (setq org-roam-v2-ack t)


    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))
    (org-roam-db-autosync-mode)
    :config

    :custom
    (org-roam-directory (file-truename "~/org/roam"))
    (org-roam-dailies-directory "daily/")
    (org-roam-completion-everywhere t)
    :general
    (rcool/leader-keys
      :states '(normal visual motion)
      :prefix "SPC"
      "X" '(org-roam-capture :wk "Roam Capture")
      "n t" '(org-roam-dailies-goto-today :wk "Today's Daily Note")
      "n y" '(org-roam-dailies-goto-yesterday :wk "Yesterday's Daily Note")
      "a" '(rcool/define-agenda-files :wk "Refresh Agenda DB"))
    (rcool/local-leader-keys
      :states '(normal visual motion)
      :keymaps 'org-mode-map
      "r" '(:ignore t :which-key "Roam")
      "b" '(:ignore t :wk "Babel")
      "b t" '(org-babel-tangle :wk "Tangle")
      "i" '(completion-at-point :wk "Completion at Point")
      "r f" '(org-roam-node-find :wk "Find Node")
      "r i" '(org-roam-node-insert :wk "Insert Node")
      "r c" '(rcool/org-roam-create-id :wk "Create Roam ID")
      "r p" '(org-roam-dailies-goto-previous-note :wk "Prev Daily Note")
      "r n" '(org-roam-dailies-goto-next-note :wk "Next Daily Note")
      "r b" '(org-roam-buffer-toggle :wk "Toggle Buffer")
      ))
#+end_src

#+RESULTS:

*** Configure Templates
#+begin_src emacs-lisp :tangle yes
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"p
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n#+filetags: Daily\n\n"))))
#+end_src

#+RESULTS:
| d | default | entry | * %? | p | :if-new | (file+head %<%Y-%m-%d>.org #+TITLE: %<%Y-%m-%d> |

*** Extending Roam
Here, we add additional function to org-roam to either do something specific for more workflow or otherwise make =org-roam= more fully features.

**** Set CREATED and LAST_MODIFIED filetags on save
#+begin_src emacs-lisp :tangle yes
  (defvar rcool/org-created-property-name "CREATED")

  (defun rcool/org-set-created-property (&optional active name)
    (interactive)
    (let* ((created (or name rcool/org-created-property-name))
           (fmt (if active "<%s>" "[%s]"))
           (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
      (unless (org-entry-get (point) created nil)
        (org-set-property created now)
        now)))

  (defun rcool/org-find-time-file-property (property &optional anywhere)
    (save-execursion
     (goto-char (point-min))
     (let ((first-heading
            (save-excursion
              (re-search-forward org-outline-regexp-bol nil t))))
       (when (re-search-forward (format "^#\\+%s:" property)
                                (if anywhere nil first-heading) t)
         (point)))))

  (defun rcool/org-has-time-file-property-p (property &optional anywhere)
    (when-let ((pos (rcool/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos -1))))


  (defun rcool/org-set-time-file-property (property &optional anywhere pos)
    (when-let ((pos (or pos
                        (rcool/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun rcool/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (rcool/org-set-time-file-property "LAST_MODIFIED")))
#+end_src

**** Set CREATED on node creation
#+begin_src emacs-lisp :tangle yes
  (defun rcool/org-roam-create-id ()
   (interactive)
   (org-id-get-create)
   (rcool/org-set-created-property))
#+end_src

#+RESULTS:
: rcool/org-roam-create-id

**** Quick log entry header
#+begin_src emacs-lisp :tangle yes
  (defvar current-time-format "%H:%M:%S"
    "Format of date to insert with `insert-current-time' function.
  Note the weekly scope of the command's precision.")

  (defun insert-current-time ()
    "Insert the current time (1-week scope) into the current buffer."
    (interactive)
    (insert "* ")
    (insert (format-time-string current-time-format (current-time)))
    (insert "\n")
    )

  (rcool/leader-keys
    :states '(normal visual motion)
    :keymap 'org-mode-map
    "," '(insert-current-time :wk "current time"))
#+end_src

#+RESULTS:

*** Roam Capture Templates
These are templates used to create new nodes.

#+begin_src emacs-lisp :tangle yes
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
           :unnarrowed t)
          ("a" "area" plain
           "#+filetags: Area\n\n* Goals\n\n%^{Goals}\n\n* Tasks\n\n** TODO %?"
           :if-new (file+head "%<%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
           :unnarrowed t)
          ("j" "project" plain
           "#+filetags: Project\n\n* Goals\n\n%^{{Goals}\n\n* Tasks\n\n TODO %?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
           :unnarrowed t)
          ("p" "people" plain
           "#+filetags: People CRM\n\n* Contacts\n\nRelationship: %^{Relationship}\nPhone:\nAddress\nBirthday\n\n* Notes\n\n %?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
           :unnarrowed t)
          ("i" "institution" plain
           "#+filetags: Institution CRM\n\n* Contracts\n\nRelationship: %^{Relationship}\nPhone:\nAddress\n\n* Notes\\n %?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
           :unnarrowed t)
          ))
#+end_src

#+RESULTS:
| d | default | plain | %? | :if-new | (file+head %<%Y%m%d%H%M%S>-${slug}.org #+title: ${title} |

** UI Improvments

***** Change default bullets to be pretty
#+begin_src emacs-lisp :tangle yes
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("â¢" "â¢" "â¢" "â¦" "â¦" "â¦" "â¦")))

#+end_src

#+RESULTS:
| org-superstar-mode | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | rcool/org-mode-setup | org-eldoc-load |


#+end_src
** Org Mode UI
#+begin_src emacs-lisp :tangle yes

#+end_src

** Org Agenda
**** Filter out files that don't includes tasks in org agenda
I use =org-roam= to take notes, which keeps many small files.  We filter out any notes that don't includes =TODO= when forming the agenda.
#+begin_src emacs-lisp :tangle yes
  (defun rcool/define-agenda-files ()
    (interactive)
    "Return a list of note files containing 'HasTodo' tag.  I use this to denote files with tasks for org-agenda"
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (in tag $v1)] '(["Project" "Area" "Daily"])))))

    ;; Roam daily and project files only
    (setq org-agenda-files (rcool/define-agenda-files))
#+end_src
**** Remove noise from =org-agenda= views
This block sets the =org-agenda-prefix-format= in a friendly way for org-roam. It truncates long filenames and removes the =org-roam= timestamp slug.

#+begin_src emacs-lisp :tangle yes
  (defun rcool/buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun rcool/agenda-category (&optional len)
    "Get category of item at point for agenda."
    (let* ((file-name (when buffer-file-name
                        (file-name-sans-extension
                         (file-name-nondirectory buffer-file-name))))
           (title (rcool/buffer-prop-get "title"))
           (category (org-get-category))
           (result
            (or (if (and
                     title
                     (string-equal category file-name))
                    title
                  category)
                "")))
      (if (numberp len)
          (s-truncate len (s-pad-right len " " result))
        result)))

  (setq org-agenda-prefix-format
        '((agenda . " %i %(rcool/agenda-category 32)%?-32t% s")
          (todo . " %i %(rcool/agenda-category 32) ")
          (tags . " %i %(rcool/agenda-category 32) ")
          (search . " %i %(rcool/agenda-category 32) ")))
#+end_src
** Org Super Agenda
Setup for org super agenda and org -ql
#+begin_src emacs-lisp :tangle yes
  (use-package org-super-agenda
    :after org-agenda
    :init
    (setq org-agenda-dim-blocked-tasks nil))

  ;;Dashboard View
  (setq org-super-agenda-groups
        '((:name "Priority"
                 :priority "A")
          (:name "Inbox"
                 :tag ("Inbox" "Daily"))
          (:name "Next Actions for Work"
                 :and (
                       :todo ("NEXT")
                             :tag ("Active")
                             :tag ("@work")))
          (:name "Next Actions at Home"
                 :and (
                       :todo ("NEXT")
                             :tag ("Active")
                             :tag ("@home")))
          (:name "Waiting"
                 :todo "WAIT")
          (:name "Home"
                 :tag "@home")
          (:name "Work"
                 :tag "@work")
          (:name "Productivity"
                 :tag "Productivity")))
  (org-super-agenda-mode)
#+end_src

** Custom Commands
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO"
                  ((org-agenda-overriding-header "TODO Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
          ("n" "TODO Tasks"
           ((todo "TODO"
                  ((org-agenda-overriding-header "Todo Tasks")))))
          ("h" "Home Tasks" tags-todo "+@home")
          ("w" "Work Tasks" tags-todo "+@work")
          ("u" "Computer Tasks" tags-todo "+#computer")
          ("r" "Recovery Tasks" tags-todo "+@recovery")
          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Taskss")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))))
#+end_src

** Configure Babel Languages
#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (js . t)
     (sql . t)
     (calc . t)
     (lua . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Org Special Blocks
#+begin_src emacs-lisp :tangle yes
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode))
#+end_src

** Table of Contents
#+begin_src emacs-lisp :tangle yes
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src

** Create Template Snippets
#+begin_src emacs-lisp :tangle yes
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("temp" . "src"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("html" . "src html"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))

#+end_src

** Auto Tangle Configuration Files
#+begin_src emacs-lisp :tangle yes
  (defun rcool/org-babel-tangle-config ()
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rcool/org-babel-tangle-config)))
#+end_src

** Org Alert
#+begin_src emacs-lisp :tangle yes
  (use-package org-alert
    :ensure t
    :custom (alert-default-style 'osx-notifier)
    :config
    (setq org-alert-interval 1809
          org-alert-notification-title "Reminde!")
    (org-alert-enable))
#+end_src

** Org Wild Notifier
#+begin_src emacs-lisp :tangle yes
  (use-package org-wild-notifier
    :ensure t
    :custom
    (alert-default-style 'osx-notifier)
    (org-wild-notifier-alert-time '(1 10 30))
    (org-wild-notifier-keyword-whitelist '("TODO"))
    (org-wild-notifier-notificiation-title "Org Wild Reminder!")
    :config
    (org-wild-notifier-mode 1))
#+end_src

** Org Tree Slide
Presentation in org-mode.  Run =org-tree-slide-mode= and navigate slides with =C-<= and =C->=
#+begin_src emacs-lisp :tangle yes
  (defun rcool/presentation-setup ()
    (setq text-scale-mode-amount 3)
    (org-display-inline-images)
    (hide-mode-line-mode 1)
    (text-scale-mode 1))

  (defun rcool/presentation-end ()
    (hide-mode-line-mode 0)
    (text-scale-mode 0))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . rcool/presentation-setup)
           (org-tree-slide-stop . rcool/presentation-end))
    :custom
    (org-tree-slide-in-effect t)
    (org-tree-slide-activate-message "Presentation Started")
    (org-tree-slide-deactivate-message "Presentation Ended")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " // ")
    (org-image-actual-width nil))
#+end_src

* Markdown mode
#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode "\\.md'\\"
    :config
    (defun rcool/set-markdown-header-font-sizes ()
      (font-lock-add-keywords 'markdown-mode
                              '(("^*\\([-]\\)"
                                 (0 (prog1 (compose-region (match-beginning 1) (match-end 1) "â¢"))))))
      (dolist (face '((markdown-header-face-1 . 1.2)
                      (markdown-header-face-2 . 1.1)
                      (markdown-header-face-3 . 1.0)
                      (markdown-header-face-4 . 1.0)
                      (markdown-header-face-5 . 1.0)))
        (set-face-attribute (car face) nil :font "Hack" :weight 'normal :height (cdr face)))
      (set-face-attribute 'markdown-code-face nil :inherit '(shadow fixed-pitch)))

    (defun rcool/markdown-mode-hook ()
      (rcool/set-markdown-header-font-sizes))
    (add-hook 'markdown-mode-hook 'rcool/markdown-mode-hook))

#+end_src


* Emojis
* Utilities
** Counsel OSX App
** Speed Type
** Bluetooth
* Development
** Languages
*** Language Server
**** Basic Setup
**** LSP UI
**** LSP Ivy
**** LSP Treemacs
*** Dap Mode
*** Programming Languages
**** typescript
**** javascript
**** html
**** css
**** python
**** yaml
**** markdown
** Copilot
** flycheck
** company mode
** projectile
** magit
*** Configuration
** git-gutter
** lorem-ipsum
** commenting lines
** keybindings
** darkroom
** Snippets
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs
        '("~/.emacs_from_scratch_drrcool/snippets"))
  )
#+end_src

* Credential Management
* Calendar Sync
* Music
** Spotify
* Terminal
** term-mode
** colors
** vterm
** eshell
*** configure
*** fish completion
*** command highlighting
*** history autocompletion
*** eshell toggle
* Buffer Management With Bufler
* File Management
** Dired
*** Keybindings
**** Navigation
**** Marking Files
**** Copying and Renaming Files
**** Deleting Files
**** Creating and Extracting Archives
**** Other Common Operations
*** Basic Config
*** Dired Single
*** All the icons
*** Open External Files
*** Hide/Show Dotfiles
*** Dired Rainbow
* Calendar
* Window Management
* Cricket
